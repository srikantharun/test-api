{% macro render_dma_task(task,index,data_check,data_random,perf_counter)-%}

// Task description
// ================================
// The task executed has the following command:
// {{task}}

// Configure the number of channels
// ================================
uint64_t num_channels_{{index}}={{task.num_channels}};
uint64_t dmac_ch_num_{{index}}[] = { {{ task.channels | join(', ') }} };

// Configure the transfer size
// =============================
uint64_t tf_size_{{index}}[] = { {% for size in task.src_xbytesize %}DATA_SIZE_{{ size }}B{% if not loop.last %}, {% endif %}{% endfor %} };

{% if task.type=='SNPS_DW'-%}

// Configure the CH_CFG register
// =============================
// Allows changing the number of outstanding transactions: Allowed values: 0-15  for 1 to 6 transactions
// Allows enabling multiple UID for the transaction for RD/WR channels : set to the max UID
uint64_t cfg_flags_{{index}}[] = { {% for osr in task.osr %}CH_CFG_SRC_OSR_LMT({{ osr }})|CH_CFG_DST_OSR_LMT({{ osr }})|CH_CFG_WR_UID(4)|CH_CFG_RD_UID(4) {% if not loop.last %}, {% endif %}{% endfor %} };

// Configure the CH_CTL register
// =============================
uint64_t ctl_flags_{{index}}[] = { {% for len in task.burst_length %}CH_CTL_AWLEN_EN|CH_CTL_ARLEN_EN|CH_CTL_AWLEN({{ len }})|CH_CTL_ARLEN({{ len }}){% if not loop.last %}, {% endif %}{% endfor %} };
{% endif %}
// Configure the SRC and DST
// =============================
uintptr_t src_{{index}}[] =  { {% for src_address in task.source_address%} (uintptr_t) {{src_address}} {% if not loop.last %}, {% endif %}{% endfor %} };
uintptr_t dst_{{index}}[] =  { {% for dst_address in task.destination_address %} (uintptr_t) {{dst_address}} {% if not loop.last %}, {% endif %}{% endfor %} };

{% if data_check -%}
// Initialise source and destination
// ==================================
{% for src in task.source_address -%}
{% set size = task.src_xbytesize[loop.index0]  -%}
prepare_loc_array( (char * ) src_{{index}}[{{loop.index0}}], arrRef{{size}}, DATA_SIZE_{{size}}B );
{% endfor -%}

{% endif -%}
// Execute DMA task
// =============================
test_snps_dma_multi_channel_sel("{{task.name}}",(snps_dmac_regs *)get_dma_base_addr("{{task.instance}}"), num_channels_{{index}}, dmac_ch_num_{{index}}, src_{{index}}, dst_{{index}}, ctl_flags_{{index}}, cfg_flags_{{index}}, tf_size_{{index}}, true);

{% if data_check -%}
// Perform data check
// =============================
{% for dst in task.destination_address -%}
{% set size = task.src_xbytesize[loop.index0]  -%}
// If the start address is unaligned then the SNPS DMA will only transfer
// blk_size_bytes_dma_u = (CHx_BLOCK_TS.BLOCK_TS * src_single_size_bytes) - Source Unaligned bytes
// when src_single_size_bytes = CHx_CTL.SRC_TR_WIDTH/8

uint64_t src_align_bytes_{{index}}[] = { src_{{index}}[{{loop.index0}}] % 8 };

check_mem_snapshot(arrRef{{size}}, (char * ) dst_{{index}}[{{loop.index0}}], 0, DATA_SIZE_{{size}}B, get_memory_region_name(dst_{{index}}[{{loop.index0}}]), src_align_bytes_{{index}}[{{loop.index0}}]);
{% endfor -%}
{% endif -%}

{% endmacro -%}




