#!/usr/bin/env bash

set -e


#--------------------------------------------------------------
# functions
#--------------------------------------------------------------
usage() {
  cat << EOF
usage: $(basename $0) [ARGS]

merge Veloce and top-level simulation UCDB coverage databases


where ARGS are:
  -h                                : display this help
  --veloce_ucdb PATH [PATH] ...     : path(s) to Veloce UCDB db
  --simulation_ucdb PATH [PATH] ... : path(s) to Veloce UCDB db
  -o OUTPUT_DIR                     : directory where merged db and reports are generated (default: output)

EOF
}


error() {
  >&2 echo "ERROR: $@"
  exit 1
}


banner() {
cat << EOF

#--------------------------------------------------------------
# $@
#--------------------------------------------------------------
EOF
}


vcover_merge() {
  local output=$1
  shift 1
  local inputs=$@
# vcover-6821: Object type mismatch detected while merging
# vcover-6854: Multiple test data records with the same name encountered during the merge
  vcover merge -and -out "$output" $inputs \
    -suppress vcover-6821 \
    -suppress vcover-6854
}


#--------------------------------------------------------------
# execution
#--------------------------------------------------------------
output_dir="output"

veloce_ucdbs=()
simulation_ucdbs=()

while [ "$#" -gt 0 ]
do
  case "$1" in
    -h)
      usage
      exit 0
      ;;
    -o)
      shift 1
      output_dir=$1
      shift 1
      ;;
    --veloce_ucdb)
      shift 1
      veloce_ucdbs+=("$(readlink -e $1)")
      shift 1
      while (readlink -e "$1" &> /dev/null); do
        veloce_ucdbs+=("$(readlink -e $1)")
        shift 1
      done
      ;;
    --simulation_ucdb)
      shift 1
      simulation_ucdbs+=("$(readlink -e $1)")
      shift 1
      while (readlink -e "$1" &> /dev/null); do
        simulation_ucdbs+=("$(readlink -e $1)")
        shift 1
      done
      ;;
    *)
      usage
      error "$1 is not a valid argument"
      ;;
  esac
done

rm -rf $output_dir
mkdir -p $output_dir
cd $output_dir
mkdir -p input

banner "simulation UCDBs: copy"
i=0
for simulation_ucdb in ${simulation_ucdbs[@]}; do
  echo $simulation_ucdb
  cp $simulation_ucdb input/simulation_$i.ucdb
  ((i=i+1))
done

banner "Veloce UCDBs: update DUT's hierarchy to match simulation"
i=0
for veloce_ucdb in ${veloce_ucdbs[@]}; do
  echo $veloce_ucdb
  vsim -c -do <(cat << EOF
coverage open $veloce_ucdb
coverage edit -path hdl_top -rename i_hdl_top
coverage edit -movedesign i_hdl_top sim_top
coverage save input/veloce_modified_$i.ucdb
exit
EOF
)
  ((i=i+1))
done
rm -f transcript

banner "merge Veloce and simulation UCDB"
# merge simulation and veloce in 2 steps to avoid certain inputs from being removed
vcover_merge merged_simulation.ucdb input/simulation_*.ucdb
vcover_merge merged_veloce.ucdb input/veloce_*.ucdb
vcover_merge merged.ucdb merged_simulation.ucdb merged_veloce.ucdb

# Delete unwanted soc_periph scopes
vsim -c -do <(cat << EOF
coverage open merged.ucdb
coverage edit -delete -path sim_top/i_hdl_top/i_europa/u_aipu/u_soc_periph_p/u_soc_periph
coverage edit -delete -path sim_top/i_hdl_top/i_europa/u_aipu/u_soc_periph_p/u_pctl
coverage edit -delete -path sim_top/i_hdl_top/i_europa/u_aipu/u_soc_periph_p/u_ao_csr_padctrl
coverage save merged.ucdb
exit
EOF
)
rm -f transcript

banner "print reports"
vcover report -output report.txt -instance=/*. -detail -all -code t merged.ucdb
vcover testnames merged.ucdb > testnames.txt

banner "generate CSV"
(
echo "scope,toggle_coverage"
paste -d ","  - - < <(grep "Instance:\|Toggles" report.txt | awk '{print $NF}' | sed -e 's#/sim_top/i_hdl_top/##' -e 's/%//')
echo "total,$(grep 'Total Coverage By Instance' report.txt | awk '{print $NF}' | sed 's/%//')"
) > coverage.csv

sort coverage.csv -k2 -t ',' -n > coverage_sorted.csv
