{% import 'get_object.jinja2' as get_object %}
#################
# Clock Domains #
#################
{% for clock in data.clocks|filter_by_mode(constraint_mode) -%}

###############
# "{{ clock.name }}"
###############
{% if clock.clock_type == "generated" -%}
puts "INFO: Adding generated clock: '{{ clock.name }}' from '{{ clock.master_source.name }}' : divisor {{ clock.divisor }}"
create_generated_clock -add -name {{ clock.name }} -divide_by {{ clock.divisor }} -source {{ get_object.get_object(clock.master_source) }} -master_clock [get_clocks {{ clock.master_name }}] {{ get_object.get_object(clock.source) }}
{% else -%}
{%- set clock_period = 1000 / clock.freq_mhz -%}
{%- set duty_cycle = clock.dc / 100 -%}
puts "INFO: Adding clock: '{{ clock.name }}' ({{ clock.freq_mhz }} MHz)"
create_clock -add -name {{ clock.name }} -period {{ "%.3f"|format(clock_period) }} -waveform "0 {{ "%.3f"|format(clock_period * duty_cycle) }}" {{ get_object.get_object(clock.source) }}
set_clock_uncertainty -setup [expr {{ "%.3f"|format(clock_period) }} * 0.10 ] [get_clocks {{ clock.name }}]
set_clock_uncertainty -hold 0.010 [get_clocks {{ clock.name }}]
{% endif -%}
{% if clock.clock_type == "master" %}
# Synchronous Ports
{% for input in clock.sync_in %}
puts "INFO: constraining '{{ input.name }}' against '{{ clock.name }}'"
set_input_delay -min {{ "%.3f"|format(0.05 * clock_period) }} -clock {{ clock.name }} {{ get_object.get_object(input) }}
set_input_delay -max {{ "%.3f"|format(0.70 * clock_period) }} -clock {{ clock.name }} {{ get_object.get_object(input) }}
{%- endfor %}
{% for output in clock.sync_out %}
puts "INFO: constraining '{{ output.name }}' against '{{ clock.name }}'"
set_output_delay -min {{ "%.3f"|format(0.05 * clock_period) }} -clock {{ clock.name }} {{ get_object.get_object(output) }}
set_output_delay -max {{ "%.3f"|format(0.70 * clock_period) }} -clock {{ clock.name }} {{ get_object.get_object(output) }}
{%- endfor %}
{% endif %}
{% endfor %}
########################
# All clocks are ideal #
########################
set_ideal_network  [get_ports -filter {defined(clocks)}]
