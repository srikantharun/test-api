# ##############################################################################
# ########################## BASIC FLOW SETUP SCRIPT ###########################
# ##############################################################################
#
# This script contains basic flow configuration in the top section
# and design specific settings (also where to find related files) below.
# Further detailed settings are present in the script 'common.tcl', which is
# sourced at the end of this script.
#
# Version History:
# 2019-09-26 (HB): initial version
# 2020-05-07 (HB): added 2020 R1 feature: AnalyzeStaticEfficiency (run_ase.tcl)
# 2021-05-06 (HB): add dummy 'flow_step' to facilitate scripting
#
# ##############################################################################
# ########################## GLOBAL FLOW CONFIGURATION #########################
# ##############################################################################

set make_dir $env(MAKEFILE_DIR)
set exec_dir $env(PA_EXEC_DIR)

source ${make_dir}/pa_setup.tcl

# Global configuration of the flow:
# =================================
# Setting if clocks are introduced with native commands or imported through SDC.
# ####################
# # Need to review
# ####################
set use_sdc_input_for_clocks true ; # valid values: "true" or "false"

# Setting if a PACE file is used (for better correlation and easier flow setup).
# ####################
# # Need to review
# ####################
set use_pace_based_flow true ; # valid values: "true" or "false"

# Setting how the (necessary) activity data is provided to PowerArtist.
# Valid values are "vcd_fsdb", "saif" or "vectorless".
# ####################
# # Need to review
# ####################
if { [info exists ACTIVITY_FILE] } {
  set source_of_activity_data "vcd_fsdb"
} else {
  set source_of_activity_data "vectorless"
}

# Setting at which stage in the design flow the power analysis is performed.
# For designs with a mixture of different design stages, choose the design stage
# of the block which is at the earliest stage.
# (If any block still is at RTL stage, then specify "rtl").
# Valid values are "rtl", "post_syn" and "gate".
# ####################
# # Need to review
# ####################
if { ![info exists design_stage] } {
  set design_stage "rtl"
}


# Sign-in check: flow script is only suitable for release 2019 R2 onwards.
if { [lindex [split $wwVersion "."] 0] < "2019" } {
  return -code error "Error! PowerArtist tool version is too old for this flow! Only releases from 2019 R2 onwards are supported! Exiting ..."
}

# ##############################################################################
# ########################## DIRECTORY STRUCTURE SETUP #########################
# ##############################################################################

# Define default directory names.
# ####################
# # Need to review
# ####################
set DESIGN_DATA_DIR ../ ; # contains input (design, library, FSDB etc.) data
set INPUT_DIR ./input ; # contains auxiliary input data (what-if analysis etc.)
set LOG_DIR ./log     ; # stores log files
set RPT_DIR ./report  ; # stores text reports
set CSV_DIR ./csv     ; # stores results in CSV format
set PDB_DIR ./pdb     ; # stores PowerArtist databases (in OpenAccess format)
set WORK_DIR ./work   ; # stores internal data generated by PowerArtist
set GRAPH_DIR ./graph ; # stores waveform data
set PACE_DIR $env(REPO_ROOT)/../europa_pace   ; # stores pace tech file

# ##############################################################################
# ############################### GLOBAL SETTINGS ##############################
# ##############################################################################

# Define the top module name for multiple flow steps and reporting.
# ####################
# # Need to change
# ####################
set top_module ${DESIGN_NAME}

# Set variable 'flow_step' to dummy value if not set by 'run*.tcl' scripts.
if { ![info exists flow_step] } {
  set flow_step "unspecified"
}

# Skip further settings for Elaborate step.
if { $flow_step != "Elaborate" } {
  # Following settings are not used by Elaborate.

# ##############################################################################
# ########################## ACTIVITY RELATED SETTINGS #########################
# ##############################################################################

  # Skip activity related settings for PACE generation or AnalyzeStaticEfficiency.
  if { $flow_step != "WriteTechnologyFile" && $flow_step != "AnalyzeStaticEfficiency" } {
    if { $source_of_activity_data == "vectorless" } {
      # Define location of an already present vectorless activity file (VAF).
      # If this file is not present, a vectorless file will be generated based on
      # average activity/duty cycle information from the script:
      # '${script_dir}/generate_vaf_file.tcl'
      # ####################
      # # Need to review
      # ####################
      if {![file exists $INPUT_DIR]} { exec mkdir -p $INPUT_DIR }
      pa_set vectorless_input_file $INPUT_DIR/${top_module}_vectorless.vaf
    } else {
      # Define full hierarchical top instance name (inside activity file).
      # Usually it is "<testbench>.<instance of top module>".
      # ####################
      # # Need to change
      # ####################
      pa_set top_instance ${TOP_INST}
      if { $source_of_activity_data == "vcd_fsdb" } {

        # Define the absolute or relative path to the FSDB or VCD file.
        # Also supported are gzipped files like "xxx.vcd.gz" or "yyy.fsdb.gz".
        # FSDB files are preferred (ProfilePower only runs with FSDBs).
        # Ensure that the activity/simulation results file is a level 0 dump.
        pa_set activity_file ${make_dir}/${ACTIVITY_FILE}

        # Define start and finish time for power analysis or reduction.
        # GenerateActivityWaveforms uses other settings (in "run_act*.tcl").
        # Reasonable start and finish times can be found by Vector Analysis
        # (GenerateActivityWaveforms) or based on ProfilePower output.
        pa_set analysis_windows ${ANALYSIS_WINDOWS}
      } else {
        # SAIF flow; reading in toggle summary information.
        # Cycle accurate information is missing, so only a subset of power
        # analysis, debug and reduction features are supported.
        # ####################
        # # Need to change
        # ####################
        pa_set saif_file "${DESIGN_DATA_DIR}/sim/${top_module}.saif"
      }
    }
  }

# ##############################################################################
# ###################### DESIGN HIERARCHY TRACING SETTINGS #####################
# ##############################################################################

  # Define instances for vector analysis and for detailed vertical power report.
  # $traceInstancesList affects:
  #    vector analysis w/ GenerateActivityWaveforms,
  #    -vertical_report for average power analysis,
  #    MonitorInstances for time based power analysis, and
  #    MonitorToggleInstances for Flop Clock Activity (FCA) analysis
  # This list can be auto-generated from an SetBAR csv report with the script:
  #   "create_trace_instances_list_based_on_BAR_output.tcl"
  # ex: set traceInstancesList { top top.a top.b top.c }
  # ####################
  # # Need to review
  # ####################
  set traceInstancesList "${top_module}"

# ##############################################################################
# ########################### CLOCK RELATED SETTINGS ###########################
# ##############################################################################

  if { $use_sdc_input_for_clocks } {

    # Clock names are imported through SDC
    # ------------------------------------
    # SDC input files (can be several).
    # ####################
    # # Need to review
    # ####################
    pa_set sdc_files ${script_dir}/base/sdc_files.sdc

  } else {

    # Clock names are specified manually through "SetClockNet" commands
    # -----------------------------------------------------------------
    # Provide a list of clock nets/pins with their clock frequencies.
    # Ensure that hierarchy separator is "." and that top module name is present.
    # For the clock frequency, use "-1" if the frequency should not be specified.
    # However, a realistic frequency is required for a PACE-based run.
    # Optionally a clock-specific transition time can be specified
    # (otherwise use "-1").
    # Example without clock frequency and clock specific transition time:
    # set CLOCK_LIST "[list \
    #   [list ${top_module}.clk1 -1 -1] \
    #   [list ${top_module}.clk2 -1 -1] \
    # ]"
    # ####################
    # # Need to change
    # ####################
    set CLOCK_LIST "[list \
      [list <clock 1 pin/net> <frequency or -1> <transition_time or -1>] \
      [list <clock 2 pin/net> <frequency or -1> <transition_time or -1>] \
    ]"
  }

# ##############################################################################
# ##################### POWER ANALYSIS & REDUCTION SETTINGS ####################
# ##############################################################################

  # Optional: define static/dynamic power of each Blackbox.
  # ####################
  # # Need to review
  # ####################
  #SetPower -module <blackbox> -static <static power> -dynamic <dynamic power>

  # Optional: define instances and models to be traced in a specific way.
  # ####################
  # # Need to review
  # ####################
  #TraceThruCell -blackbox <blackbox module> -input_pins <input_pins> -output_pins <output_pins>

# ##############################################################################
# ################## CELL USAGE AND WIRE CAP RELATED SETTINGS ##################
# ##############################################################################

  if { $design_stage != "rtl" } {
    # For gate-level: specify corresponding SPEF file (which matches netlist).
    # ####################
    # # Need to change
    # ####################
    set spef_file "$SPEF_FILE"
  }

} ; # End of skipping settings for Elaborate step.

# Source 'common.tcl' to apply settings from above.
# It also contains further detailed settings (technology related etc.).
source ${script_dir}/base/common.tcl
