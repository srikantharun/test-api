{% macro render_merged_regions(merged_regions,detailed_regions)-%}
// AUTO GENERATED, DON'T MANUALLY EDIT!!
// (C) Copyright Axelera AI 2024
// All Rights Reserved
// *** Axelera AI Confidential ***
//
// Description: Automatic generated module with all memories
// Owner: hw/scripts/addr_map

{% set non_idempotent_entries = merged_regions | selectattr("type", "equalto", "device") | list -%}
{% set execute_entries = detailed_regions | selectattr("type", "equalto", "memory") | selectattr('name', 'contains_strings', 'spm', 'l1', 'ddr') | list -%}

{% set execute_entries = (detailed_regions | selectattr('name', 'contains_strings', 'debug', 'dbg') | selectattr('flags', 'contains_strings', 'X')  | list)
                          + (detailed_regions | selectattr("type", "equalto", "memory") | selectattr('name', 'contains_strings', 'spm', 'l1', 'ddr')) | list -%}

{% set cached_entries = detailed_regions | selectattr("type", "equalto", "memory") | selectattr('name', 'contains_strings', 'spm', 'ddr') | rejectattr('name', 'equalto', 'sys_spm') | list -%}
{% set prefix = "64'h" -%}
  // CVA6 configuration parameters
  parameter config_pkg::cva6_user_cfg_t CVA6UserCfg = '{
    NrNonIdempotentRules:  32'd{{ non_idempotent_entries | length }},
    NonIdempotentAddrBase: 1024'({{ non_idempotent_entries | map(attribute="offset") | map('hex',16, prefix)  | join(', ')  }}),
    NonIdempotentLength:   1024'({{ non_idempotent_entries | map(attribute="size") | map('hex',16, prefix)  | join(', ')  }}),
    NrExecuteRegionRules:  32'd{{ execute_entries | length }},
    ExecuteRegionAddrBase: 1024'({{ execute_entries | map(attribute="offset") | map('hex',16, prefix) | join(', ') }}),
    ExecuteRegionLength:   1024'({{ execute_entries | map(attribute="size") | map('hex',16, prefix) | join(', ') }}),
    NrCachedRegionRules:   32'd{{ cached_entries | length }},
    CachedRegionAddrBase:  1024'({{ cached_entries | map(attribute="offset") | map('hex',16, prefix) | join(', ') }}),
    CachedRegionLength:    1024'({{ cached_entries | map(attribute="size") | map('hex',16, prefix) | join(', ') }}),
  };

{% endmacro %}
{{ render_merged_regions(merged_regions,detailed_regions) }}

