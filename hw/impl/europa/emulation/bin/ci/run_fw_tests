#!/usr/bin/env bash

set -e


#--------------------------------------------------------------
# functions
#--------------------------------------------------------------
usage() {
  cat << EOF
usage: $(basename $0) [ARGS]

run a regression test on a Veloce database


where ARGS are:
  -h                        : display this help
  --release_db_name DB_NAME : Veloce database name in /home/data2/builds/release/europa, if empty use current directory
  -L VERIFSDK_LABEL         : verifsdk label (default is VELOCE_TOP_LIGHT_NIGHTLY)
  --coverage_suffix SUFFIX  : add suffix to ucdb to make coverage filename unique

  -c|--clocks CONFIG        : program clocks after reset (e.g.: -c canonical)
EOF
}


error() {
  >&2 echo "ERROR: $@"
  exit 1
}


kill_server() {
  if [ "$veloce_server_exited_cleanly" = 1 ]; then
    echo "veloce server exited cleanly"
  else
    echo "veloce server did not exit cleanly: kill"
    cd $DATABASE_ROOT
    [ -f ./tcl_server_pid.txt ] || error "./tcl_server_pid does not exist"
    (pstree -A -p $(cat ./tcl_server_pid.txt) | grep -Eow "[0-9]+" | xargs kill) &> /dev/null
  fi
}


#--------------------------------------------------------------
# execution
#--------------------------------------------------------------
veloce_server_exited_cleanly=0
release_db_name=""
verifsdk_label="VELOCE_TOP_LIGHT_NIGHTLY"
coverage_suffix=""
clock_config="clocks.DEFAULT"

while [ "$#" -gt 0 ]
do
  case "$1" in
    -h)
      usage
      exit 0
      ;;
    --release_db_name)
      shift 1
      release_db_name="$1"
      shift 1
      ;;
    -L)
      shift 1
      verifsdk_label="$1"
      shift 1
      ;;
    --coverage_suffix)
      shift 1
      coverage_suffix="$1"
      shift 1
      ;;
    -c|--clocks)
      shift 1
      clock_config="clocks.${1^^}"
      shift 1
      ;;
    *)
      usage
      error "$1 is not a valid argument"
      ;;
  esac
done

# copy release database is release_db_name is defined
if [ "$release_db_name" != "" ]; then
  cp -rf "/home/data2/builds/release/europa/$release_db_name" .
  cd $release_db_name
fi

# start server
export DATABASE_ROOT="$PWD"
trap kill_server EXIT
# 5h timeout (18000s) by default
./run --licqueue --timeout 18000 --tcl_server --coverage_suffix "$coverage_suffix" &>/dev/null &
echo $! > tcl_server_pid.txt
sleep 10

# run all tests
mkdir -p build && cd build
verifsdk_return_value=0
verifsdk -P $(cat "$DATABASE_ROOT/verifsdk_platform.txt") -L "$verifsdk_label" -F log_level.WARNING -F "$clock_config" --attach_to_tcl_server -v --ctest -j1 --output-on-failure || verifsdk_return_value="$?"

# exit server
cd $DATABASE_ROOT
./tcl_send_cmd exit
veloce_server_exited_cleanly=1
exit $verifsdk_return_value
