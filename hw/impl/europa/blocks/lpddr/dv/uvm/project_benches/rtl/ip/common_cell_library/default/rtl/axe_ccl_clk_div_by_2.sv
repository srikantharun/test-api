// (C) Copyright 2024 Axelera AI B.V.
// All Rights Reserved
// *** Axelera AI Confidential ***
//
// Owner: Wolfgang Roenninger <wolfgang.roenninger@axelera.ai>


/// The module will **always** divide the clock by 2 when enabeld. It does this by toggeling a FF every time the input clock asserts.
/// Clock output is held `0` when not enabeld. Clock will bypass the FF when in testmode.
///
module axe_ccl_clk_div_by_2 (
  /// Clock, positive edge triggered
  input  wire  i_clk,
  // doc async
  /// Asynchronous reset, active low
  input  wire  i_rst_n,
  // doc sync clk_i
  /// Test mode enable. Bypass the toggle FF.
  input  logic i_test_mode,
  /// Enable the output clock divided by two.
  input  logic i_enable,
  // doc async
  /// Output clock, divided by two.
  ///
  /// This signal is directly generated by the state output of a T-Flip Flop.
  output wire  o_clk
);
  /////////////////////////
  // Signal declarations //
  /////////////////////////
  logic clk_q; // The FF that generates the divided clock.
  logic clear; // Synchronously reset the toggle FF.

  //////////////////////////////////
  // Control, clear the T-FF when //
  //////////////////////////////////
  always_comb clear = ~i_enable & clk_q;

  // DFFRCL: D-Flip-Flop, asynchronous reset, synchronous clear, load enable
  always_ff @(posedge i_clk or negedge i_rst_n) begin
    if (!i_rst_n)      clk_q <= 1'b0;
    else if (clear)    clk_q <= 1'b0;
    else if (i_enable) clk_q <= ~clk_q;
  end

  /////////////////////////////
  // Test bypass multiplexer //
  /////////////////////////////
  axe_tcl_clk_mux2 u_clk_mux2 (
    .i_clk0(clk_q),
    .i_clk1(i_clk),
    .i_sel (i_test_mode),
    .o_clk
  );
endmodule
