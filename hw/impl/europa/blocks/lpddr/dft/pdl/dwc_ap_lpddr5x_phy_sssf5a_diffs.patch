diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/sim/bootenv /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/sim/bootenv
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/sim/bootenv	2024-08-01 10:53:45.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/sim/bootenv	2024-11-27 18:38:03.904308695 +0000
@@ -1,15 +1,15 @@
-#!/bin/csh
+#!/bin/bash
 
-setenv CTB_HOME `pwd`/..
-alias runtc '$CTB_HOME/sim/runtc'
+export CTB_HOME=`pwd`/..
+alias runtc='$CTB_HOME/sim/runtc'
 
-setenv CORETOOLS 1
+export CORETOOLS=1
 
 #release package
-setenv CTB_FW_DIR $CTB_HOME/../../firmware/Latest
-setenv CTB_PHYINIT_DIR $CTB_HOME/../../phyinit/Latest/software
+export CTB_FW_DIR=$CTB_HOME/../../firmware/Latest
+export CTB_PHYINIT_DIR=$CTB_HOME/../../phyinit/Latest/software
 
 #####set zcalna_bhv file for LPDDR in release package
-setenv ZCALANA_BHV_FILE $CTB_HOME/testbench/rtl/lpddr/dwc_lpddr5xphy_zcalana_bhv.v
+export ZCALANA_BHV_FILE=$CTB_HOME/testbench/rtl/lpddr/dwc_lpddr5xphy_zcalana_bhv.v
 
-setenv sdf_path 15M_1X_h_1Xb_v_1Xe_h_1Ya_v_1Yb_h_5Y_vhvhv_2Yy2Z
+export sdf_path=15M_1X_h_1Xb_v_1Xe_h_1Ya_v_1Yb_h_5Y_vhvhv_2Yy2Z
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/sim/run_ate_vcs /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/sim/run_ate_vcs
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/sim/run_ate_vcs	1970-01-01 00:00:00.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/sim/run_ate_vcs	2024-12-01 14:32:46.546665527 +0000
@@ -0,0 +1,58 @@
+#!/bin/bash
+
+echo "CTB ate_fw regression"
+echo "CTB_HOME $CTB_HOME"
+
+
+cd $CTB_HOME/../..
+if [ -e run_ate_fw ] ; then
+  mv run_ate_fw run_ate_fw.`date +%m_%d_%y_%H_%M_%S`
+fi
+mkdir run_ate_fw
+cd $CTB_HOME/../../run_ate_fw
+mkdir run_lpddr5
+
+cd $CTB_HOME/../../run_ate_fw/run_lpddr5
+
+
+declare -a arr=("revision_check"   
+                "impedance_cal"    
+                "pll_lock"         
+                "lcdl_linearity"   
+                "ac_loopback"      
+                "data_1d_loopback" 
+                "data_2d_loopback" 
+                "rxreplica"        
+                "dca_loopback"     
+                "mem_reset"        
+                "pclk_dca"         
+                "dto_loopback"
+                "burn_in"
+                )     
+
+for i in "${arr[@]}"; do
+    mkdir -p $i
+    cd $i
+    echo "Running in $(pwd)"
+    $CTB_HOME/sim/runtc cfg=lp5x4xcs2dq18ch2 tc=demo_ate dram=lpddr5 skip_train=1 freq0=800 freq_ratio0=2 rank=2 pstates=1 dfi_mode=3 dmem_nz=1 ate=$i -data_test | tee vrun.log &
+    cd - 
+done
+
+#The numbers represent the tests being run  see phy/firmware/A-2024.08/ate/mnPmuSramMsgBlock_ate.h
+arr=("0x1d7f"
+     "0x47f"
+    )     
+
+for i in "${arr[@]}"; do
+    mkdir -p ./test_$i
+    cd ./test_$i
+    echo "Running in $(pwd)"
+    $CTB_HOME/sim/runtc cfg=lp5x4xcs2dq18ch2 tc=demo_ate dram=lpddr5 skip_train=1 freq0=800 freq_ratio0=2 rank=2 pstates=1 dfi_mode=3 dmem_nz=1 ate="MASIS" ate_tests_to_run=$i  -data_test | tee vrun.log &
+    cd -
+done
+
+
+wait
+
+
+
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/sim/runtc /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/sim/runtc
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/sim/runtc	2024-08-01 10:53:45.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/sim/runtc	2024-11-27 19:09:05.094678356 +0000
@@ -3383,13 +3383,15 @@
 if [ $dram != "ddr5" ]; then
   # DramStateChangeEn
   if [ -d $CTB_HOME/../build ]; then #dev
-    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" ${dev_build}/init/lpddr*/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'` 
+    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" ${dev_build}/init/lpddr5/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'` 
   elif [ -d $CTB_HOME/../../macro ] || [ -f $CTB_HOME/../../src/dwc_*phy_top.lst ]; then #release package 
-    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" $CTB_HOME/../../phyinit/Latest/software/lpddr*/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'`
+    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" $CTB_HOME/../../phyinit/Latest/software/lpddr5/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'`
   else #common branch 
-    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" $CTB_PHYINIT_DIR/lpddr*/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'`
+    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" $CTB_PHYINIT_DIR/lpddr5/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'`
   fi
 
+  echo "DSC_valid"
+  echo $DSC_valid
   if [ $DSC_valid != 1 ]; then
     DramStateChangeEn=0
   else
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/testbench/inc/lpddr/common_test_inc.sv /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/testbench/inc/lpddr/common_test_inc.sv
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/testbench/inc/lpddr/common_test_inc.sv	2024-08-01 10:53:45.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/testbench/inc/lpddr/common_test_inc.sv	2024-11-30 19:11:01.813425445 +0000
@@ -234,6 +234,8 @@
 reg csr_bkdoor_done;
 reg [31:0] read_0;
 
+  $display("AXE iCall csr_wr 0x%h 0x%h", addr, data);
+   
   `ifdef DWC_LPDDR5XPHY_JTAG
   top.jtag.write (addr,data);
   `elsif CSR_BKDOOR
@@ -264,7 +266,39 @@
   `else
   top.apb.write (addr,data);
   `endif
-endtask
+endtask //
+
+//--------------------------------------------------------------------------------
+//APB Read with mask task
+//--------------------------------------------------------------------------------
+task automatic apb_rd_mask;
+input  [31:0] addr;
+input  [31:0] enable_mask;
+output [31:0] data;
+reg csr_bkdoor_done;
+
+  `ifdef DWC_LPDDR5XPHY_JTAG
+  top.jtag.read (addr,data);
+  `elsif CSR_BKDOOR
+  csr_bkdoor(addr,0,0,data,csr_bkdoor_done);
+  if(csr_bkdoor_done==1'b0)
+    begin
+      bkdoor_read_fail_count=bkdoor_read_fail_count + 1'b1;
+      top.apb.read (addr,data);
+    end
+  else
+     bkdoor_read_pass_count=bkdoor_read_pass_count + 1'b1;
+  `else
+  top.apb.read (addr,data);
+  `endif // !`elsif CSR_BKDOOR
+
+   if (enable_mask == 0) begin
+      $display("AXE iCall csr_rd_capture 0x%h", addr);
+   end else begin
+      $display("AXE iCall csr_rd_masked 0x%h 0x%h 0x%h", addr, data, enable_mask);
+   end
+   
+endtask   
 
 //--------------------------------------------------------------------------------
 //APB Read task
@@ -274,6 +308,9 @@
 output [31:0] data;
 reg csr_bkdoor_done;
 
+   
+
+
   `ifdef DWC_LPDDR5XPHY_JTAG
   top.jtag.read (addr,data);
   `elsif CSR_BKDOOR
@@ -288,13 +325,16 @@
   `else
   top.apb.read (addr,data);
   `endif
+
+   $display("AXE iCall csr_rd 0x%h 0x%h", addr, data);
+
 endtask
 
 // ---------------------------------------------------------------
 // PHY Init Relevant Tasks
 // ---------------------------------------------------------------
 task automatic dwc_ddrphy_phyinit_userCustom_wait(int num_dfi_clk=0);
-  $display("[%0t] <%m> In dwc_ddrphy_phyinit_userCustom_wait.", $time);
+  $display("AXE iNote \"[%0t] <%m> In dwc_ddrphy_phyinit_userCustom_wait.\"", $time);
   repeat(num_dfi_clk) @(posedge top.dfi_clk);
 endtask
   
@@ -302,32 +342,32 @@
   int Num_cycle;
   int tCK;
   int time_ps;
-  $display("[%0t] <%m> In dwc_ddrphy_phyinit_userCustom_waitTime.", $time);
+  $display("AXE iNote \"[%0t] <%m> In dwc_ddrphy_phyinit_userCustom_waitTime.\"", $time);
   time_ps = time_ns * 1000;
   tCK  = (1_000_000.0/cfg.Frequency[cfg.FirstPState]);//cycle
   Num_cycle = `CEIL(time_ps,tCK);
   repeat(Num_cycle) @(posedge top.dfi_clk);
-  $display("[%0t] <%m> Wati %0d ns, frequency[%0d] = %0d.", $time, time_ns, cfg.FirstPState, cfg.Frequency[cfg.FirstPState] );
+  $display("AXE iNote \"[%0t] <%m> Wati %0d ns, frequency[%0d] = %0d.\"", $time, time_ns, cfg.FirstPState, cfg.Frequency[cfg.FirstPState] );
 endtask
   
 task automatic dwc_ddrphy_phyinit_userCustom_overrideUserInput(chandle ctx);
-  $display("In dwc_ddrphy_phyinit_userCustom_overrideUserInput.");
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_overrideUserInput.\"");
 endtask
 
 task automatic dwc_ddrphy_phyinit_userCustom_A_bringupPower(chandle ctx);
-  $display("In dwc_ddrphy_phyinit_userCustom_A_bringupPower, @%0t",$time);
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_A_bringupPower, @%0t\"",$time);
   test.top.clk_rst_drv.power_up();
 endtask
 
 task automatic dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy(chandle ctx);
-  $display("In dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy, @%0t",$time);
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy, @%0t\"",$time);
   test.top.clk_rst_drv.start_clkRst();
 endtask
 
 task automatic dwc_ddrphy_phyinit_userCustom_customPreTrain(chandle ctx);
   int max_ca = 0;
 
-  $display("In dwc_ddrphy_phyinit_userCustom_customPreTrain.");
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_customPreTrain.\"");
 
 `ifdef MMFW_ENV
   if (cfg.NumPStates>2) getPsExecOrder(RuntimeConfig_curPState);
@@ -336,12 +376,12 @@
 `ifdef SWIZZLE
 `ifdef DB_SWIZZLE
   $display(swizzle_cfg::swizzle_byte_cfg);
-  $display("In DBYTE swizzle...");
+  $display("AXE iNote \"In DBYTE swizzle...\"");
 
   for (int x=0; x<`DWC_LPDDR5XPHY_NUM_DBYTES; x++) begin // x is applied to switch DBYTE, y is used to switch the DQ bit in each DBYTE
     for (int y=0; y<9; y++) begin // 8 DQ and 1 DMI pins
       dwc_ddrphy_apb_wr((`DWC_DDRPHYA_DBYTE0_p0_Dq0LnSel+(x<<12)+y), swizzle_cfg::swizzle_byte_cfg[x][y]);
-      $display("[TB INFO] set swizzle csr :DBYTE%0d DqnLnSel_addr=%0h, data=%0h",x,(`DWC_DDRPHYA_DBYTE0_p0_Dq0LnSel+(x<<12)+y), swizzle_cfg::swizzle_byte_cfg[x][y]);
+      $display("AXE iNote \"[TB INFO] set swizzle csr :DBYTE%0d DqnLnSel_addr=%0h, data=%0h\"",x,(`DWC_DDRPHYA_DBYTE0_p0_Dq0LnSel+(x<<12)+y), swizzle_cfg::swizzle_byte_cfg[x][y]);
     end
   end
 `endif // DB_SWIZZLE
@@ -354,14 +394,14 @@
 `endif
 
   $display(swizzle_cfg::swizzle_ca_cfg);
-  $display("In CA swizzle...");
+  $display("AXE iNote \"In CA swizzle...\"");
 
   for (int x=0; x<max_ca; x++) begin
     dwc_ddrphy_apb_wr((`DWC_DDRPHYA_AC0_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[0][x]);
-    $display("[TB INFO] set swizzle csr : BLOCK AC0, MapCAntoDfi_addr=%0h, data=%0h",(`DWC_DDRPHYA_AC0_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[0][x]);
+    $display("AXE iNote \"[TB INFO] set swizzle csr : BLOCK AC0, MapCAntoDfi_addr=%0h, data=%0h\"",(`DWC_DDRPHYA_AC0_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[0][x]);
   `ifdef DFI_MODE3
     dwc_ddrphy_apb_wr((`DWC_DDRPHYA_AC1_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[1][x]);
-    $display("[TB INFO] set swizzle csr : BLOCK AC1, MapCAntoDfi_addr=%0h, data=%0h",(`DWC_DDRPHYA_AC1_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[1][x]);
+    $display("AXE iNote \"[TB INFO] set swizzle csr : BLOCK AC1, MapCAntoDfi_addr=%0h, data=%0h\"",(`DWC_DDRPHYA_AC1_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[1][x]);
   `endif
   end
 `endif // CA_SWIZZLE
@@ -370,7 +410,7 @@
 endtask
 
 task automatic dwc_ddrphy_phyinit_userCustom_E_setDfiClk(chandle ctx, int PState); //does the task still exist?
-  $display("In dwc_ddrphy_phyinit_userCustom_E_setDfiClk(%0d)", PState);
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_E_setDfiClk(%0d)\"", PState);
   phyctx     = ctx;
   cfg.PState = PState;
   repeat(30) @(posedge top.dfi_clk);
@@ -379,7 +419,7 @@
 task automatic dwc_ddrphy_phyinit_userCustom_H_readMsgBlock(chandle ctx, int Train2D=0);
   int unsigned MicroContMuxSel;
   int unsigned data;
-  $display("In dwc_ddrphy_phyinit_userCustom_H_readMsgBlock.");
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_H_readMsgBlock.\"");
   phyctx = ctx;
   `ifdef QUICKBOOT
     apb_rd(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, MicroContMuxSel);
@@ -397,7 +437,7 @@
   automatic string pubstr;
   automatic string fileName;
 
-  $display("In dwc_ddrphy_phyinit_userCustom_customPostTrain.");
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_customPostTrain.\"");
   `ifdef RET_EN
     apb_save_ret_csrs();
   `endif
@@ -415,10 +455,10 @@
       dwc_ddrphy_apb_rd(`DWC_DDRPHYA_DBYTE0_p0_RxClkT2UIDlyTg0_r1_p0+{i,20'h0},RxClkT2UIDly_default[i]);     //get the default value
       RxClkT2UIDly_core[i] = RxClkT2UIDly_default[i][9:7];
       if(RxClkT2UIDly_core[i] > 4) begin
-        $display("TC INFO : RxClkT2UIDly_default_p%0d[9:7] > 4 ", i);
+        $display("AXE iNote \"TC INFO : RxClkT2UIDly_default_p%0d[9:7] > 4 \"", i);
         $finish;
       end
-      $display("RxClkT2UIDly_default_p%0d = %0h ",i, RxClkT2UIDly_default[i]);
+      $display("AXE iNote \"RxClkT2UIDly_default_p%0d = %0h \"",i, RxClkT2UIDly_default[i]);
     end
 
     dwc_ddrphy_apb_wr(`DWC_DDRPHYA_APBONLY0_MicroContMuxSel,32'h1);         // Enable access to the internal CSRs by setting the MicroContMuxSel CSR to 1
@@ -538,13 +578,13 @@
 
 
 task kick_pmu;
-   $display("%m - START");
+   $display("AXE iNote \"%m - START\"");
    dwc_ddrphy_apb_wr(32'hd0000,16'h1); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
    dwc_ddrphy_apb_wr(32'hd0099,16'h9); // DWC_DDRPHYA_APBONLY0_MicroReset
    repeat(100) @(posedge test.top.dfi_clk);  // To ensure the reset pulse is captured my ucclk inside the pub
    dwc_ddrphy_apb_wr(32'hd0099,16'h1); // DWC_DDRPHYA_APBONLY0_MicroReset
    dwc_ddrphy_apb_wr(32'hd0099,16'h0); // DWC_DDRPHYA_APBONLY0_MicroReset
-   $display("%m - END");
+   $display("AXE iNote \"%m - END\"");
 endtask
 
 task automatic load_image( string fn );
@@ -717,14 +757,14 @@
          quickboot_acsm_sram[sram_addr] = quickboot_acsm_sram[sram_addr] | (data<<(32*half_byte));
       end
    end
-   $display ($time, " <%m> INFO: qb_save_acsm_sram  completed  ... \n"  );
+   $display ($time, "AXE iNote \" <%m> INFO: qb_save_acsm_sram  completed  ... \n\""  );
    apb_wr(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, MicroContMuxSel);
 endtask
 
 task automatic qb_restore_acsm_sram();
    int unsigned MicroContMuxSel;
    reg [31:0] data;
-   $display ($time, " <%m> INFO: qb_restore_acsm_sram  in progress ... \n"  );
+   $display ($time, "AXE iNote \" <%m> INFO: qb_restore_acsm_sram  in progress ... \n\""  );
    apb_rd(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, MicroContMuxSel);
    apb_wr(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, 0);
    for (int sram_addr=0; sram_addr<`ACSM_SIZE; sram_addr++) begin
@@ -733,7 +773,7 @@
          apb_wr((`ACSM_SRAM_BASE_ADDR + (sram_addr*2) + half_byte ),   data);
       end
    end
-   $display ($time, " <%m> INFO: qb_restore_acsm_sram  completed ... \n"  );
+   $display ($time, "AXE iNote \" <%m> INFO: qb_restore_acsm_sram  completed ... \n\""  );
    apb_wr(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, MicroContMuxSel);
 endtask
 
@@ -1981,6 +2021,8 @@
 reg csr_bkdoor_done;
 reg [31:0] read_0;
 
+  $display("AXE iCall csr_wr 0x%h 0x%h", addr, data);
+
   `ifdef DWC_LPDDR5XPHY_JTAG
   top.jtag.write (addr,data);
   `elsif CSR_BKDOOR
@@ -2034,6 +2076,8 @@
   `else
   top.apb.read (addr,data);
   `endif
+
+   $display("AXE iCall csr_rd 0x%h 0x%h", addr, data);
 endtask
 
 
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/testbench/tc/demo/demo_ate.sv /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/testbench/tc/demo/demo_ate.sv
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/A-2024.08/testbench/tc/demo/demo_ate.sv	2024-08-01 10:53:45.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/A-2024.08/testbench/tc/demo/demo_ate.sv	2024-12-01 17:29:20.971369282 +0000
@@ -175,6 +175,7 @@
   //              begin running the firmware. Once the firmware is running, it will run all the tests that were configured to run
   // =================================================
   reg [31:0] data;
+   int       wtime;
 
   repeat(10) @(posedge top.dfi_clk);
   apb_wr(`DWC_DDRPHYA_APBONLY0_DctWriteProt,32'h1);
@@ -189,9 +190,9 @@
   apb_wr(`DWC_DDRPHYA_APBONLY0_MicroReset,32'h0);
 
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("[%0t] ##### MASIS Section 5  ends #####",$time); 
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"[%0t] ##### MASIS Section 5  ends #####\"",$time); 
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
 `ifndef DWC_LPDDR5XD5PHY_HARDENING
@@ -211,11 +212,16 @@
 
   // 3. Wait for the ATE firmware to finish
   data[0] = 1;
-  $display ($time, " <%m> INFO: polling DWC_DDRPHYA_APBONLY0_UctShadowRegs, bit 0...");
-  while (data[0]) begin
+  $display ($time, "AXE iNote \" <%m> INFO: polling DWC_DDRPHYA_APBONLY0_UctShadowRegs, bit 0...\"");
+  wtime=0; 
+   while (data[0]) begin
     repeat(1000) @(posedge top.apb_clk);
     apb_rd(`DWC_DDRPHYA_APBONLY0_UctShadowRegs,  data);
+    wtime=wtime+1;      
   end
+  $display ($time, "AXE iNote \" <%m> INFO: End polling DWC_DDRPHYA_APBONLY0_UctShadowRegs, bit 0...\"");
+  $display ($time, "AXE iRunLoop CLK_MOD_%d_apbclk -tck ;# TC%h apb_clock ticks", wtime*1000,TC_TestsToRun);
+  apb_rd_mask(`DWC_DDRPHYA_APBONLY0_UctShadowRegs, 1,data);
 
   // 4. Force the microcontroller into stall, and enable APB accesses to all PHY registers
   apb_wr(`DWC_DDRPHYA_APBONLY0_MicroReset,32'h1);
@@ -223,112 +229,221 @@
 endtask
 
 
-
-task run_ate_test(reg [15:0] check_TestsToRun);
+task automatic check_test_results(
+    input [15:0] check_TestsToRun,
+    input bit [15:0] enable_mask[],
+    input string test_descriptions[],
+    output bit test_pass
+);
+    integer i;
+    logic [15:0] check_PassFailResults;
+    logic [15:0] check_null;
+    logic [15:0] tests_running;
+    logic [31:0] data;
    
-  //reg [15:0] check_PassFailResults = 16'h0;
-  reg [15:0] check_null;
-
-  $display("Config TestsToRun = %0h",check_TestsToRun);
-  apb_wr(32'h58000,{check_PassFailResults,check_TestsToRun});
-
-  if(check_TestsToRun[0])
-    $display($time , " \nRunning Revision Check test...");
-  if(check_TestsToRun[1])
-    $display($time , " \nRunning Impedance Calibration test...");
-  if(check_TestsToRun[2])
-    $display($time , " \nRunning PLL Lock test...");
-  if(check_TestsToRun[3])
-    $display($time , " \nRunning LCDL Linearity test...");
-  if(check_TestsToRun[4])
-    $display($time , " \nRunning Address / Command Loopback test...");
-  if(check_TestsToRun[5])
-    $display($time , " \nRunning Data Loopback 1D test...");
-  if(check_TestsToRun[6])
-    $display($time , " \nRunning Data Loopback 2D test...");
-  if(check_TestsToRun[7])
-    $display($time , " \nRunning Burn-In test...");
-  if(check_TestsToRun[8])
-    $display($time , " \nRunning Rxreplica test...");
-  if(check_TestsToRun[9])
-    $display($time , " \nRunning DCA Loopback test...");
-  if(check_TestsToRun[10])
-    $display($time , " \nRunning MEMRESET Loopback test...");
-  if(check_TestsToRun[11])
-    $display($time , " \nRunning Pclk DCA test...");
-  if(check_TestsToRun[12])
-    $display($time , " \nRunning DTO Loopback test...");
-  if(check_TestsToRun & 16'b1111_0000_0000_0000)
-    $display("TestsToRun setting is not correct :check_TestsToRun =%b",check_TestsToRun);
-
-  run_fw_ate; // Step E: Execute the Firmware
-  apb_rd(32'h58000, {check_PassFailResults,check_null});
-  
-  // Step F: Read the Message Block Results
-  $display("Read PassFailResults = %0h",check_PassFailResults);
-
-  $display("-----------------------------------------------");
 
-  if (check_TestsToRun & 16'b0000_0000_0000_0001) begin
-    $write($time, " INFO: Revision Check test ");
-    if(check_PassFailResults[0]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end  
-  if (check_TestsToRun & 16'b0000_0000_0000_0010)  begin
-    $write($time, " INFO: Impedance Calibration test ");
-    if(check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0000_0100) begin
-    $write($time, " INFO: PLL Lock test ");
-    if(check_PassFailResults[2]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0000_1000) begin
-    $write($time, " INFO: LCDL Linearity test ");
-    if(check_PassFailResults[3] && check_PassFailResults[2]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0001_0000) begin
-    $write($time, " INFO: Address Command test ");
-    if(check_PassFailResults[4] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0010_0000) begin
-    $write($time, " INFO: Data 1D Loopback test ");
-    if(check_PassFailResults[5] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0100_0000) begin
-    $write($time, " INFO: Data 2D Loopback test ");
-    if(check_PassFailResults[6] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_1000_0000) begin
-    $write($time, " INFO: Burn-In test ");
-    if(check_PassFailResults[7] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0001_0000_0000) begin
-    $write($time, " INFO: RxReplica test ");
-    if(check_PassFailResults[8] && check_PassFailResults[2]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0010_0000_0000) begin
-    $write($time, " INFO: DCA Loopback test ");
-    if(check_PassFailResults[9] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0100_0000_0000) begin
-    $write($time, " INFO: MEMRESET test ");
-    if(check_PassFailResults[10]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_1000_0000_0000) begin
-    $write($time, " INFO: Pclk DCA test ");
-    if(check_PassFailResults[11] && check_PassFailResults[2]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0001_0000_0000_0000) begin
-    $write($time, " INFO: DTO Loopback test ");
-    if(check_PassFailResults[12] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
+    tests_running=0;
+    for (i = 0; i < enable_mask.size(); i++) begin
+      if (check_TestsToRun[i]) begin
+         tests_running |= enable_mask[i];
+      end
+    end
+ 
+         
+    apb_rd_mask(32'h58000, {tests_running, 16'b0}, {check_PassFailResults, check_null});
+    
+    $display("Read PassFailResults = %0h check_TestsToRun = %0h",check_PassFailResults, check_TestsToRun);
+    // Iterate through the list of tests
+    
+   test_pass = 1; // Initialize to 1 (assume all tests pass initially)
+   for (i = 0; i < enable_mask.size(); i++) begin
+      if (check_TestsToRun[i]) begin
+         $write($time, " INFO: %s ", test_descriptions[i]);
+         // Check the corresponding bits in check_PassFailResults
+         if (check_PassFailResults & enable_mask[i]) begin
+            $display("passed");
+         end else begin
+            $display("failed");
+            test_pass = 0; 
+         end
+      end else begin
+         $display($time, " INFO: %s did not run", test_descriptions[i]);
+      end
+   end // for (i = 0; i < enable_mask.size(); i++)
+   
 `ifdef ATE_MASIS
   begin
     $write($time, " INFO: MASIS test ");
     if(check_PassFailResults == check_TestsToRun) begin $display("passed"); test_pass=1; end else begin $display("failed"); test_pass=0;end
   end
 `endif
+   
+   ////Read the message block back
+   //$display("AXE iNote \"Start capture end message block\"");
+   //for (i = 0; i < 4587; i++) begin
+   //   apb_rd_mask(32'h58000+i, 0, data );
+   //end
+   //$display("AXE iNote \"End capture end message block\"");
+
+   
+   if (tests_running[0] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[0]);
+      apb_rd(32'h58002, data);
+      apb_rd(32'h58003, data);  
+      $display("AXE iNote \"End %s check \"",test_descriptions[0]);
+   end // else: !if(check_TestsToRun & 1 )
+   
+   // Impedance Calibration
+   if (tests_running[1] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[1]); 
+      for (i = 0; i < 2; i++) begin
+         apb_rd_mask(32'h58034+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[1]);
+   end
+   //PLL Lock 2
+   if (tests_running[2] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[2]); 
+      for (i = 0; i < 12; i++) begin
+         apb_rd_mask(32'h5803d+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[2]);
+   end
+   // LCDL Linearity 3
+   if (tests_running[3] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[3]);
+      for (i = 0; i < 1102; i++) begin
+         apb_rd_mask(32'h5804d+i, 0, data );
+      end 
+      for (i = 0; i < 76; i++) begin
+         apb_rd_mask(32'h59152+i, 0, data );
+      end       
+      $display("AXE iNote \"End %s check \"",test_descriptions[3]); 
+   end
+   //AC Loopback 4
+   if (tests_running[4] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[4]);
+      for (i = 0; i < 192; i++) begin
+         apb_rd_mask(32'h584ae+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[4]); 
+   end
+   
+   if (tests_running[5] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[5]);
+      for (i = 0; i < 217; i++) begin
+         apb_rd_mask(32'h58584+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[5]); 
+   end
+   
+   if (tests_running[6] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[6]);
+      for (i = 0; i < 2178; i++) begin
+         apb_rd_mask(32'h5866e+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[6]); 
+   end
+
+   //nothing to read for BURN-IN
+   
+   if (tests_running[8] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[8]);
+      for (i = 0; i < 13; i++) begin
+         apb_rd_mask(32'h58ef0+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[8]); 
+   end
+   
+   if (tests_running[9] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[9]);
+      for (i = 0; i < 381; i++) begin
+         apb_rd_mask(32'h58f10+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[9]); 
+   end
 
-  $display("-----------------------------------------------");
+   //nothing for MEMRESET loopback
+   
+   if (tests_running[11] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[11]);
+      for (i = 0; i < 51; i++) begin
+         apb_rd_mask(32'h590fe+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[11]); 
+   end
+   
+   if (tests_running[12] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[12]);
+      for (i = 0; i < 1; i++) begin
+         apb_rd_mask(32'h59142+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[12]); 
+   end
+   
+    $display("-----------------------------------------------");
+endtask // check_test_results
+ 
+
+task run_ate_test(reg [15:0] check_TestsToRun);
+   
+   integer i;
+   
+   
+    bit [15:0] enable_mask[] = '{
+        16'b0000_0000_0000_0001, // Revision Check  0
+        16'b0000_0000_0000_0010, // Impedance Calibration 1
+        16'b0000_0000_0000_0100, // PLL Lock 2
+        16'b0000_0000_0000_1100, // LCDL Linearity 3
+        16'b0000_0000_0001_0110, // AC Loopback 4
+        16'b0000_0000_0010_0110, // Data 1D Loopback 5
+        16'b0000_0000_0100_0110, // Data 2D Loopback 6
+        16'b0000_0000_1000_0110, // Burn-In 7
+        16'b0000_0001_0000_0100, // RxReplica 8
+        16'b0000_0010_0000_0110, // DCA Loopback 9
+        16'b0000_0100_0000_0000, // MEMRESET 10
+        16'b0000_1000_0000_0100, // Pclk DCA test 11
+        16'b0001_0000_0000_0010  // DTO Loopback test 12
+    }; 
+
+    string test_descriptions[] = '{
+        "Revision Check test",
+        "Impedance Calibration test",
+        "PLL Lock test",
+        "LCDL Linearity test",
+        "Address Command loopback test",
+        "Data 1D Loopback test",
+        "Data 2D Loopback test",
+        "Burn-In test",
+        "RxReplica test",
+        "DCA Loopback test",
+        "MEMRESET test",
+        "Pclk DCA test",
+        "DTO Loopback test"
+    };
+
+   
+  $display("AXE iNote \"Config TestsToRun = %0h\"",check_TestsToRun);
+  apb_wr(32'h58000,{check_PassFailResults,check_TestsToRun});
+
+   for (i = 0; i < enable_mask.size(); i++) begin
+      if (check_TestsToRun[i]) begin
+         $display($time, "AXE iNote \"Running %s ...\"", test_descriptions[i]); 
+      end
+   end
+   
+  if(check_TestsToRun & 16'b1110_0000_0000_0000)
+    $display("AXE iNote \"TestsToRun setting is not correct :check_TestsToRun =%b\"",check_TestsToRun);
+
+  run_fw_ate; // Step E: Execute the Firmware
+
+   // Step F: Read the Message Block Results
+   check_test_results(
+        check_TestsToRun, 
+        enable_mask, 
+        test_descriptions,
+        test_pass                         
+    ); 
 
 endtask
 
@@ -364,17 +479,22 @@
   wait_period = ate_cfg.DfiClkFreq * 10000 + 10;//(add 10 to make sure the wait time is enough)
 `endif
 //csrSeq0BGPR1_p0 is a internal reg for burn-in simulation
+ 
+ $display ($time, "AXE iNote \" <%m> INFO: polling test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] != 16'hb011 ...\"");
  while(test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] != 16'hb011)
    begin
      //display the ATE test stage when csrSeq0BGPR0_p0 changed
      csrSeq0BGPR0_p0_tmp = test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR0_p0[15:0];
      repeat (1000) @(posedge top.dfi_clk);
      if(csrSeq0BGPR0_p0_tmp - test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR0_p0[15:0])
-        $display( "[%0t] <%m> INFO: SeqReg = %h", $time,test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR0_p0[15:0]);
+        $display( "AXE iNote \"[%0t] <%m> INFO: SeqReg = %h\"", $time,test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR0_p0[15:0]);
    end
+ $display ($time, "AXE iNote \" <%m> INFO: End polling test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] != 16'hb011 ...\"");
  repeat(100) @(posedge top.dfi_clk);
+ $display ($time, "AXE iRunLoop CLK_MOD_100_dficlk -tck"); 
  apb_wr (`DWC_DDRPHYA_APBONLY0_DctWriteProt,    32'h0);
  repeat(wait_period) @(posedge top.dfi_clk); //Step 4 of burn-in test in ATE APP Note
+ $display ($time, "AXE iRunLoop CLK_MOD_%d_dficlk -tck ;# Step 4 of burn-in test in ATE APP Note" ,wait_period); 
  apb_wr (`DWC_DDRPHYA_APBONLY0_DctWriteProt,    32'h1);
 endtask
 
@@ -397,9 +517,9 @@
 initial begin
   wait(test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] === 16'hb011);
   repeat (20) @(posedge top.dfi_clk);
-  $display("Powersim: [%0t] burn in start",$time);
+  $display("AXE iNote \"Powersim: [%0t] burn in start\"",$time);
   wait(test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] !== 16'hb011);
-  $display("Powersim: [%0t] burn in end",$time);
+  $display("AXE iNote \"Powersim: [%0t] burn in end\"",$time);
 end
 `endif
 `endif
@@ -407,24 +527,24 @@
 
 task dmem_read;
   `ifdef ATE_MASIS
-     $display("-----------------------------------------------");
-     $display("##### MASIS Section 7  begins #####");  
-     $display("[%0t] DMEM dumping specially" ,$time);
-     $display("[%0t] MASIS pattern suite for debug" ,$time);
-     $display("[%0t] Only does DMEM READS" ,$time);
-     $display("[%0t] No Checking of READ values\n", $time);
-     $display("-----------------------------------------------");
-     $display("[%0t] MASIS INFO: Begin MASIS DMEM dumping", $time);
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"##### MASIS Section 7  begins #####\"");  
+     $display("AXE iNote \"[%0t] DMEM dumping specially\"" ,$time);
+     $display("AXE iNote \"[%0t] MASIS pattern suite for debug\"" ,$time);
+     $display("AXE iNote \"[%0t] Only does DMEM READS\"" ,$time);
+     $display("AXE iNote \"[%0t] No Checking of READ values\"", $time);
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"[%0t] MASIS INFO: Begin MASIS DMEM dumping\"", $time);
+     $display("AXE iNote \"-----------------------------------------------\"");
   `endif
   for(int i=`DMEM_START_ADDRESS;i<=`DMEM_END_ADDRESS;i=i+1) 
     apb_rd(i, data);
   `ifdef ATE_MASIS
-     $display("-----------------------------------------------");
-     $display("[%0t] MASIS: End MASIS DMEM dumping" ,$time);
-     $display("-----------------------------------------------");
-     $display("##### MASIS Section 7  ends #####"); 
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"[%0t] MASIS: End MASIS DMEM dumping\"" ,$time);
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"##### MASIS Section 7  ends #####\""); 
+     $display("AXE iNote \"-----------------------------------------------\"");
   `endif
 endtask
 
@@ -441,7 +561,7 @@
   while (my_apb_addr <= 32'h57FFF)
   begin
     apb_rd(my_apb_addr, data_word);
-    $fwrite(fimem, "CVVS IMEM: SRAM Inst = %d SRAM Addr = %h  Data[31:0]= %h\n",SRAM_instance, SRAM_addr, data_word); 
+    $fwrite(fimem, "AXE iNote \"CVVS IMEM: SRAM Inst = %d SRAM Addr = %h  Data[31:0]= %h\"",SRAM_instance, SRAM_addr, data_word); 
     my_apb_addr   = my_apb_addr + 1;
     SRAM_addr     = (SRAM_instance == 3)? SRAM_addr + 1 : SRAM_addr;
     SRAM_instance = (SRAM_instance == 3)? 0 : SRAM_instance + 1;
@@ -460,7 +580,7 @@
   while (my_apb_addr <= 32'h5FFFF)
   begin
     apb_rd(my_apb_addr, data_word);
-    $fwrite(fdmem, "CVVS DMEM: SRAM Inst = %d SRAM Addr = %h  Data[31:0]= %h\n",SRAM_instance, SRAM_addr, data_word); 
+    $fwrite(fdmem, "AXE iNote \"CVVS DMEM: SRAM Inst = %d SRAM Addr = %h  Data[31:0]= %h\"",SRAM_instance, SRAM_addr, data_word); 
     my_apb_addr = my_apb_addr + 1;
     SRAM_addr     = (SRAM_instance == 3)? SRAM_addr + 1 : SRAM_addr;
     SRAM_instance = (SRAM_instance == 3)? 0 : SRAM_instance + 1;
@@ -485,56 +605,56 @@
 //**************************Instruction****************************
   `ifdef ATE_MASIS
      repeat(10) @(posedge top.apb_clk);
-     $display("-----------------------------------------------");
-     $display("##### MASIS Instruction begins #####");
-     $display( " INFO: This is a instruction about how you should do or can do for each section of MASIS");
-     $display( " 1.For users seek for examples to check ICCM/DCCM data integrity, please refer to section 1 , where an example of 4 pairs of read-after-read is shown. ");
-     $display( " 2.For users seek for examples to load ICCM/DCCM, please refer to section 2. , where example of initially load ICCM/DCCM data.");
-     $display( " 3.For users seek for examples to load customized message block and program CSR settings, like *PllCtrl*, please refer to section 3. , where example of load customized message block and CSR settings.Note: customer needs to add runtc command options: ate_cust_mb_cfg_file=<*>, ate_cust_csr_cfg_file=<*>");
-     $display( " 4.For users seek for finally completed loading of ICCM/DCCM data, please refer to section 4. , where read out the entire IMEM&DMEM to another two logs called 'imem.log' & 'dmem.log' with CTB command option: bkdoor=1 -mem_dump.Note:The data in this section if 'read' is change to 'write', the list can be used as ICCM/DCC loader at customer end.");
-     $display( " 5.For users seek for programming of the MASIS ATE tests to start, please refer to section 5.");
-     $display( " 6.For users seek for result polling out, please refer to section 6.");
-     $display( " 7.For users seek for final DCCM data after MASIS tests, please refer to section 7. ,  with CTB command option: -mem_dump dmem_rd=1. It can be an reference for debugging.");
-     $display("##### MASIS Instruction ends #####");
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"##### MASIS Instruction begins #####\"");
+     $display("AXE iNote \" INFO: This is a instruction about how you should do or can do for each section of MASIS\"");
+     $display("AXE iNote \" 1.For users seek for examples to check ICCM/DCCM data integrity, please refer to section 1 , where an example of 4 pairs of read-after-read is shown. \"");
+     $display("AXE iNote \" 2.For users seek for examples to load ICCM/DCCM, please refer to section 2. , where example of initially load ICCM/DCCM data.\"");
+     $display("AXE iNote \" 3.For users seek for examples to load customized message block and program CSR settings, like *PllCtrl*, please refer to section 3. , where example of load customized message block and CSR settings.Note: customer needs to add runtc command options: ate_cust_mb_cfg_file=<*>, ate_cust_csr_cfg_file=<*>\"");
+     $display("AXE iNote \" 4.For users seek for finally completed loading of ICCM/DCCM data, please refer to section 4. , where read out the entire IMEM&DMEM to another two logs called 'imem.log' & 'dmem.log' with CTB command option: bkdoor=1 -mem_dump.Note:The data in this section if 'read' is change to 'write', the list can be used as ICCM/DCC loader at customer end.\"");
+     $display("AXE iNote \" 5.For users seek for programming of the MASIS ATE tests to start, please refer to section 5.\"");
+     $display("AXE iNote \" 6.For users seek for result polling out, please refer to section 6.\"");
+     $display("AXE iNote \" 7.For users seek for final DCCM data after MASIS tests, please refer to section 7. ,  with CTB command option: -mem_dump dmem_rd=1. It can be an reference for debugging.\"");
+     $display("AXE iNote \"##### MASIS Instruction ends #####\"");
+     $display("AXE iNote \"-----------------------------------------------\"");
 //**************************TDO Toggle****************************
      repeat(10) @(posedge top.apb_clk);
      for(int i=0;i<8;i++)
      begin
        a[i]=$random();
      end
-     $display("-----------------------------------------------");
-     $display("##### MASIS Section 1 begins #####");
-     $display("[%0t] MASIS INFO: Performing Write/Read to the IMEM/DMEM for TDO/TDI checking",$time,);
-     $display("-----------------------------------------------");    
-     $display("[%0t] MASIS INFO: Performing Write/Read to the IMEM for TDO/TDI checking",$time);
-     $display("[%0t] Put into single MASIS test pattern",$time);
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"##### MASIS Section 1 begins #####\"");
+     $display("AXE iNote \"[%0t] MASIS INFO: Performing Write/Read to the IMEM/DMEM for TDO/TDI checking\"",$time,);
+     $display("AXE iNote \"-----------------------------------------------\"");    
+     $display("AXE iNote \"[%0t] MASIS INFO: Performing Write/Read to the IMEM for TDO/TDI checking\"",$time);
+     $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"",$time);
+     $display("AXE iNote \"-----------------------------------------------\"");
 
      //32'h050000  , 32'h050001
      apb_wr(32'h050000,a[0]);
      apb_wr(32'h050001,a[1]);
      apb_rd(32'h050000, data);
-     $display("[%0t] INFO: Access IMEM addr 32'h050000,Write %h Read back %h", $time,a[0],data);
+     $display("AXE iNote \"[%0t] INFO: Access IMEM addr 32'h050000,Write %h Read back %h\"", $time,a[0],data);
      if(a[0]!=data)
      begin
-       $display("ERROR: Access to the IMEM failed");
+       $display("AXE iNote \"ERROR: Access to the IMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the IMEM passed");
+      $display("AXE iNote \"INFO: Access to the IMEM passed\"");
 
      apb_rd(32'h050001, data);
-     $display("[%0t] INFO: Access IMEM addr 32'h050001,Write %h Read back %h", $time,a[1],data);
+     $display("AXE iNote \"[%0t] INFO: Access IMEM addr 32'h050001,Write %h Read back %h\"", $time,a[1],data);
      if(a[1]!=data)
      begin
-       $display("ERROR: Access to the IMEM failed");
+       $display("AXE iNote \"ERROR: Access to the IMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the IMEM passed");
+      $display("AXE iNote \"INFO: Access to the IMEM passed\"");
      apb_wr(32'h050000, 32'h0000);
      apb_wr(32'h050001, 32'h0000);
 
@@ -542,61 +662,61 @@
      apb_wr(32'h055000,a[2]);
      apb_wr(32'h055001,a[3]);
      apb_rd(32'h055000, data);
-     $display("[%0t] INFO: Access IMEM addr 32'h055000,Write %h Read back %h", $time,a[2],data);
+     $display("AXE iNote \"[%0t] INFO: Access IMEM addr 32'h055000,Write %h Read back %h\"", $time,a[2],data);
      if(a[2]!=data)
      begin
-       $display("ERROR: Access to the IMEM failed");
+       $display("AXE iNote \"ERROR: Access to the IMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the IMEM passed");
+      $display("AXE iNote \"INFO: Access to the IMEM passed\"");
 
      apb_rd(32'h055001, data);
-     $display("[%0t] INFO: Access IMEM addr 32'h055001,Write %h Read back %h", $time,a[3],data);
+     $display("AXE iNote \"[%0t] INFO: Access IMEM addr 32'h055001,Write %h Read back %h\"", $time,a[3],data);
      if(a[3]!=data)
      begin
-       $display("ERROR: Access to the IMEM failed");
+       $display("AXE iNote \"ERROR: Access to the IMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the IMEM passed");
+      $display("AXE iNote \"INFO: Access to the IMEM passed\"");
      apb_wr(32'h055000, 32'h0000);
      apb_wr(32'h055001, 32'h0000);
-     $display("-----------------------------------------------");
-     $display("[%0t] MASIS: End the IMEM TDI/TDO checking ",$time);
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"[%0t] MASIS: End the IMEM TDI/TDO checking \"",$time);
+     $display("AXE iNote \"-----------------------------------------------\"");
 
 
-     $display("[%0t] MASIS INFO: Performing Write/Read to the DMEM for TDO/TDI checking",$time);
-     $display("[%0t] Put into single MASIS test pattern",$time);
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"[%0t] MASIS INFO: Performing Write/Read to the DMEM for TDO/TDI checking\"",$time);
+     $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"",$time);
+     $display("AXE iNote \"-----------------------------------------------\"");
 
      //32'h058000 , 32'h058001
      apb_wr(32'h058000,a[4]);
      apb_wr(32'h058001,a[5]);
      apb_rd(32'h058000, data);
-     $display("[%0t] INFO: Access DMEM addr 32'h058000,Write %h Read back %h", $time,a[4],data);
+     $display("AXE iNote \"[%0t] INFO: Access DMEM addr 32'h058000,Write %h Read back %h\"", $time,a[4],data);
      if(a[4]!=data)
      begin
-       $display("ERROR: Access to the DMEM failed");
+       $display("AXE iNote \"ERROR: Access to the DMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the DMEM passed");
+      $display("AXE iNote \"INFO: Access to the DMEM passed\"");
 
      apb_rd(32'h058001, data);
-     $display("[%0t] INFO: Access DMEM addr 32'h058001,Write %h Read back %h", $time,a[5],data);
+     $display("AXE iNote \"[%0t] INFO: Access DMEM addr 32'h058001,Write %h Read back %h\"", $time,a[5],data);
      if(a[5]!=data)
      begin
-       $display("ERROR: Access to the DMEM failed");
+       $display("AXE iNote \"ERROR: Access to the DMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the DMEM passed");
+      $display("AXE iNote \"INFO: Access to the DMEM passed\"");
      apb_wr(32'h058000, 32'h0000);
      apb_wr(32'h058001, 32'h0000);
 
@@ -604,33 +724,33 @@
      apb_wr(32'h05a000,a[6]);
      apb_wr(32'h05a001,a[7]); 
      apb_rd(32'h05a000, data);
-     $display("[%0t] INFO: Access DMEM addr 32'h05a000,Write %h Read back %h", $time,a[6],data);
+     $display("AXE iNote \"[%0t] INFO: Access DMEM addr 32'h05a000,Write %h Read back %h\"", $time,a[6],data);
      if(a[6]!=data)
      begin
-       $display("ERROR: Access to the DMEM failed");
+       $display("AXE iNote \"ERROR: Access to the DMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the DMEM passed");
+      $display("AXE iNote \"INFO: Access to the DMEM passed\"");
 
      apb_rd(32'h05a001, data);
-     $display("[%0t] INFO: Access DMEM addr 32'h05a001,Write %h Read back %h", $time,a[7],data);
+     $display("AXE iNote \"[%0t] INFO: Access DMEM addr 32'h05a001,Write %h Read back %h\"", $time,a[7],data);
      if(a[7]!=data)
      begin
-       $display("ERROR: Access to the DMEM failed");
+       $display("AXE iNote \"ERROR: Access to the DMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the DMEM passed");
+      $display("AXE iNote \"INFO: Access to the DMEM passed\"");
      apb_wr(32'h05a000, 32'h0000);
      apb_wr(32'h05a001, 32'h0000);
-     $display("-----------------------------------------------");
-     $display ("[%0t] MASIS: End the DMEM TDI/TDO checking ",$time);
-     $display("-----------------------------------------------");  
-     $display("##### MASIS Section 1 ends##### ");
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display ("AXE iNote \"[%0t] MASIS: End the DMEM TDI/TDO checking \"",$time);
+     $display("AXE iNote \"-----------------------------------------------\"");  
+     $display("AXE iNote \"##### MASIS Section 1 ends##### \"");
+     $display("AXE iNote \"-----------------------------------------------\"");
   `endif //ATE_MASIS
 
   // =================================================
@@ -653,46 +773,54 @@
   apb_wr(`DWC_DDRPHYA_DRTUB0_StartDCCMClear,0);
 
   if (data[2])  //UcclkFull
-    repeat(8200)  @(posedge top.dfi_clk);
-  else
-    repeat(16400) @(posedge top.dfi_clk);
+    begin
+       repeat(8200)  @(posedge top.dfi_clk);
+       $display ($time, "AXE iRunLoop CLK_MOD_8200_dficlk -tck ; # //dfi_clk UcclkFull==1");
+    end
+  else begin
+     repeat(16400) @(posedge top.dfi_clk);
+     $display ($time, "AXE iRunLoop CLK_MOD_16400_dficlk -tck ; # //dfi_clk UcclkFull==0");
+    end
   data=32'h1;
+  
+  $display ($time, "AXE iNote \" <%m> INFO: polling DWC_DDRPHYA_DRTUB0_DCCMClearRunning, bit 0...\"");
   while (data[0]) begin
     apb_rd(`DWC_DDRPHYA_DRTUB0_DCCMClearRunning,data);
   end
+  $display ($time, "AXE iNote \" <%m> INFO: End polling DWC_DDRPHYA_DRTUB0_DCCMClearRunning, bit 0...\"");
 `endif
 
   apb_wr(`DWC_DDRPHYA_APBONLY0_MicroReset, 32'h1);
 
 `ifdef ATE_BKDOOR_ECC // Load IMEM/DMEM using backdoor
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("##### MASIS Section 2 begins #####");
-  $display("[%0t] MASIS INFO:Loading IMEM and DMEM", $time);
-  $display("-----------------------------------------------");
-  $display("[%0t] MASIS INFO: Loading the IMEM", $time);
-  $display("[%0t] Put into single MASIS test pattern", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS Section 2 begins #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO:Loading IMEM and DMEM\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"[%0t] MASIS INFO: Loading the IMEM\"", $time);
+  $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
   $readmemh("ddr_ate_imem_bank0_ecc.txt", top.u_alb_srams.u_iccm0_ram0.u_iccm0_sram.mem_r);
   $readmemh("ddr_ate_imem_bank1_ecc.txt", top.u_alb_srams.u_iccm0_ram1.u_iccm0_sram.mem_r);
 
 `ifdef MEM_DUMP 
-  fimem = $fopen("IMEM_Section2.log");
+  fimem = $fopen("AXE iNote \"IMEM_Section2.log\"");
   imem_dump();
   $fclose(fimem);
 `endif
 
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");  
-  $display("[%0t] MASIS:End loading the IMEM\n", $time);
-  $display("##### MASIS #####");
-  $display("-----------------------------------------------");
-  $display("##### MASIS #####");
-  $display("[%0t] MASIS INFO:LOADING the DMEM", $time);
-  $display("[%0t] Put into single MASIS test pattern", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");  
+  $display("AXE iNote \"[%0t] MASIS:End loading the IMEM\"", $time);
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO:LOADING the DMEM", $time);
+  $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
   $readmemh("ddr_ate_dmem_bank0_ecc_little_endian.txt", top.u_alb_srams.u_dccm_ram_lo0.u_dccm_ram.mem_r);
@@ -701,16 +829,16 @@
   $readmemh("ddr_ate_dmem_bank3_ecc_little_endian.txt", top.u_alb_srams.u_dccm_ram_hi1.u_dccm_ram.mem_r);
 
 `ifdef MEM_DUMP 
-  fdmem = $fopen("DMEM_Section2.log");
+  fdmem = $fopen("AXE iNote \"DMEM_Section2.log\"");
   dmem_dump();
   $fclose(fdmem);
 `endif
 
 `ifdef ATE_MASIS
-  $display("[%0t] MASIS: End loading the DMEM ", $time);
-  $display("##### MASIS Section 2 ends #####");
-  $display("-----------------------------------------------");
-  $display("ECC back door load finished");
+  $display("AXE iNote \"[%0t] MASIS: End loading the DMEM \"", $time);
+  $display("AXE iNote \"##### MASIS Section 2 ends #####\"");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"ECC back door load finished\"");
 `endif
 
 `else // Load IMEM/DMEM using APB interface
@@ -723,28 +851,32 @@
 `endif
 
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("##### MASIS Section 2 begins #####");
-  $display("[%0t] MASIS INFO:Loading IMEM and DMEM", $time);
-  $display("-----------------------------------------------");
-  $display("[%0t] MASIS INFO: Loading the IMEM", $time);
-  $display("[%0t] Put into single MASIS test pattern", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS Section 2 begins #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO:Loading IMEM and DMEM\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"[%0t] MASIS INFO: Loading the IMEM\"", $time);
+  $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
+   
+   $display("AXE iNote \" Start imem load\"");  
   `include "ddr_ate_imem.incv"
+   $display("AXE iNote \" End imem load\"");  
 
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");  
-  $display("[%0t] MASIS:End loading the IMEM\n", $time);
-  $display("##### MASIS #####");
-  $display("-----------------------------------------------");
-  $display("##### MASIS #####");
-  $display("[%0t] MASIS INFO:LOADING the DMEM", $time);
-  $display("[%0t] Put into single MASIS test pattern\n", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");  
+  $display("AXE iNote \"[%0t] MASIS:End loading the IMEM\"", $time);
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO:LOADING the DMEM\"", $time);
+  $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
+   $display("AXE iNote \" Start dmem load\"");  
 `ifdef ATE_DMEM_NOZERO
   `include "ddr_ate_dmem_non_zero.incv"
 `else
@@ -754,13 +886,14 @@
   apb_wr(`DWC_DDRPHYA_APBONLY0_CCMWriteBypassEnable,32'h0); // Disable Bypass Path after finish loading IMEM and DMEM
 `endif // ATE_WRITE_BYPASS
 `endif // ATE_DMEM_NOZERO
+   $display("AXE iNote \" End dmem load\"");  
 
 `ifdef ATE_MASIS
-    $display("-----------------------------------------------");  
-    $display("[%0t] MASIS: End loading the DMEM\n", $time);
-    $display("-----------------------------------------------");  
-    $display("##### MASIS Section 2 ends #####");
-    $display("-----------------------------------------------");
+    $display("AXE iNote \"-----------------------------------------------\"");  
+    $display("AXE iNote \"[%0t] MASIS: End loading the DMEM\"", $time);
+    $display("AXE iNote \"-----------------------------------------------\"");  
+    $display("AXE iNote \"##### MASIS Section 2 ends #####\"");
+    $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
 `endif //else of ATE_BKDOOR_ECC
@@ -772,71 +905,75 @@
 
   if(!cfg.disable_ate_cfg) begin
   `ifdef ATE_MASIS
-    $display("-----------------------------------------------");
-    $display("##### MASIS Section 3 begins #####");
-    $display("[%0t] MASIS INFO:Programming customized message blocks and CSR settings ", $time); 
-    $display("-----------------------------------------------");
-    $display("[%0t] MASIS INFO: Begin programming CSR settings ", $time);
-    $display("-----------------------------------------------");
+    $display("AXE iNote \"-----------------------------------------------\"");
+    $display("AXE iNote \"##### MASIS Section 3 begins #####\"");
+    $display("AXE iNote \"[%0t] MASIS INFO:Programming customized message blocks and CSR settings \"", $time); 
+    $display("AXE iNote \"-----------------------------------------------\"");
+    $display("AXE iNote \"[%0t] MASIS INFO: Begin programming CSR settings \"", $time);
+    $display("AXE iNote \"-----------------------------------------------\"");
   `endif //ATE_MASIS
 
+     $display("AXE iNote \" Step D1: Configure Technology Specific Registers\"");  
     tech_spec_pll_set;  // Step D1: Configure Technology Specific Registers
+     $display("AXE iNote \" End Step D1\"");  
 
   `ifdef ATE_MASIS
-    $display("-----------------------------------------------");  
-    $display("[%0t] MASIS: End programming CSR settings ", $time); //comment  
-    $display("-----------------------------------------------");
-    $display("[%0t] MASIS INFO: Begin programming customized message block ", $time);  
-    $display("-----------------------------------------------");
+    $display("AXE iNote \"-----------------------------------------------\"");  
+    $display("AXE iNote \"[%0t] MASIS: End programming CSR settings \"", $time); //comment  
+    $display("AXE iNote \"-----------------------------------------------\"");
+    $display("AXE iNote \"[%0t] MASIS INFO: Begin programming customized message block \"", $time);  
+    $display("AXE iNote \"-----------------------------------------------\"");
   `endif //ATE_MASIS
 
+    $display("AXE iNote \" Start Step D2: Configuring the Firmware Via the Message Block\"");   
     config_common_mb;   // Step D2: Configuring the Firmware Via the Message Block
+     $display("AXE iNote \" End Step D2\"");  
 
   `ifdef ATE_MASIS
-    $display("-----------------------------------------------");  
-    $display("[%0t] MASIS: End programming customized message block \n", $time);
-    $display("-----------------------------------------------");
-    $display("##### MASIS Section 3 ends #####");
-    $display("-----------------------------------------------");
+    $display("AXE iNote \"-----------------------------------------------\"");  
+    $display("AXE iNote \"[%0t] MASIS: End programming customized message block \"", $time);
+    $display("AXE iNote \"-----------------------------------------------\"");
+    $display("AXE iNote \"##### MASIS Section 3 ends #####\"");
+    $display("AXE iNote \"-----------------------------------------------\"");
   `endif //ATE_MASIS
   end //if(!cfg.disable_ate_cfg)
 
 `ifdef MEM_DUMP
-  fimem = $fopen("IMEM_Section4.log");
+  fimem = $fopen("AXE iNote \"IMEM_Section4.log\"");
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("##### MASIS Section 4 begins #####");
-  $display("[%0t] MASIS INFO: Reading the entire IMEM and DMEM for back-door loading", $time);
-  $display("-----------------------------------------------");
-  $display( "[%0t] MASIS INFO: Reading the entire IMEM for back-door loading", $time);
-  $display( "[%0t] Do not include in MASIS generation\n", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS Section 4 begins #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO: Reading the entire IMEM and DMEM for back-door loading\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"[%0t] MASIS INFO: Reading the entire IMEM for back-door loading\"", $time);
+  $display("AXE iNote \"[%0t] Do not include in MASIS generation\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif //ATE_MASIS
   imem_dump();
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------"); 
-  $display( "[%0t] MASIS:Before Testing IMEM dump is Done", $time);
-  $display( "[%0t] See detailed info in IMEM_Section4.log in current directory", $time);
-  $display( "-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\""); 
+  $display("AXE iNote \"[%0t] MASIS:Before Testing IMEM dump is Done\"", $time);
+  $display("AXE iNote \"[%0t] See detailed info in IMEM_Section4.log in current directory\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif //ATE_MASIS
   $fclose(fimem);
 
-  fdmem = $fopen("DMEM_Section4.log");
+  fdmem = $fopen("AXE iNote \"DMEM_Section4.log\"");
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("##### MASIS #####");
-  $display( "[%0t]MASIS INFO: Reading the entire DMEM for back-door loading ", $time);
-  $display( "[%0t] Do not include in MASIS generation\n ", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"[%0t]MASIS INFO: Reading the entire DMEM for back-door loading \"", $time);
+  $display("AXE iNote \"[%0t] Do not include in MASIS generation\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif //ATE_MASIS
   dmem_dump();
 `ifdef ATE_MASIS
-  $display( "-----------------------------------------------");  
-  $display( "[%0t] MASIS:Before Testing DMEM dump is Done", $time);
-  $display( "[%0t] See detailed info in DMEM_Section4.log in current directory", $time);
-  $display( "-----------------------------------------------");  
-  $display( "##### MASIS Section 4 ends #####");
-  $display( "-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");  
+  $display("AXE iNote \"[%0t] MASIS:Before Testing DMEM dump is Done\"", $time);
+  $display("AXE iNote \"[%0t] See detailed info in DMEM_Section4.log in current directory\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");  
+  $display("AXE iNote \"##### MASIS Section 4 ends #####\"");
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif //ATE_MASIS
   $fclose(fdmem);
 `endif //MEM_DUMP
@@ -876,7 +1013,7 @@
 `elsif ATE_MASIS
   TC_TestsToRun = cfg.TestsToRun;
 `else
-  $display("ERROR: No valid ATE test specified.");
+  $display("AXE iNote \"ERROR: No valid ATE test specified.\"");
   $finish();
 `endif
 
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/sim/bootenv /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/sim/bootenv
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/sim/bootenv	2024-08-01 10:53:45.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/sim/bootenv	2024-11-27 18:38:03.904308695 +0000
@@ -1,15 +1,15 @@
-#!/bin/csh
+#!/bin/bash
 
-setenv CTB_HOME `pwd`/..
-alias runtc '$CTB_HOME/sim/runtc'
+export CTB_HOME=`pwd`/..
+alias runtc='$CTB_HOME/sim/runtc'
 
-setenv CORETOOLS 1
+export CORETOOLS=1
 
 #release package
-setenv CTB_FW_DIR $CTB_HOME/../../firmware/Latest
-setenv CTB_PHYINIT_DIR $CTB_HOME/../../phyinit/Latest/software
+export CTB_FW_DIR=$CTB_HOME/../../firmware/Latest
+export CTB_PHYINIT_DIR=$CTB_HOME/../../phyinit/Latest/software
 
 #####set zcalna_bhv file for LPDDR in release package
-setenv ZCALANA_BHV_FILE $CTB_HOME/testbench/rtl/lpddr/dwc_lpddr5xphy_zcalana_bhv.v
+export ZCALANA_BHV_FILE=$CTB_HOME/testbench/rtl/lpddr/dwc_lpddr5xphy_zcalana_bhv.v
 
-setenv sdf_path 15M_1X_h_1Xb_v_1Xe_h_1Ya_v_1Yb_h_5Y_vhvhv_2Yy2Z
+export sdf_path=15M_1X_h_1Xb_v_1Xe_h_1Ya_v_1Yb_h_5Y_vhvhv_2Yy2Z
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/sim/run_ate_vcs /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/sim/run_ate_vcs
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/sim/run_ate_vcs	1970-01-01 00:00:00.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/sim/run_ate_vcs	2024-12-01 14:32:46.546665527 +0000
@@ -0,0 +1,58 @@
+#!/bin/bash
+
+echo "CTB ate_fw regression"
+echo "CTB_HOME $CTB_HOME"
+
+
+cd $CTB_HOME/../..
+if [ -e run_ate_fw ] ; then
+  mv run_ate_fw run_ate_fw.`date +%m_%d_%y_%H_%M_%S`
+fi
+mkdir run_ate_fw
+cd $CTB_HOME/../../run_ate_fw
+mkdir run_lpddr5
+
+cd $CTB_HOME/../../run_ate_fw/run_lpddr5
+
+
+declare -a arr=("revision_check"   
+                "impedance_cal"    
+                "pll_lock"         
+                "lcdl_linearity"   
+                "ac_loopback"      
+                "data_1d_loopback" 
+                "data_2d_loopback" 
+                "rxreplica"        
+                "dca_loopback"     
+                "mem_reset"        
+                "pclk_dca"         
+                "dto_loopback"
+                "burn_in"
+                )     
+
+for i in "${arr[@]}"; do
+    mkdir -p $i
+    cd $i
+    echo "Running in $(pwd)"
+    $CTB_HOME/sim/runtc cfg=lp5x4xcs2dq18ch2 tc=demo_ate dram=lpddr5 skip_train=1 freq0=800 freq_ratio0=2 rank=2 pstates=1 dfi_mode=3 dmem_nz=1 ate=$i -data_test | tee vrun.log &
+    cd - 
+done
+
+#The numbers represent the tests being run  see phy/firmware/A-2024.08/ate/mnPmuSramMsgBlock_ate.h
+arr=("0x1d7f"
+     "0x47f"
+    )     
+
+for i in "${arr[@]}"; do
+    mkdir -p ./test_$i
+    cd ./test_$i
+    echo "Running in $(pwd)"
+    $CTB_HOME/sim/runtc cfg=lp5x4xcs2dq18ch2 tc=demo_ate dram=lpddr5 skip_train=1 freq0=800 freq_ratio0=2 rank=2 pstates=1 dfi_mode=3 dmem_nz=1 ate="MASIS" ate_tests_to_run=$i  -data_test | tee vrun.log &
+    cd -
+done
+
+
+wait
+
+
+
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/sim/runtc /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/sim/runtc
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/sim/runtc	2024-08-01 10:53:45.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/sim/runtc	2024-11-27 19:09:05.094678356 +0000
@@ -3383,13 +3383,15 @@
 if [ $dram != "ddr5" ]; then
   # DramStateChangeEn
   if [ -d $CTB_HOME/../build ]; then #dev
-    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" ${dev_build}/init/lpddr*/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'` 
+    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" ${dev_build}/init/lpddr5/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'` 
   elif [ -d $CTB_HOME/../../macro ] || [ -f $CTB_HOME/../../src/dwc_*phy_top.lst ]; then #release package 
-    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" $CTB_HOME/../../phyinit/Latest/software/lpddr*/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'`
+    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" $CTB_HOME/../../phyinit/Latest/software/lpddr5/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'`
   else #common branch 
-    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" $CTB_PHYINIT_DIR/lpddr*/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'`
+    DSC_valid=`grep "define DWC_DDRPHY_PHYINIT_FEATURE_TAG" $CTB_PHYINIT_DIR/lpddr5/src/dwc_ddrphy_phyinit_feature_defines.h |awk '{print $NF}'`
   fi
 
+  echo "DSC_valid"
+  echo $DSC_valid
   if [ $DSC_valid != 1 ]; then
     DramStateChangeEn=0
   else
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/testbench/inc/lpddr/common_test_inc.sv /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/testbench/inc/lpddr/common_test_inc.sv
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/testbench/inc/lpddr/common_test_inc.sv	2024-08-01 10:53:45.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/testbench/inc/lpddr/common_test_inc.sv	2024-11-30 19:11:01.813425445 +0000
@@ -234,6 +234,8 @@
 reg csr_bkdoor_done;
 reg [31:0] read_0;
 
+  $display("AXE iCall csr_wr 0x%h 0x%h", addr, data);
+   
   `ifdef DWC_LPDDR5XPHY_JTAG
   top.jtag.write (addr,data);
   `elsif CSR_BKDOOR
@@ -264,7 +266,39 @@
   `else
   top.apb.write (addr,data);
   `endif
-endtask
+endtask //
+
+//--------------------------------------------------------------------------------
+//APB Read with mask task
+//--------------------------------------------------------------------------------
+task automatic apb_rd_mask;
+input  [31:0] addr;
+input  [31:0] enable_mask;
+output [31:0] data;
+reg csr_bkdoor_done;
+
+  `ifdef DWC_LPDDR5XPHY_JTAG
+  top.jtag.read (addr,data);
+  `elsif CSR_BKDOOR
+  csr_bkdoor(addr,0,0,data,csr_bkdoor_done);
+  if(csr_bkdoor_done==1'b0)
+    begin
+      bkdoor_read_fail_count=bkdoor_read_fail_count + 1'b1;
+      top.apb.read (addr,data);
+    end
+  else
+     bkdoor_read_pass_count=bkdoor_read_pass_count + 1'b1;
+  `else
+  top.apb.read (addr,data);
+  `endif // !`elsif CSR_BKDOOR
+
+   if (enable_mask == 0) begin
+      $display("AXE iCall csr_rd_capture 0x%h", addr);
+   end else begin
+      $display("AXE iCall csr_rd_masked 0x%h 0x%h 0x%h", addr, data, enable_mask);
+   end
+   
+endtask   
 
 //--------------------------------------------------------------------------------
 //APB Read task
@@ -274,6 +308,9 @@
 output [31:0] data;
 reg csr_bkdoor_done;
 
+   
+
+
   `ifdef DWC_LPDDR5XPHY_JTAG
   top.jtag.read (addr,data);
   `elsif CSR_BKDOOR
@@ -288,13 +325,16 @@
   `else
   top.apb.read (addr,data);
   `endif
+
+   $display("AXE iCall csr_rd 0x%h 0x%h", addr, data);
+
 endtask
 
 // ---------------------------------------------------------------
 // PHY Init Relevant Tasks
 // ---------------------------------------------------------------
 task automatic dwc_ddrphy_phyinit_userCustom_wait(int num_dfi_clk=0);
-  $display("[%0t] <%m> In dwc_ddrphy_phyinit_userCustom_wait.", $time);
+  $display("AXE iNote \"[%0t] <%m> In dwc_ddrphy_phyinit_userCustom_wait.\"", $time);
   repeat(num_dfi_clk) @(posedge top.dfi_clk);
 endtask
   
@@ -302,32 +342,32 @@
   int Num_cycle;
   int tCK;
   int time_ps;
-  $display("[%0t] <%m> In dwc_ddrphy_phyinit_userCustom_waitTime.", $time);
+  $display("AXE iNote \"[%0t] <%m> In dwc_ddrphy_phyinit_userCustom_waitTime.\"", $time);
   time_ps = time_ns * 1000;
   tCK  = (1_000_000.0/cfg.Frequency[cfg.FirstPState]);//cycle
   Num_cycle = `CEIL(time_ps,tCK);
   repeat(Num_cycle) @(posedge top.dfi_clk);
-  $display("[%0t] <%m> Wati %0d ns, frequency[%0d] = %0d.", $time, time_ns, cfg.FirstPState, cfg.Frequency[cfg.FirstPState] );
+  $display("AXE iNote \"[%0t] <%m> Wati %0d ns, frequency[%0d] = %0d.\"", $time, time_ns, cfg.FirstPState, cfg.Frequency[cfg.FirstPState] );
 endtask
   
 task automatic dwc_ddrphy_phyinit_userCustom_overrideUserInput(chandle ctx);
-  $display("In dwc_ddrphy_phyinit_userCustom_overrideUserInput.");
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_overrideUserInput.\"");
 endtask
 
 task automatic dwc_ddrphy_phyinit_userCustom_A_bringupPower(chandle ctx);
-  $display("In dwc_ddrphy_phyinit_userCustom_A_bringupPower, @%0t",$time);
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_A_bringupPower, @%0t\"",$time);
   test.top.clk_rst_drv.power_up();
 endtask
 
 task automatic dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy(chandle ctx);
-  $display("In dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy, @%0t",$time);
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy, @%0t\"",$time);
   test.top.clk_rst_drv.start_clkRst();
 endtask
 
 task automatic dwc_ddrphy_phyinit_userCustom_customPreTrain(chandle ctx);
   int max_ca = 0;
 
-  $display("In dwc_ddrphy_phyinit_userCustom_customPreTrain.");
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_customPreTrain.\"");
 
 `ifdef MMFW_ENV
   if (cfg.NumPStates>2) getPsExecOrder(RuntimeConfig_curPState);
@@ -336,12 +376,12 @@
 `ifdef SWIZZLE
 `ifdef DB_SWIZZLE
   $display(swizzle_cfg::swizzle_byte_cfg);
-  $display("In DBYTE swizzle...");
+  $display("AXE iNote \"In DBYTE swizzle...\"");
 
   for (int x=0; x<`DWC_LPDDR5XPHY_NUM_DBYTES; x++) begin // x is applied to switch DBYTE, y is used to switch the DQ bit in each DBYTE
     for (int y=0; y<9; y++) begin // 8 DQ and 1 DMI pins
       dwc_ddrphy_apb_wr((`DWC_DDRPHYA_DBYTE0_p0_Dq0LnSel+(x<<12)+y), swizzle_cfg::swizzle_byte_cfg[x][y]);
-      $display("[TB INFO] set swizzle csr :DBYTE%0d DqnLnSel_addr=%0h, data=%0h",x,(`DWC_DDRPHYA_DBYTE0_p0_Dq0LnSel+(x<<12)+y), swizzle_cfg::swizzle_byte_cfg[x][y]);
+      $display("AXE iNote \"[TB INFO] set swizzle csr :DBYTE%0d DqnLnSel_addr=%0h, data=%0h\"",x,(`DWC_DDRPHYA_DBYTE0_p0_Dq0LnSel+(x<<12)+y), swizzle_cfg::swizzle_byte_cfg[x][y]);
     end
   end
 `endif // DB_SWIZZLE
@@ -354,14 +394,14 @@
 `endif
 
   $display(swizzle_cfg::swizzle_ca_cfg);
-  $display("In CA swizzle...");
+  $display("AXE iNote \"In CA swizzle...\"");
 
   for (int x=0; x<max_ca; x++) begin
     dwc_ddrphy_apb_wr((`DWC_DDRPHYA_AC0_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[0][x]);
-    $display("[TB INFO] set swizzle csr : BLOCK AC0, MapCAntoDfi_addr=%0h, data=%0h",(`DWC_DDRPHYA_AC0_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[0][x]);
+    $display("AXE iNote \"[TB INFO] set swizzle csr : BLOCK AC0, MapCAntoDfi_addr=%0h, data=%0h\"",(`DWC_DDRPHYA_AC0_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[0][x]);
   `ifdef DFI_MODE3
     dwc_ddrphy_apb_wr((`DWC_DDRPHYA_AC1_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[1][x]);
-    $display("[TB INFO] set swizzle csr : BLOCK AC1, MapCAntoDfi_addr=%0h, data=%0h",(`DWC_DDRPHYA_AC1_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[1][x]);
+    $display("AXE iNote \"[TB INFO] set swizzle csr : BLOCK AC1, MapCAntoDfi_addr=%0h, data=%0h\"",(`DWC_DDRPHYA_AC1_p0_MapCA0toDfi+x), swizzle_cfg::swizzle_ca_cfg[1][x]);
   `endif
   end
 `endif // CA_SWIZZLE
@@ -370,7 +410,7 @@
 endtask
 
 task automatic dwc_ddrphy_phyinit_userCustom_E_setDfiClk(chandle ctx, int PState); //does the task still exist?
-  $display("In dwc_ddrphy_phyinit_userCustom_E_setDfiClk(%0d)", PState);
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_E_setDfiClk(%0d)\"", PState);
   phyctx     = ctx;
   cfg.PState = PState;
   repeat(30) @(posedge top.dfi_clk);
@@ -379,7 +419,7 @@
 task automatic dwc_ddrphy_phyinit_userCustom_H_readMsgBlock(chandle ctx, int Train2D=0);
   int unsigned MicroContMuxSel;
   int unsigned data;
-  $display("In dwc_ddrphy_phyinit_userCustom_H_readMsgBlock.");
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_H_readMsgBlock.\"");
   phyctx = ctx;
   `ifdef QUICKBOOT
     apb_rd(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, MicroContMuxSel);
@@ -397,7 +437,7 @@
   automatic string pubstr;
   automatic string fileName;
 
-  $display("In dwc_ddrphy_phyinit_userCustom_customPostTrain.");
+  $display("AXE iNote \"In dwc_ddrphy_phyinit_userCustom_customPostTrain.\"");
   `ifdef RET_EN
     apb_save_ret_csrs();
   `endif
@@ -415,10 +455,10 @@
       dwc_ddrphy_apb_rd(`DWC_DDRPHYA_DBYTE0_p0_RxClkT2UIDlyTg0_r1_p0+{i,20'h0},RxClkT2UIDly_default[i]);     //get the default value
       RxClkT2UIDly_core[i] = RxClkT2UIDly_default[i][9:7];
       if(RxClkT2UIDly_core[i] > 4) begin
-        $display("TC INFO : RxClkT2UIDly_default_p%0d[9:7] > 4 ", i);
+        $display("AXE iNote \"TC INFO : RxClkT2UIDly_default_p%0d[9:7] > 4 \"", i);
         $finish;
       end
-      $display("RxClkT2UIDly_default_p%0d = %0h ",i, RxClkT2UIDly_default[i]);
+      $display("AXE iNote \"RxClkT2UIDly_default_p%0d = %0h \"",i, RxClkT2UIDly_default[i]);
     end
 
     dwc_ddrphy_apb_wr(`DWC_DDRPHYA_APBONLY0_MicroContMuxSel,32'h1);         // Enable access to the internal CSRs by setting the MicroContMuxSel CSR to 1
@@ -538,13 +578,13 @@
 
 
 task kick_pmu;
-   $display("%m - START");
+   $display("AXE iNote \"%m - START\"");
    dwc_ddrphy_apb_wr(32'hd0000,16'h1); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
    dwc_ddrphy_apb_wr(32'hd0099,16'h9); // DWC_DDRPHYA_APBONLY0_MicroReset
    repeat(100) @(posedge test.top.dfi_clk);  // To ensure the reset pulse is captured my ucclk inside the pub
    dwc_ddrphy_apb_wr(32'hd0099,16'h1); // DWC_DDRPHYA_APBONLY0_MicroReset
    dwc_ddrphy_apb_wr(32'hd0099,16'h0); // DWC_DDRPHYA_APBONLY0_MicroReset
-   $display("%m - END");
+   $display("AXE iNote \"%m - END\"");
 endtask
 
 task automatic load_image( string fn );
@@ -717,14 +757,14 @@
          quickboot_acsm_sram[sram_addr] = quickboot_acsm_sram[sram_addr] | (data<<(32*half_byte));
       end
    end
-   $display ($time, " <%m> INFO: qb_save_acsm_sram  completed  ... \n"  );
+   $display ($time, "AXE iNote \" <%m> INFO: qb_save_acsm_sram  completed  ... \n\""  );
    apb_wr(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, MicroContMuxSel);
 endtask
 
 task automatic qb_restore_acsm_sram();
    int unsigned MicroContMuxSel;
    reg [31:0] data;
-   $display ($time, " <%m> INFO: qb_restore_acsm_sram  in progress ... \n"  );
+   $display ($time, "AXE iNote \" <%m> INFO: qb_restore_acsm_sram  in progress ... \n\""  );
    apb_rd(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, MicroContMuxSel);
    apb_wr(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, 0);
    for (int sram_addr=0; sram_addr<`ACSM_SIZE; sram_addr++) begin
@@ -733,7 +773,7 @@
          apb_wr((`ACSM_SRAM_BASE_ADDR + (sram_addr*2) + half_byte ),   data);
       end
    end
-   $display ($time, " <%m> INFO: qb_restore_acsm_sram  completed ... \n"  );
+   $display ($time, "AXE iNote \" <%m> INFO: qb_restore_acsm_sram  completed ... \n\""  );
    apb_wr(`DWC_DDRPHYA_APBONLY0__MicroContMuxSel, MicroContMuxSel);
 endtask
 
@@ -1981,6 +2021,8 @@
 reg csr_bkdoor_done;
 reg [31:0] read_0;
 
+  $display("AXE iCall csr_wr 0x%h 0x%h", addr, data);
+
   `ifdef DWC_LPDDR5XPHY_JTAG
   top.jtag.write (addr,data);
   `elsif CSR_BKDOOR
@@ -2034,6 +2076,8 @@
   `else
   top.apb.read (addr,data);
   `endif
+
+   $display("AXE iCall csr_rd 0x%h 0x%h", addr, data);
 endtask
 
 
diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/testbench/tc/demo/demo_ate.sv /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/testbench/tc/demo/demo_ate.sv
--- /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/Latest/testbench/tc/demo/demo_ate.sv	2024-08-01 10:53:45.000000000 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3/phy/ctb/Latest/testbench/tc/demo/demo_ate.sv	2024-12-01 17:29:20.971369282 +0000
@@ -175,6 +175,7 @@
   //              begin running the firmware. Once the firmware is running, it will run all the tests that were configured to run
   // =================================================
   reg [31:0] data;
+   int       wtime;
 
   repeat(10) @(posedge top.dfi_clk);
   apb_wr(`DWC_DDRPHYA_APBONLY0_DctWriteProt,32'h1);
@@ -189,9 +190,9 @@
   apb_wr(`DWC_DDRPHYA_APBONLY0_MicroReset,32'h0);
 
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("[%0t] ##### MASIS Section 5  ends #####",$time); 
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"[%0t] ##### MASIS Section 5  ends #####\"",$time); 
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
 `ifndef DWC_LPDDR5XD5PHY_HARDENING
@@ -211,11 +212,16 @@
 
   // 3. Wait for the ATE firmware to finish
   data[0] = 1;
-  $display ($time, " <%m> INFO: polling DWC_DDRPHYA_APBONLY0_UctShadowRegs, bit 0...");
-  while (data[0]) begin
+  $display ($time, "AXE iNote \" <%m> INFO: polling DWC_DDRPHYA_APBONLY0_UctShadowRegs, bit 0...\"");
+  wtime=0; 
+   while (data[0]) begin
     repeat(1000) @(posedge top.apb_clk);
     apb_rd(`DWC_DDRPHYA_APBONLY0_UctShadowRegs,  data);
+    wtime=wtime+1;      
   end
+  $display ($time, "AXE iNote \" <%m> INFO: End polling DWC_DDRPHYA_APBONLY0_UctShadowRegs, bit 0...\"");
+  $display ($time, "AXE iRunLoop CLK_MOD_%d_apbclk -tck ;# TC%h apb_clock ticks", wtime*1000,TC_TestsToRun);
+  apb_rd_mask(`DWC_DDRPHYA_APBONLY0_UctShadowRegs, 1,data);
 
   // 4. Force the microcontroller into stall, and enable APB accesses to all PHY registers
   apb_wr(`DWC_DDRPHYA_APBONLY0_MicroReset,32'h1);
@@ -223,112 +229,221 @@
 endtask
 
 
-
-task run_ate_test(reg [15:0] check_TestsToRun);
+task automatic check_test_results(
+    input [15:0] check_TestsToRun,
+    input bit [15:0] enable_mask[],
+    input string test_descriptions[],
+    output bit test_pass
+);
+    integer i;
+    logic [15:0] check_PassFailResults;
+    logic [15:0] check_null;
+    logic [15:0] tests_running;
+    logic [31:0] data;
    
-  //reg [15:0] check_PassFailResults = 16'h0;
-  reg [15:0] check_null;
-
-  $display("Config TestsToRun = %0h",check_TestsToRun);
-  apb_wr(32'h58000,{check_PassFailResults,check_TestsToRun});
-
-  if(check_TestsToRun[0])
-    $display($time , " \nRunning Revision Check test...");
-  if(check_TestsToRun[1])
-    $display($time , " \nRunning Impedance Calibration test...");
-  if(check_TestsToRun[2])
-    $display($time , " \nRunning PLL Lock test...");
-  if(check_TestsToRun[3])
-    $display($time , " \nRunning LCDL Linearity test...");
-  if(check_TestsToRun[4])
-    $display($time , " \nRunning Address / Command Loopback test...");
-  if(check_TestsToRun[5])
-    $display($time , " \nRunning Data Loopback 1D test...");
-  if(check_TestsToRun[6])
-    $display($time , " \nRunning Data Loopback 2D test...");
-  if(check_TestsToRun[7])
-    $display($time , " \nRunning Burn-In test...");
-  if(check_TestsToRun[8])
-    $display($time , " \nRunning Rxreplica test...");
-  if(check_TestsToRun[9])
-    $display($time , " \nRunning DCA Loopback test...");
-  if(check_TestsToRun[10])
-    $display($time , " \nRunning MEMRESET Loopback test...");
-  if(check_TestsToRun[11])
-    $display($time , " \nRunning Pclk DCA test...");
-  if(check_TestsToRun[12])
-    $display($time , " \nRunning DTO Loopback test...");
-  if(check_TestsToRun & 16'b1111_0000_0000_0000)
-    $display("TestsToRun setting is not correct :check_TestsToRun =%b",check_TestsToRun);
-
-  run_fw_ate; // Step E: Execute the Firmware
-  apb_rd(32'h58000, {check_PassFailResults,check_null});
-  
-  // Step F: Read the Message Block Results
-  $display("Read PassFailResults = %0h",check_PassFailResults);
-
-  $display("-----------------------------------------------");
 
-  if (check_TestsToRun & 16'b0000_0000_0000_0001) begin
-    $write($time, " INFO: Revision Check test ");
-    if(check_PassFailResults[0]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end  
-  if (check_TestsToRun & 16'b0000_0000_0000_0010)  begin
-    $write($time, " INFO: Impedance Calibration test ");
-    if(check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0000_0100) begin
-    $write($time, " INFO: PLL Lock test ");
-    if(check_PassFailResults[2]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0000_1000) begin
-    $write($time, " INFO: LCDL Linearity test ");
-    if(check_PassFailResults[3] && check_PassFailResults[2]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0001_0000) begin
-    $write($time, " INFO: Address Command test ");
-    if(check_PassFailResults[4] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0010_0000) begin
-    $write($time, " INFO: Data 1D Loopback test ");
-    if(check_PassFailResults[5] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_0100_0000) begin
-    $write($time, " INFO: Data 2D Loopback test ");
-    if(check_PassFailResults[6] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0000_1000_0000) begin
-    $write($time, " INFO: Burn-In test ");
-    if(check_PassFailResults[7] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0001_0000_0000) begin
-    $write($time, " INFO: RxReplica test ");
-    if(check_PassFailResults[8] && check_PassFailResults[2]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0010_0000_0000) begin
-    $write($time, " INFO: DCA Loopback test ");
-    if(check_PassFailResults[9] && check_PassFailResults[2] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_0100_0000_0000) begin
-    $write($time, " INFO: MEMRESET test ");
-    if(check_PassFailResults[10]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0000_1000_0000_0000) begin
-    $write($time, " INFO: Pclk DCA test ");
-    if(check_PassFailResults[11] && check_PassFailResults[2]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
-  if (check_TestsToRun & 16'b0001_0000_0000_0000) begin
-    $write($time, " INFO: DTO Loopback test ");
-    if(check_PassFailResults[12] && check_PassFailResults[1]) begin $display("passed"); test_pass=1; end else $display("failed");
-  end
+    tests_running=0;
+    for (i = 0; i < enable_mask.size(); i++) begin
+      if (check_TestsToRun[i]) begin
+         tests_running |= enable_mask[i];
+      end
+    end
+ 
+         
+    apb_rd_mask(32'h58000, {tests_running, 16'b0}, {check_PassFailResults, check_null});
+    
+    $display("Read PassFailResults = %0h check_TestsToRun = %0h",check_PassFailResults, check_TestsToRun);
+    // Iterate through the list of tests
+    
+   test_pass = 1; // Initialize to 1 (assume all tests pass initially)
+   for (i = 0; i < enable_mask.size(); i++) begin
+      if (check_TestsToRun[i]) begin
+         $write($time, " INFO: %s ", test_descriptions[i]);
+         // Check the corresponding bits in check_PassFailResults
+         if (check_PassFailResults & enable_mask[i]) begin
+            $display("passed");
+         end else begin
+            $display("failed");
+            test_pass = 0; 
+         end
+      end else begin
+         $display($time, " INFO: %s did not run", test_descriptions[i]);
+      end
+   end // for (i = 0; i < enable_mask.size(); i++)
+   
 `ifdef ATE_MASIS
   begin
     $write($time, " INFO: MASIS test ");
     if(check_PassFailResults == check_TestsToRun) begin $display("passed"); test_pass=1; end else begin $display("failed"); test_pass=0;end
   end
 `endif
+   
+   ////Read the message block back
+   //$display("AXE iNote \"Start capture end message block\"");
+   //for (i = 0; i < 4587; i++) begin
+   //   apb_rd_mask(32'h58000+i, 0, data );
+   //end
+   //$display("AXE iNote \"End capture end message block\"");
+
+   
+   if (tests_running[0] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[0]);
+      apb_rd(32'h58002, data);
+      apb_rd(32'h58003, data);  
+      $display("AXE iNote \"End %s check \"",test_descriptions[0]);
+   end // else: !if(check_TestsToRun & 1 )
+   
+   // Impedance Calibration
+   if (tests_running[1] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[1]); 
+      for (i = 0; i < 2; i++) begin
+         apb_rd_mask(32'h58034+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[1]);
+   end
+   //PLL Lock 2
+   if (tests_running[2] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[2]); 
+      for (i = 0; i < 12; i++) begin
+         apb_rd_mask(32'h5803d+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[2]);
+   end
+   // LCDL Linearity 3
+   if (tests_running[3] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[3]);
+      for (i = 0; i < 1102; i++) begin
+         apb_rd_mask(32'h5804d+i, 0, data );
+      end 
+      for (i = 0; i < 76; i++) begin
+         apb_rd_mask(32'h59152+i, 0, data );
+      end       
+      $display("AXE iNote \"End %s check \"",test_descriptions[3]); 
+   end
+   //AC Loopback 4
+   if (tests_running[4] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[4]);
+      for (i = 0; i < 192; i++) begin
+         apb_rd_mask(32'h584ae+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[4]); 
+   end
+   
+   if (tests_running[5] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[5]);
+      for (i = 0; i < 217; i++) begin
+         apb_rd_mask(32'h58584+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[5]); 
+   end
+   
+   if (tests_running[6] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[6]);
+      for (i = 0; i < 2178; i++) begin
+         apb_rd_mask(32'h5866e+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[6]); 
+   end
+
+   //nothing to read for BURN-IN
+   
+   if (tests_running[8] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[8]);
+      for (i = 0; i < 13; i++) begin
+         apb_rd_mask(32'h58ef0+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[8]); 
+   end
+   
+   if (tests_running[9] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[9]);
+      for (i = 0; i < 381; i++) begin
+         apb_rd_mask(32'h58f10+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[9]); 
+   end
 
-  $display("-----------------------------------------------");
+   //nothing for MEMRESET loopback
+   
+   if (tests_running[11] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[11]);
+      for (i = 0; i < 51; i++) begin
+         apb_rd_mask(32'h590fe+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[11]); 
+   end
+   
+   if (tests_running[12] ) begin
+      $display("AXE iNote \"Start %s check \"",test_descriptions[12]);
+      for (i = 0; i < 1; i++) begin
+         apb_rd_mask(32'h59142+i, 0, data );
+      end      
+      $display("AXE iNote \"End %s check \"",test_descriptions[12]); 
+   end
+   
+    $display("-----------------------------------------------");
+endtask // check_test_results
+ 
+
+task run_ate_test(reg [15:0] check_TestsToRun);
+   
+   integer i;
+   
+   
+    bit [15:0] enable_mask[] = '{
+        16'b0000_0000_0000_0001, // Revision Check  0
+        16'b0000_0000_0000_0010, // Impedance Calibration 1
+        16'b0000_0000_0000_0100, // PLL Lock 2
+        16'b0000_0000_0000_1100, // LCDL Linearity 3
+        16'b0000_0000_0001_0110, // AC Loopback 4
+        16'b0000_0000_0010_0110, // Data 1D Loopback 5
+        16'b0000_0000_0100_0110, // Data 2D Loopback 6
+        16'b0000_0000_1000_0110, // Burn-In 7
+        16'b0000_0001_0000_0100, // RxReplica 8
+        16'b0000_0010_0000_0110, // DCA Loopback 9
+        16'b0000_0100_0000_0000, // MEMRESET 10
+        16'b0000_1000_0000_0100, // Pclk DCA test 11
+        16'b0001_0000_0000_0010  // DTO Loopback test 12
+    }; 
+
+    string test_descriptions[] = '{
+        "Revision Check test",
+        "Impedance Calibration test",
+        "PLL Lock test",
+        "LCDL Linearity test",
+        "Address Command loopback test",
+        "Data 1D Loopback test",
+        "Data 2D Loopback test",
+        "Burn-In test",
+        "RxReplica test",
+        "DCA Loopback test",
+        "MEMRESET test",
+        "Pclk DCA test",
+        "DTO Loopback test"
+    };
+
+   
+  $display("AXE iNote \"Config TestsToRun = %0h\"",check_TestsToRun);
+  apb_wr(32'h58000,{check_PassFailResults,check_TestsToRun});
+
+   for (i = 0; i < enable_mask.size(); i++) begin
+      if (check_TestsToRun[i]) begin
+         $display($time, "AXE iNote \"Running %s ...\"", test_descriptions[i]); 
+      end
+   end
+   
+  if(check_TestsToRun & 16'b1110_0000_0000_0000)
+    $display("AXE iNote \"TestsToRun setting is not correct :check_TestsToRun =%b\"",check_TestsToRun);
+
+  run_fw_ate; // Step E: Execute the Firmware
+
+   // Step F: Read the Message Block Results
+   check_test_results(
+        check_TestsToRun, 
+        enable_mask, 
+        test_descriptions,
+        test_pass                         
+    ); 
 
 endtask
 
@@ -364,17 +479,22 @@
   wait_period = ate_cfg.DfiClkFreq * 10000 + 10;//(add 10 to make sure the wait time is enough)
 `endif
 //csrSeq0BGPR1_p0 is a internal reg for burn-in simulation
+ 
+ $display ($time, "AXE iNote \" <%m> INFO: polling test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] != 16'hb011 ...\"");
  while(test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] != 16'hb011)
    begin
      //display the ATE test stage when csrSeq0BGPR0_p0 changed
      csrSeq0BGPR0_p0_tmp = test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR0_p0[15:0];
      repeat (1000) @(posedge top.dfi_clk);
      if(csrSeq0BGPR0_p0_tmp - test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR0_p0[15:0])
-        $display( "[%0t] <%m> INFO: SeqReg = %h", $time,test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR0_p0[15:0]);
+        $display( "AXE iNote \"[%0t] <%m> INFO: SeqReg = %h\"", $time,test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR0_p0[15:0]);
    end
+ $display ($time, "AXE iNote \" <%m> INFO: End polling test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] != 16'hb011 ...\"");
  repeat(100) @(posedge top.dfi_clk);
+ $display ($time, "AXE iRunLoop CLK_MOD_100_dficlk -tck"); 
  apb_wr (`DWC_DDRPHYA_APBONLY0_DctWriteProt,    32'h0);
  repeat(wait_period) @(posedge top.dfi_clk); //Step 4 of burn-in test in ATE APP Note
+ $display ($time, "AXE iRunLoop CLK_MOD_%d_dficlk -tck ;# Step 4 of burn-in test in ATE APP Note" ,wait_period); 
  apb_wr (`DWC_DDRPHYA_APBONLY0_DctWriteProt,    32'h1);
 endtask
 
@@ -397,9 +517,9 @@
 initial begin
   wait(test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] === 16'hb011);
   repeat (20) @(posedge top.dfi_clk);
-  $display("Powersim: [%0t] burn in start",$time);
+  $display("AXE iNote \"Powersim: [%0t] burn in start\"",$time);
   wait(test.top.dut.pac4a.pub_top.tub.MRTUB.l4regs_INITENG.csrSeq0BGPR1_p0[15:0] !== 16'hb011);
-  $display("Powersim: [%0t] burn in end",$time);
+  $display("AXE iNote \"Powersim: [%0t] burn in end\"",$time);
 end
 `endif
 `endif
@@ -407,24 +527,24 @@
 
 task dmem_read;
   `ifdef ATE_MASIS
-     $display("-----------------------------------------------");
-     $display("##### MASIS Section 7  begins #####");  
-     $display("[%0t] DMEM dumping specially" ,$time);
-     $display("[%0t] MASIS pattern suite for debug" ,$time);
-     $display("[%0t] Only does DMEM READS" ,$time);
-     $display("[%0t] No Checking of READ values\n", $time);
-     $display("-----------------------------------------------");
-     $display("[%0t] MASIS INFO: Begin MASIS DMEM dumping", $time);
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"##### MASIS Section 7  begins #####\"");  
+     $display("AXE iNote \"[%0t] DMEM dumping specially\"" ,$time);
+     $display("AXE iNote \"[%0t] MASIS pattern suite for debug\"" ,$time);
+     $display("AXE iNote \"[%0t] Only does DMEM READS\"" ,$time);
+     $display("AXE iNote \"[%0t] No Checking of READ values\"", $time);
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"[%0t] MASIS INFO: Begin MASIS DMEM dumping\"", $time);
+     $display("AXE iNote \"-----------------------------------------------\"");
   `endif
   for(int i=`DMEM_START_ADDRESS;i<=`DMEM_END_ADDRESS;i=i+1) 
     apb_rd(i, data);
   `ifdef ATE_MASIS
-     $display("-----------------------------------------------");
-     $display("[%0t] MASIS: End MASIS DMEM dumping" ,$time);
-     $display("-----------------------------------------------");
-     $display("##### MASIS Section 7  ends #####"); 
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"[%0t] MASIS: End MASIS DMEM dumping\"" ,$time);
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"##### MASIS Section 7  ends #####\""); 
+     $display("AXE iNote \"-----------------------------------------------\"");
   `endif
 endtask
 
@@ -441,7 +561,7 @@
   while (my_apb_addr <= 32'h57FFF)
   begin
     apb_rd(my_apb_addr, data_word);
-    $fwrite(fimem, "CVVS IMEM: SRAM Inst = %d SRAM Addr = %h  Data[31:0]= %h\n",SRAM_instance, SRAM_addr, data_word); 
+    $fwrite(fimem, "AXE iNote \"CVVS IMEM: SRAM Inst = %d SRAM Addr = %h  Data[31:0]= %h\"",SRAM_instance, SRAM_addr, data_word); 
     my_apb_addr   = my_apb_addr + 1;
     SRAM_addr     = (SRAM_instance == 3)? SRAM_addr + 1 : SRAM_addr;
     SRAM_instance = (SRAM_instance == 3)? 0 : SRAM_instance + 1;
@@ -460,7 +580,7 @@
   while (my_apb_addr <= 32'h5FFFF)
   begin
     apb_rd(my_apb_addr, data_word);
-    $fwrite(fdmem, "CVVS DMEM: SRAM Inst = %d SRAM Addr = %h  Data[31:0]= %h\n",SRAM_instance, SRAM_addr, data_word); 
+    $fwrite(fdmem, "AXE iNote \"CVVS DMEM: SRAM Inst = %d SRAM Addr = %h  Data[31:0]= %h\"",SRAM_instance, SRAM_addr, data_word); 
     my_apb_addr = my_apb_addr + 1;
     SRAM_addr     = (SRAM_instance == 3)? SRAM_addr + 1 : SRAM_addr;
     SRAM_instance = (SRAM_instance == 3)? 0 : SRAM_instance + 1;
@@ -485,56 +605,56 @@
 //**************************Instruction****************************
   `ifdef ATE_MASIS
      repeat(10) @(posedge top.apb_clk);
-     $display("-----------------------------------------------");
-     $display("##### MASIS Instruction begins #####");
-     $display( " INFO: This is a instruction about how you should do or can do for each section of MASIS");
-     $display( " 1.For users seek for examples to check ICCM/DCCM data integrity, please refer to section 1 , where an example of 4 pairs of read-after-read is shown. ");
-     $display( " 2.For users seek for examples to load ICCM/DCCM, please refer to section 2. , where example of initially load ICCM/DCCM data.");
-     $display( " 3.For users seek for examples to load customized message block and program CSR settings, like *PllCtrl*, please refer to section 3. , where example of load customized message block and CSR settings.Note: customer needs to add runtc command options: ate_cust_mb_cfg_file=<*>, ate_cust_csr_cfg_file=<*>");
-     $display( " 4.For users seek for finally completed loading of ICCM/DCCM data, please refer to section 4. , where read out the entire IMEM&DMEM to another two logs called 'imem.log' & 'dmem.log' with CTB command option: bkdoor=1 -mem_dump.Note:The data in this section if 'read' is change to 'write', the list can be used as ICCM/DCC loader at customer end.");
-     $display( " 5.For users seek for programming of the MASIS ATE tests to start, please refer to section 5.");
-     $display( " 6.For users seek for result polling out, please refer to section 6.");
-     $display( " 7.For users seek for final DCCM data after MASIS tests, please refer to section 7. ,  with CTB command option: -mem_dump dmem_rd=1. It can be an reference for debugging.");
-     $display("##### MASIS Instruction ends #####");
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"##### MASIS Instruction begins #####\"");
+     $display("AXE iNote \" INFO: This is a instruction about how you should do or can do for each section of MASIS\"");
+     $display("AXE iNote \" 1.For users seek for examples to check ICCM/DCCM data integrity, please refer to section 1 , where an example of 4 pairs of read-after-read is shown. \"");
+     $display("AXE iNote \" 2.For users seek for examples to load ICCM/DCCM, please refer to section 2. , where example of initially load ICCM/DCCM data.\"");
+     $display("AXE iNote \" 3.For users seek for examples to load customized message block and program CSR settings, like *PllCtrl*, please refer to section 3. , where example of load customized message block and CSR settings.Note: customer needs to add runtc command options: ate_cust_mb_cfg_file=<*>, ate_cust_csr_cfg_file=<*>\"");
+     $display("AXE iNote \" 4.For users seek for finally completed loading of ICCM/DCCM data, please refer to section 4. , where read out the entire IMEM&DMEM to another two logs called 'imem.log' & 'dmem.log' with CTB command option: bkdoor=1 -mem_dump.Note:The data in this section if 'read' is change to 'write', the list can be used as ICCM/DCC loader at customer end.\"");
+     $display("AXE iNote \" 5.For users seek for programming of the MASIS ATE tests to start, please refer to section 5.\"");
+     $display("AXE iNote \" 6.For users seek for result polling out, please refer to section 6.\"");
+     $display("AXE iNote \" 7.For users seek for final DCCM data after MASIS tests, please refer to section 7. ,  with CTB command option: -mem_dump dmem_rd=1. It can be an reference for debugging.\"");
+     $display("AXE iNote \"##### MASIS Instruction ends #####\"");
+     $display("AXE iNote \"-----------------------------------------------\"");
 //**************************TDO Toggle****************************
      repeat(10) @(posedge top.apb_clk);
      for(int i=0;i<8;i++)
      begin
        a[i]=$random();
      end
-     $display("-----------------------------------------------");
-     $display("##### MASIS Section 1 begins #####");
-     $display("[%0t] MASIS INFO: Performing Write/Read to the IMEM/DMEM for TDO/TDI checking",$time,);
-     $display("-----------------------------------------------");    
-     $display("[%0t] MASIS INFO: Performing Write/Read to the IMEM for TDO/TDI checking",$time);
-     $display("[%0t] Put into single MASIS test pattern",$time);
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"##### MASIS Section 1 begins #####\"");
+     $display("AXE iNote \"[%0t] MASIS INFO: Performing Write/Read to the IMEM/DMEM for TDO/TDI checking\"",$time,);
+     $display("AXE iNote \"-----------------------------------------------\"");    
+     $display("AXE iNote \"[%0t] MASIS INFO: Performing Write/Read to the IMEM for TDO/TDI checking\"",$time);
+     $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"",$time);
+     $display("AXE iNote \"-----------------------------------------------\"");
 
      //32'h050000  , 32'h050001
      apb_wr(32'h050000,a[0]);
      apb_wr(32'h050001,a[1]);
      apb_rd(32'h050000, data);
-     $display("[%0t] INFO: Access IMEM addr 32'h050000,Write %h Read back %h", $time,a[0],data);
+     $display("AXE iNote \"[%0t] INFO: Access IMEM addr 32'h050000,Write %h Read back %h\"", $time,a[0],data);
      if(a[0]!=data)
      begin
-       $display("ERROR: Access to the IMEM failed");
+       $display("AXE iNote \"ERROR: Access to the IMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the IMEM passed");
+      $display("AXE iNote \"INFO: Access to the IMEM passed\"");
 
      apb_rd(32'h050001, data);
-     $display("[%0t] INFO: Access IMEM addr 32'h050001,Write %h Read back %h", $time,a[1],data);
+     $display("AXE iNote \"[%0t] INFO: Access IMEM addr 32'h050001,Write %h Read back %h\"", $time,a[1],data);
      if(a[1]!=data)
      begin
-       $display("ERROR: Access to the IMEM failed");
+       $display("AXE iNote \"ERROR: Access to the IMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the IMEM passed");
+      $display("AXE iNote \"INFO: Access to the IMEM passed\"");
      apb_wr(32'h050000, 32'h0000);
      apb_wr(32'h050001, 32'h0000);
 
@@ -542,61 +662,61 @@
      apb_wr(32'h055000,a[2]);
      apb_wr(32'h055001,a[3]);
      apb_rd(32'h055000, data);
-     $display("[%0t] INFO: Access IMEM addr 32'h055000,Write %h Read back %h", $time,a[2],data);
+     $display("AXE iNote \"[%0t] INFO: Access IMEM addr 32'h055000,Write %h Read back %h\"", $time,a[2],data);
      if(a[2]!=data)
      begin
-       $display("ERROR: Access to the IMEM failed");
+       $display("AXE iNote \"ERROR: Access to the IMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the IMEM passed");
+      $display("AXE iNote \"INFO: Access to the IMEM passed\"");
 
      apb_rd(32'h055001, data);
-     $display("[%0t] INFO: Access IMEM addr 32'h055001,Write %h Read back %h", $time,a[3],data);
+     $display("AXE iNote \"[%0t] INFO: Access IMEM addr 32'h055001,Write %h Read back %h\"", $time,a[3],data);
      if(a[3]!=data)
      begin
-       $display("ERROR: Access to the IMEM failed");
+       $display("AXE iNote \"ERROR: Access to the IMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the IMEM passed");
+      $display("AXE iNote \"INFO: Access to the IMEM passed\"");
      apb_wr(32'h055000, 32'h0000);
      apb_wr(32'h055001, 32'h0000);
-     $display("-----------------------------------------------");
-     $display("[%0t] MASIS: End the IMEM TDI/TDO checking ",$time);
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display("AXE iNote \"[%0t] MASIS: End the IMEM TDI/TDO checking \"",$time);
+     $display("AXE iNote \"-----------------------------------------------\"");
 
 
-     $display("[%0t] MASIS INFO: Performing Write/Read to the DMEM for TDO/TDI checking",$time);
-     $display("[%0t] Put into single MASIS test pattern",$time);
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"[%0t] MASIS INFO: Performing Write/Read to the DMEM for TDO/TDI checking\"",$time);
+     $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"",$time);
+     $display("AXE iNote \"-----------------------------------------------\"");
 
      //32'h058000 , 32'h058001
      apb_wr(32'h058000,a[4]);
      apb_wr(32'h058001,a[5]);
      apb_rd(32'h058000, data);
-     $display("[%0t] INFO: Access DMEM addr 32'h058000,Write %h Read back %h", $time,a[4],data);
+     $display("AXE iNote \"[%0t] INFO: Access DMEM addr 32'h058000,Write %h Read back %h\"", $time,a[4],data);
      if(a[4]!=data)
      begin
-       $display("ERROR: Access to the DMEM failed");
+       $display("AXE iNote \"ERROR: Access to the DMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the DMEM passed");
+      $display("AXE iNote \"INFO: Access to the DMEM passed\"");
 
      apb_rd(32'h058001, data);
-     $display("[%0t] INFO: Access DMEM addr 32'h058001,Write %h Read back %h", $time,a[5],data);
+     $display("AXE iNote \"[%0t] INFO: Access DMEM addr 32'h058001,Write %h Read back %h\"", $time,a[5],data);
      if(a[5]!=data)
      begin
-       $display("ERROR: Access to the DMEM failed");
+       $display("AXE iNote \"ERROR: Access to the DMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the DMEM passed");
+      $display("AXE iNote \"INFO: Access to the DMEM passed\"");
      apb_wr(32'h058000, 32'h0000);
      apb_wr(32'h058001, 32'h0000);
 
@@ -604,33 +724,33 @@
      apb_wr(32'h05a000,a[6]);
      apb_wr(32'h05a001,a[7]); 
      apb_rd(32'h05a000, data);
-     $display("[%0t] INFO: Access DMEM addr 32'h05a000,Write %h Read back %h", $time,a[6],data);
+     $display("AXE iNote \"[%0t] INFO: Access DMEM addr 32'h05a000,Write %h Read back %h\"", $time,a[6],data);
      if(a[6]!=data)
      begin
-       $display("ERROR: Access to the DMEM failed");
+       $display("AXE iNote \"ERROR: Access to the DMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the DMEM passed");
+      $display("AXE iNote \"INFO: Access to the DMEM passed\"");
 
      apb_rd(32'h05a001, data);
-     $display("[%0t] INFO: Access DMEM addr 32'h05a001,Write %h Read back %h", $time,a[7],data);
+     $display("AXE iNote \"[%0t] INFO: Access DMEM addr 32'h05a001,Write %h Read back %h\"", $time,a[7],data);
      if(a[7]!=data)
      begin
-       $display("ERROR: Access to the DMEM failed");
+       $display("AXE iNote \"ERROR: Access to the DMEM failed\"");
        test_pass=0;
        finish_ate_test;
      end
      else
-      $display("INFO: Access to the DMEM passed");
+      $display("AXE iNote \"INFO: Access to the DMEM passed\"");
      apb_wr(32'h05a000, 32'h0000);
      apb_wr(32'h05a001, 32'h0000);
-     $display("-----------------------------------------------");
-     $display ("[%0t] MASIS: End the DMEM TDI/TDO checking ",$time);
-     $display("-----------------------------------------------");  
-     $display("##### MASIS Section 1 ends##### ");
-     $display("-----------------------------------------------");
+     $display("AXE iNote \"-----------------------------------------------\"");
+     $display ("AXE iNote \"[%0t] MASIS: End the DMEM TDI/TDO checking \"",$time);
+     $display("AXE iNote \"-----------------------------------------------\"");  
+     $display("AXE iNote \"##### MASIS Section 1 ends##### \"");
+     $display("AXE iNote \"-----------------------------------------------\"");
   `endif //ATE_MASIS
 
   // =================================================
@@ -653,46 +773,54 @@
   apb_wr(`DWC_DDRPHYA_DRTUB0_StartDCCMClear,0);
 
   if (data[2])  //UcclkFull
-    repeat(8200)  @(posedge top.dfi_clk);
-  else
-    repeat(16400) @(posedge top.dfi_clk);
+    begin
+       repeat(8200)  @(posedge top.dfi_clk);
+       $display ($time, "AXE iRunLoop CLK_MOD_8200_dficlk -tck ; # //dfi_clk UcclkFull==1");
+    end
+  else begin
+     repeat(16400) @(posedge top.dfi_clk);
+     $display ($time, "AXE iRunLoop CLK_MOD_16400_dficlk -tck ; # //dfi_clk UcclkFull==0");
+    end
   data=32'h1;
+  
+  $display ($time, "AXE iNote \" <%m> INFO: polling DWC_DDRPHYA_DRTUB0_DCCMClearRunning, bit 0...\"");
   while (data[0]) begin
     apb_rd(`DWC_DDRPHYA_DRTUB0_DCCMClearRunning,data);
   end
+  $display ($time, "AXE iNote \" <%m> INFO: End polling DWC_DDRPHYA_DRTUB0_DCCMClearRunning, bit 0...\"");
 `endif
 
   apb_wr(`DWC_DDRPHYA_APBONLY0_MicroReset, 32'h1);
 
 `ifdef ATE_BKDOOR_ECC // Load IMEM/DMEM using backdoor
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("##### MASIS Section 2 begins #####");
-  $display("[%0t] MASIS INFO:Loading IMEM and DMEM", $time);
-  $display("-----------------------------------------------");
-  $display("[%0t] MASIS INFO: Loading the IMEM", $time);
-  $display("[%0t] Put into single MASIS test pattern", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS Section 2 begins #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO:Loading IMEM and DMEM\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"[%0t] MASIS INFO: Loading the IMEM\"", $time);
+  $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
   $readmemh("ddr_ate_imem_bank0_ecc.txt", top.u_alb_srams.u_iccm0_ram0.u_iccm0_sram.mem_r);
   $readmemh("ddr_ate_imem_bank1_ecc.txt", top.u_alb_srams.u_iccm0_ram1.u_iccm0_sram.mem_r);
 
 `ifdef MEM_DUMP 
-  fimem = $fopen("IMEM_Section2.log");
+  fimem = $fopen("AXE iNote \"IMEM_Section2.log\"");
   imem_dump();
   $fclose(fimem);
 `endif
 
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");  
-  $display("[%0t] MASIS:End loading the IMEM\n", $time);
-  $display("##### MASIS #####");
-  $display("-----------------------------------------------");
-  $display("##### MASIS #####");
-  $display("[%0t] MASIS INFO:LOADING the DMEM", $time);
-  $display("[%0t] Put into single MASIS test pattern", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");  
+  $display("AXE iNote \"[%0t] MASIS:End loading the IMEM\"", $time);
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO:LOADING the DMEM", $time);
+  $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
   $readmemh("ddr_ate_dmem_bank0_ecc_little_endian.txt", top.u_alb_srams.u_dccm_ram_lo0.u_dccm_ram.mem_r);
@@ -701,16 +829,16 @@
   $readmemh("ddr_ate_dmem_bank3_ecc_little_endian.txt", top.u_alb_srams.u_dccm_ram_hi1.u_dccm_ram.mem_r);
 
 `ifdef MEM_DUMP 
-  fdmem = $fopen("DMEM_Section2.log");
+  fdmem = $fopen("AXE iNote \"DMEM_Section2.log\"");
   dmem_dump();
   $fclose(fdmem);
 `endif
 
 `ifdef ATE_MASIS
-  $display("[%0t] MASIS: End loading the DMEM ", $time);
-  $display("##### MASIS Section 2 ends #####");
-  $display("-----------------------------------------------");
-  $display("ECC back door load finished");
+  $display("AXE iNote \"[%0t] MASIS: End loading the DMEM \"", $time);
+  $display("AXE iNote \"##### MASIS Section 2 ends #####\"");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"ECC back door load finished\"");
 `endif
 
 `else // Load IMEM/DMEM using APB interface
@@ -723,28 +851,32 @@
 `endif
 
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("##### MASIS Section 2 begins #####");
-  $display("[%0t] MASIS INFO:Loading IMEM and DMEM", $time);
-  $display("-----------------------------------------------");
-  $display("[%0t] MASIS INFO: Loading the IMEM", $time);
-  $display("[%0t] Put into single MASIS test pattern", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS Section 2 begins #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO:Loading IMEM and DMEM\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"[%0t] MASIS INFO: Loading the IMEM\"", $time);
+  $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
+   
+   $display("AXE iNote \" Start imem load\"");  
   `include "ddr_ate_imem.incv"
+   $display("AXE iNote \" End imem load\"");  
 
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");  
-  $display("[%0t] MASIS:End loading the IMEM\n", $time);
-  $display("##### MASIS #####");
-  $display("-----------------------------------------------");
-  $display("##### MASIS #####");
-  $display("[%0t] MASIS INFO:LOADING the DMEM", $time);
-  $display("[%0t] Put into single MASIS test pattern\n", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");  
+  $display("AXE iNote \"[%0t] MASIS:End loading the IMEM\"", $time);
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO:LOADING the DMEM\"", $time);
+  $display("AXE iNote \"[%0t] Put into single MASIS test pattern\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
+   $display("AXE iNote \" Start dmem load\"");  
 `ifdef ATE_DMEM_NOZERO
   `include "ddr_ate_dmem_non_zero.incv"
 `else
@@ -754,13 +886,14 @@
   apb_wr(`DWC_DDRPHYA_APBONLY0_CCMWriteBypassEnable,32'h0); // Disable Bypass Path after finish loading IMEM and DMEM
 `endif // ATE_WRITE_BYPASS
 `endif // ATE_DMEM_NOZERO
+   $display("AXE iNote \" End dmem load\"");  
 
 `ifdef ATE_MASIS
-    $display("-----------------------------------------------");  
-    $display("[%0t] MASIS: End loading the DMEM\n", $time);
-    $display("-----------------------------------------------");  
-    $display("##### MASIS Section 2 ends #####");
-    $display("-----------------------------------------------");
+    $display("AXE iNote \"-----------------------------------------------\"");  
+    $display("AXE iNote \"[%0t] MASIS: End loading the DMEM\"", $time);
+    $display("AXE iNote \"-----------------------------------------------\"");  
+    $display("AXE iNote \"##### MASIS Section 2 ends #####\"");
+    $display("AXE iNote \"-----------------------------------------------\"");
 `endif
 
 `endif //else of ATE_BKDOOR_ECC
@@ -772,71 +905,75 @@
 
   if(!cfg.disable_ate_cfg) begin
   `ifdef ATE_MASIS
-    $display("-----------------------------------------------");
-    $display("##### MASIS Section 3 begins #####");
-    $display("[%0t] MASIS INFO:Programming customized message blocks and CSR settings ", $time); 
-    $display("-----------------------------------------------");
-    $display("[%0t] MASIS INFO: Begin programming CSR settings ", $time);
-    $display("-----------------------------------------------");
+    $display("AXE iNote \"-----------------------------------------------\"");
+    $display("AXE iNote \"##### MASIS Section 3 begins #####\"");
+    $display("AXE iNote \"[%0t] MASIS INFO:Programming customized message blocks and CSR settings \"", $time); 
+    $display("AXE iNote \"-----------------------------------------------\"");
+    $display("AXE iNote \"[%0t] MASIS INFO: Begin programming CSR settings \"", $time);
+    $display("AXE iNote \"-----------------------------------------------\"");
   `endif //ATE_MASIS
 
+     $display("AXE iNote \" Step D1: Configure Technology Specific Registers\"");  
     tech_spec_pll_set;  // Step D1: Configure Technology Specific Registers
+     $display("AXE iNote \" End Step D1\"");  
 
   `ifdef ATE_MASIS
-    $display("-----------------------------------------------");  
-    $display("[%0t] MASIS: End programming CSR settings ", $time); //comment  
-    $display("-----------------------------------------------");
-    $display("[%0t] MASIS INFO: Begin programming customized message block ", $time);  
-    $display("-----------------------------------------------");
+    $display("AXE iNote \"-----------------------------------------------\"");  
+    $display("AXE iNote \"[%0t] MASIS: End programming CSR settings \"", $time); //comment  
+    $display("AXE iNote \"-----------------------------------------------\"");
+    $display("AXE iNote \"[%0t] MASIS INFO: Begin programming customized message block \"", $time);  
+    $display("AXE iNote \"-----------------------------------------------\"");
   `endif //ATE_MASIS
 
+    $display("AXE iNote \" Start Step D2: Configuring the Firmware Via the Message Block\"");   
     config_common_mb;   // Step D2: Configuring the Firmware Via the Message Block
+     $display("AXE iNote \" End Step D2\"");  
 
   `ifdef ATE_MASIS
-    $display("-----------------------------------------------");  
-    $display("[%0t] MASIS: End programming customized message block \n", $time);
-    $display("-----------------------------------------------");
-    $display("##### MASIS Section 3 ends #####");
-    $display("-----------------------------------------------");
+    $display("AXE iNote \"-----------------------------------------------\"");  
+    $display("AXE iNote \"[%0t] MASIS: End programming customized message block \"", $time);
+    $display("AXE iNote \"-----------------------------------------------\"");
+    $display("AXE iNote \"##### MASIS Section 3 ends #####\"");
+    $display("AXE iNote \"-----------------------------------------------\"");
   `endif //ATE_MASIS
   end //if(!cfg.disable_ate_cfg)
 
 `ifdef MEM_DUMP
-  fimem = $fopen("IMEM_Section4.log");
+  fimem = $fopen("AXE iNote \"IMEM_Section4.log\"");
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("##### MASIS Section 4 begins #####");
-  $display("[%0t] MASIS INFO: Reading the entire IMEM and DMEM for back-door loading", $time);
-  $display("-----------------------------------------------");
-  $display( "[%0t] MASIS INFO: Reading the entire IMEM for back-door loading", $time);
-  $display( "[%0t] Do not include in MASIS generation\n", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS Section 4 begins #####\"");
+  $display("AXE iNote \"[%0t] MASIS INFO: Reading the entire IMEM and DMEM for back-door loading\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"[%0t] MASIS INFO: Reading the entire IMEM for back-door loading\"", $time);
+  $display("AXE iNote \"[%0t] Do not include in MASIS generation\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif //ATE_MASIS
   imem_dump();
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------"); 
-  $display( "[%0t] MASIS:Before Testing IMEM dump is Done", $time);
-  $display( "[%0t] See detailed info in IMEM_Section4.log in current directory", $time);
-  $display( "-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\""); 
+  $display("AXE iNote \"[%0t] MASIS:Before Testing IMEM dump is Done\"", $time);
+  $display("AXE iNote \"[%0t] See detailed info in IMEM_Section4.log in current directory\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif //ATE_MASIS
   $fclose(fimem);
 
-  fdmem = $fopen("DMEM_Section4.log");
+  fdmem = $fopen("AXE iNote \"DMEM_Section4.log\"");
 `ifdef ATE_MASIS
-  $display("-----------------------------------------------");
-  $display("##### MASIS #####");
-  $display( "[%0t]MASIS INFO: Reading the entire DMEM for back-door loading ", $time);
-  $display( "[%0t] Do not include in MASIS generation\n ", $time);
-  $display("-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");
+  $display("AXE iNote \"##### MASIS #####\"");
+  $display("AXE iNote \"[%0t]MASIS INFO: Reading the entire DMEM for back-door loading \"", $time);
+  $display("AXE iNote \"[%0t] Do not include in MASIS generation\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif //ATE_MASIS
   dmem_dump();
 `ifdef ATE_MASIS
-  $display( "-----------------------------------------------");  
-  $display( "[%0t] MASIS:Before Testing DMEM dump is Done", $time);
-  $display( "[%0t] See detailed info in DMEM_Section4.log in current directory", $time);
-  $display( "-----------------------------------------------");  
-  $display( "##### MASIS Section 4 ends #####");
-  $display( "-----------------------------------------------");
+  $display("AXE iNote \"-----------------------------------------------\"");  
+  $display("AXE iNote \"[%0t] MASIS:Before Testing DMEM dump is Done\"", $time);
+  $display("AXE iNote \"[%0t] See detailed info in DMEM_Section4.log in current directory\"", $time);
+  $display("AXE iNote \"-----------------------------------------------\"");  
+  $display("AXE iNote \"##### MASIS Section 4 ends #####\"");
+  $display("AXE iNote \"-----------------------------------------------\"");
 `endif //ATE_MASIS
   $fclose(fdmem);
 `endif //MEM_DUMP
@@ -876,7 +1013,7 @@
 `elsif ATE_MASIS
   TC_TestsToRun = cfg.TestsToRun;
 `else
-  $display("ERROR: No valid ATE test specified.");
+  $display("AXE iNote \"ERROR: No valid ATE test specified.\"");
   $finish();
 `endif
 
