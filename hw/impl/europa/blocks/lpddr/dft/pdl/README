#!/bin/bash


DIR=/scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/ss3


rm -f ate_*.pdl
# Iterate over directories
for dir in ${DIR}/phy/run_ate_fw/run_lpddr5/*/; do
  # Check if vrun.log exists in the directory
  if [[ -f "$dir/vrun.log" ]]; then
    # Extract the directory name by removing the trailing '/'
    dirname=$(basename "$dir")
    dirname="ate_${dirname}"  

    # Grep for 'AXE' in vrun.log and pipe the output to a file named after the directory
    echo "iProcsForModule lpddr_p" > "${dirname}"
    echo "iProc ${dirname} {} {"  >> "${dirname}"
    echo "    iRunLoop 1000 -tck" >> "${dirname}"
    grep "AXE" "$dir/vrun.log" | sed 's/^.*AXE\s*/    /' >> "${dirname}"
    echo "}" >> "${dirname}"
    python3 ./process_file.py ${dirname} ${dirname}.pdl
    rm -f ${dirname}

    #with backdoor loading of imem and dmem
    python3 ./process_file.py ${dirname}.pdl ${dirname}_bkdoor.pdl "backdoor"
    sed -i "s/${dirname}/${dirname}_bkdoor/" ${dirname}_bkdoor.pdl
  else
    echo "vrun.log not found in $dir"
  fi
done

#######################################

for f in d i ; do

    file=${DIR}/phy/firmware/Latest/ate/ddr_ate_${f}mem.incv
    output_file=./write_lpddr_${f}mem.pdl

    echo "Creating $output_file"

    echo "##AUTOGENERATED by dft/bist/README" > $output_file
    echo "iProc write_lpddr_${f}mem {} {" >> $output_file
    #echo "" >> $output_file
    #echo "    #While loading firmware IMEM/DMEM images:" >> $output_file
    #echo "    #iCall csr_wr 0xd0099 0x1 ; # csrMicroReset must be set so that {Reset=0; Stall=1}." >> $output_file
    #echo "    #iCall csr_wr 0xd0000 0x0 ; # csrMicroContMuxSel must be set to 0x0"  >> $output_file
    #echo "" >> $output_file

    if [ $f == "d" ] ; then
        #echo "    iCall csr_wr 0xC0088 0 ; # StartDCCMClear" >> $output_file
        #echo "    iCall csr_wr 0xC0088 1 ; # StartDCCMClear" >> $output_file
        #echo "    iCall csr_wr 0xC0088 0 ; # StartDCCMClear" >> $output_file
        #echo "    iCall csr_rd 0xC0089 1 ; # check that DCCMClearRunning high to indicated the zeroing has started" >> $output_file
        #echo "" >> $output_file
        #echo "    iRunLoop 164000 -tck ; # This operation takes less than 8200 DfiClk cycles when csrUcclkFull=1, and less than 16400 DfiClk cycles when csrUcclkFull=0." >> $output_file
        #echo "" >> $output_file
        #echo "    iCall csr_rd 0xC0089 0 ; # check that DCCMClearRunning is low to indicate it has completed the zeroing" >> $output_file
        #echo "    iCall csr_wr 0xC0088 0 ; # StartDCCMClear" >> $output_file
        #echo "" >> $output_file
        sed -rn "/apb_wr\(32'h([0-9a-fA-F]+), 32'h([1-9a-fA-F][0-9a-fA-F]*)\);/s/apb_wr\(32'h([0-9a-fA-F]+), 32'h([0-9a-fA-F]+)\);/    iCall csr_wr 0x\1 0x\2/p"  $file >> $output_file
    else
        sed -r "s/apb_wr\(32'h([0-9a-fA-F]+), 32'h([0-9a-fA-F]+)\);/    iCall csr_wr 0x\1 0x\2/" $file >> $output_file
    fi
    
    echo "}" >> $output_file

done

#######################################

echo "Creating dwc_lpddr5xphy_regs.tcl"
python3 parse_ipxact.py ${DIR}/phy/export/dwc_lpddr5xphy_top.xml >  dwc_lpddr5xphy_regs.tcl

diff -ruN /data/foundry/LIB/synopsys/lpddr5x/v_roel/ss3/phy/ctb/ ${DIR}/phy/ctb > dwc_ap_lpddr5x_phy_sssf5a_diffs.patch

# cd TARGET_DIR
# patch dwc_ap_lpddr5x_phy_sssf5a_diffs.patch TARGET_DIR
# cd ctb/Latest/sim
#. bootenv
#./run_ate_fw
