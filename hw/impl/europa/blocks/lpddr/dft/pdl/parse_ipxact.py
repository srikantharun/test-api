import xml.etree.ElementTree as ET
import os
import argparse

def parse_ipxact(xml_file):
    # Parse the XML file
    tree = ET.parse(xml_file)
    root = tree.getroot()
    
    # Define the IP-XACT namespace
    namespace = {
        'ipxact': 'http://www.accellera.org/XMLSchema/IPXACT/1685-2014'
    }
    # Helper function to convert IP-XACT hex string to an integer
    def parse_hex(hex_str):
        if hex_str.startswith("'h"):
            return int(hex_str[2:], 16)  # Strip "'h" and convert to int
        return None

    # Find all baseAddress and associated registers
    for memory_map in root.findall('.//ipxact:addressBlock', namespace):
        base_address = memory_map.find('ipxact:baseAddress', namespace)
        base_address_int = parse_hex(base_address.text) if base_address is not None else "0"
        
        for register in memory_map.findall('.//ipxact:register', namespace):
            offset = register.find('ipxact:addressOffset', namespace)
            offset_int = parse_hex(offset.text) if offset is not None else "0"
            reg_name = register.find('ipxact:name', namespace)
            reg_name_text = reg_name.text if reg_name is not None else "Unnamed"
            
            reg_addr = base_address_int + offset_int
            
            print(f"dict set phy_regs 0X{reg_addr:08X} {reg_name_text}")

if __name__ == "__main__":
    # Set up argument parsing
    parser = argparse.ArgumentParser(description="Parse an IP-XACT XML file and extract register information.")
    parser.add_argument("xml_file", help="Path to the IP-XACT XML file")

    args = parser.parse_args()

    # Check if the file exists
    if not os.path.exists(args.xml_file):
        print(f"Error: File '{args.xml_file}' does not exist.")
    else:
        script_name = os.path.basename(__file__)
        print(f"##AUTOGENERATED by {script_name}")
        print(f"global phy_regs")
        # Call the function with the provided XML file
        parse_ipxact(args.xml_file)

        i=0
        for reg_addr in range(0x50000, 0x56000) :
            print(f"dict set phy_regs 0X{reg_addr:08X} IMEM_{i}")
            i+=1

        i=0 
        for reg_addr in range(0x58000, 0x5E000) :
            print(f"dict set phy_regs 0X{reg_addr:08X} DMEM_{i}")
            i+=1

