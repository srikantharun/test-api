diff -ruN /data/foundry/samsung/sf5a/ip/synopsys/dwc_pcie4phy_sssf5a_x4ns/Latest/upcs/testbench/tb_apb_driver.v /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/upcs/testbench/tb_apb_driver.v
--- /data/foundry/samsung/sf5a/ip/synopsys/dwc_pcie4phy_sssf5a_x4ns/Latest/upcs/testbench/tb_apb_driver.v	2024-09-04 16:09:26.877113752 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/upcs/testbench/tb_apb_driver.v	2024-10-15 16:40:01.743819956 +0000
@@ -91,7 +91,7 @@
     input [15:0]  addr;
     output [15:0] data;
     begin
-        if (`TB_TOP.debug) $display($time, " <%M> APB reading address: %h", addr);
+        if (`TB_TOP.debug) $display($time, " <%M> APB reading address: 0x%h", addr);
         @(posedge apb_pclk);
         #0.1;
         begin
@@ -121,7 +121,7 @@
             apb_pwrite  = 1'b0;
             apb_paddr   = 16'd0; 
         end
-        if (`TB_TOP.debug) $display($time, " <%M> APB read data : %h", data);
+        if (`TB_TOP.debug) $display($time, " <%M> APB read data : 0x%h", data);
     end
 endtask // apb_read
 
@@ -142,7 +142,7 @@
     input [15:0]  addr;
     input [15:0]  data;
     begin
-        if (`TB_TOP.debug) $display($time, " <%M> APB writing address: %h", addr);
+        if (`TB_TOP.debug) $display($time, " <%M> APB writing address: 0x%h", addr);
         @(posedge apb_pclk);
         #0.1;
         begin
@@ -174,7 +174,7 @@
             apb_paddr   = 16'd0; 
             apb_pwdata  = 16'd0; 
         end
-        if (`TB_TOP.debug) $display($time, " <%M> APB write data : %h", data);
+        if (`TB_TOP.debug) $display($time, " <%M> APB write data : 0x%h", data);
     end
 endtask // apb_read
     
diff -ruN /data/foundry/samsung/sf5a/ip/synopsys/dwc_pcie4phy_sssf5a_x4ns/Latest/upcs/testbench/tb_ate_jtag_driver.v /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/upcs/testbench/tb_ate_jtag_driver.v
--- /data/foundry/samsung/sf5a/ip/synopsys/dwc_pcie4phy_sssf5a_x4ns/Latest/upcs/testbench/tb_ate_jtag_driver.v	2024-09-04 16:09:26.796114041 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/upcs/testbench/tb_ate_jtag_driver.v	2024-11-19 09:42:46.676893134 +0000
@@ -22,6 +22,7 @@
 `include "dwc_c20pcie4_phy_x4_ns_jtag_macros.v"
 `include "dwc_c20pcie4_phy_x4_ns_macros.v"
 `include "dwc_c20pcie4_phy_x4_ns_jtag_id_code.v"
+`include "dwc_c20pcie4_phy_x4_ns_cregs.v"
 `ifdef DWC_C20PCIE4_X4NS_ATE_TEST
  `define DWC_C20PCIE4_X4NS_TB_TOP tb
 `else
@@ -532,7 +533,8 @@
     set_dr( temp_data, temp_data, 18 );
    `endif
 
-    if (`DWC_C20PCIE4_X4NS_TB_TOP.debug) $display($time, " <%M> JTAG write data : %h", data);
+    if (`DWC_C20PCIE4_X4NS_TB_TOP.debug) $display($time, " AXE crsel_write 0x%h  0x%h", addr, data);       
+     
   end
 endtask
 
@@ -686,7 +688,15 @@
     read_data = data[15:0];
    `endif
 
-    if (`DWC_C20PCIE4_X4NS_TB_TOP.debug) $display($time, " <%M> JTAG read data : %h", read_data);
+    
+    
+    if (`DWC_C20PCIE4_X4NS_TB_TOP.debug) begin
+       if (mask == 0) 
+         $display($time, " AXE crsel_read_capture 0x%h ", addr);
+       else
+         $display($time, " AXE crsel_read_masked 0x%h  0x%h 0x%h", addr, read_data, mask);
+    end
+     
   end
 endtask
 
@@ -826,7 +836,15 @@
     read_data = data[15:0];
    `endif
 
-    if (`DWC_C20PCIE4_X4NS_TB_TOP.debug) $display($time, " <%M> JTAG data read: %h", read_data);
+    
+    
+    if (`DWC_C20PCIE4_X4NS_TB_TOP.debug) begin
+       if (mask == 0) 
+         $display($time, " AXE crsel_read_capture 0x%h ", addr);
+       else
+         $display($time, " AXE crsel_read_masked 0x%h  0x%h 0x%h", addr, read_data, mask);
+    end
+     
  end
 
 endtask
diff -ruN /data/foundry/samsung/sf5a/ip/synopsys/dwc_pcie4phy_sssf5a_x4ns/Latest/upcs/testbench/tb_ate_tasks.v /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/upcs/testbench/tb_ate_tasks.v
--- /data/foundry/samsung/sf5a/ip/synopsys/dwc_pcie4phy_sssf5a_x4ns/Latest/upcs/testbench/tb_ate_tasks.v	2024-09-04 16:09:26.573114834 +0000
+++ /scratch/workspace/ferguson/dwc_ap_lpddr5x_phy_sssf5a/upcs/testbench/tb_ate_tasks.v	2024-11-19 09:11:03.250052936 +0000
@@ -23,14 +23,14 @@
 
 `define WRITE_CREG(reg_addr) \
   asr (`DWC_C20PCIE4_X4NS_ACCESS_TYPE, ```reg_addr``, tb.``reg_addr``_val); \
-  $display ($time, " CREG WRITE : REG=%0s, ADDR=%hh, DATA=%hh\n", `"``reg_addr```", ```reg_addr``, tb.``reg_addr``_val); \
+  $display ($time, " CREG WRITE : REG=%0s, ADDR=%0xh, DATA=%0xh\n", `"``reg_addr```", ```reg_addr``, tb.``reg_addr``_val); \
 
 `define SET_RDMSK(field,value) \
   tb.sel_rd_mask```field`` = ``value``; \
 
 `define READ_CREG(reg_addr, rd_data) \
   agr_test (`DWC_C20PCIE4_X4NS_ACCESS_TYPE,```reg_addr``, ``rd_data``, tb.sel_rd_mask); \
-  $display ($time, " CREG READ : REG=%0s, ADDR=%hh, DATA=%hh\n", `"``reg_addr```", ```reg_addr``, ``rd_data``); \
+  $display ($time, " CREG READ : REG=%0s, ADDR=%0xh, DATA=%0xh \n", `"``reg_addr```", ```reg_addr``, ``rd_data``); \
 
 
 `define WAIT_INIT_PWRUP_DONE(lane_no) \
@@ -106,11 +106,11 @@
 // Description: Programming TX EQ CURSOR values.
 //TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
 task cfg_eq (input reg [5:0] eq_main, eq_pre, eq_post);
-  $display ("\t\t Overriding tx_eq_main to %0d and tx_eq_post to %0d",eq_main*2, eq_post*2);
+  $display ("\t\t AXE iNote \" Overriding tx_eq_main to %0d and tx_eq_post to %0d\"",eq_main*2, eq_post*2);
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_4, EQ_MAIN, eq_main)
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_4, EQ_POST, eq_post)
   `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_4)
-  $display ("\t\t Overriding tx_eq_pre to %0d",eq_pre*2);
+  $display ("\t\t AXE iNote \" Overriding tx_eq_pre to %0d\"",eq_pre*2);
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_5, EQ_PRE, eq_pre)
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_5, EQ_OVRD_EN, 1'b1)
   `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_5)
@@ -126,10 +126,10 @@
 //              legs resolution.)
 //TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
 task cfg_eq (input reg [5:0] eq_main, eq_pre, eq_post);
-  $display ("\t\t Overriding tx_eq_pre to %0d",eq_pre);
+  $display ("\t\t AXE iNote \" Overriding tx_eq_pre to %0d\"",eq_pre);
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_4, TX_PRE_CURSOR, {eq_pre,1'b0})
   `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_4)
-  $display ("\t\t Overriding tx_eq_main to %0d and tx_eq_post to %0d",eq_main, eq_post);
+  $display ("\t\t AXE iNote \" Overriding tx_eq_main to %0d and tx_eq_post to %0d\"",eq_main, eq_post);
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_3, TX_MAIN_CURSOR, {eq_main,1'b0})
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_3, TX_POST_CURSOR, {eq_post,1'b0})
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_3, TX_EQ_OVRD_EN , 1'b1       )
@@ -150,15 +150,15 @@
   dis_tag("BEGIN_INTTASK", "inlb_wa_checker");
   //INLB_WA#1 checker
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG03, data)
-    $display ("\t\t Check INLB_WA#1: Current TX_ANA_PULL_DN_REG is %h @%0s", data, tb.lpbk_in);
-    $display ("\t\t Check INLB_WA#1: Sequence for AFE settings update");
+    $display ("\t\t AXE iNote \" Check INLB_WA#1: Current TX_ANA_PULL_DN_REG is 0x%h @%0s\"", data, tb.lpbk_in);
+    $display ("\t\t AXE iNote \" Check INLB_WA#1: Sequence for AFE settings update\"");
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_EQ_IN_2,data)
    `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_EQ_IN_1,data)
 
   //INLB_WA#2
   `define INLB_WA_OFST_CHECKER(lane_no) \
     if(tb.lane``lane_no``_rx_active == 1'b1) begin \
-      $display ("\t\t Check INLB_WA#2: Read the Analog DAC:"); \
+      $display ("\t\t AXE iNote \" Check INLB_WA#2: Read the Analog DAC:\""); \
       `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_RX_DAC_CTRL, data) \
       `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_RX_DAC_CTRL_SEL, data) \
       `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_RX_ANA_CAL_DAC_CTRL_EN, data) \
@@ -181,13 +181,13 @@
   `endif//X1
 
   //INLB_WA#3
-  $display ("\t\t Check INLB_WA#3: Check the FAST_RX_CONT_CAL_ADAPT and FAST_RX_CONT_ADAPT");
+  $display ("\t\t AXE iNote \" Check INLB_WA#3: Check the FAST_RX_CONT_CAL_ADAPT and FAST_RX_CONT_ADAPT\"");
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_FAST_FLAGS, data)
-  $display ("\t\t Check INLB_WA#3: Check the SKIP_TX_DCC_CAL_CONT ");
+  $display ("\t\t AXE iNote \" Check INLB_WA#3: Check the SKIP_TX_DCC_CAL_CONT \"");
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_CONT_ALGO_CTL_0, data)
 
   //INLB_WA#4
-  $display ("\t\t Check INLB_WA#4: the Analog DAC with the mid-code");
+  $display ("\t\t AXE iNote \" Check INLB_WA#4: the Analog DAC with the mid-code\"");
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_DCC_CAL_DATA, data)
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_DCC_CAL_CTRL_SEL, data)
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_DCC_CAL_OVRD_EN, data)
@@ -198,7 +198,7 @@
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_MPLLA_DCC_FULL_BANK_0, data)
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_MPLLA_DCC_HALF_BANK_0, data)
 
-  $display ("\t\t Check if Enable workarounds only for Display rates for internal loopback @%s, @%s ", tb.lpbk_in, tb.rate_in);
+  $display ("\t\t AXE iNote \" Check if Enable workarounds only for Display rates for internal loopback @%s, @%s \"", tb.lpbk_in, tb.rate_in);
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_MPLLB_DCC_FULL_BANK_0, data)
   `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_MPLLB_DCC_HALF_BANK_0, data)
   dis_tag("END_INTTASK", "inlb_wa_checker");
@@ -234,9 +234,9 @@
   end
 
   if(enable_wa)
-    $display ("\t\t Enable workaround-1 for internal loopback");
+    $display ("\t\t AXE iNote \" Enable workaround-1 for internal loopback\"");
   else
-    $display ("\t\t Disable workaround-1 for internal loopback");
+    $display ("\t\t AXE iNote \" Disable workaround-1 for internal loopback\"");
 
   //P80001562-150905 N6 C20 USB4 PHY: Wafer sort failing schmoos on Vmin
   //P80001562-170128 workarounds for the internal loopback
@@ -253,11 +253,11 @@
   eq_afe_bias_ovrd_en = enable_wa ? 1'b1 : `DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_EQ_IN_1_rst;
   eq_afe_bias         = enable_wa ? 2'd3 : `DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_EQ_IN_1_rst;
 
-  $display ("\t\t INLB_WA#1: Overriding TX_ANA_PULL_DN_REG to %0h", tx_ana_pull_dn_reg);
+  $display ("\t\t AXE iNote \" INLB_WA#1: Overriding TX_ANA_PULL_DN_REG to %0h\"", tx_ana_pull_dn_reg);
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG03, TX_ANA_PULL_DN_REG, tx_ana_pull_dn_reg)
   `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG03)
 
-  $display ("\t\t INLB_WA#1: Sequence for AFE settings update");
+  $display ("\t\t AXE iNote \" INLB_WA#1: Sequence for AFE settings update\"");
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_EQ_IN_2,EQ_DFE_TAP1_OVRD_EN, eq_dfe_tap1_ovrd_en)
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_EQ_IN_2,EQ_DFE_TAP1,eq_dfe_tap1)
   `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_EQ_IN_2)
@@ -291,15 +291,15 @@
 
   dis_tag("BEGIN_INTTASK", "inlb_wa_5");
   if(enable_wa)
-    $display ("\t\t Enable workaround-5 for internal loopback INTER mode for %0s", txrx);
+    $display ("\t\t AXE iNote \" Enable workaround-5 for internal loopback INTER mode for %0s\"", txrx);
   else
-    $display ("\t\t Disable workaround-5 for internal loopback INTER mode for %0s", txrx);
+    $display ("\t\t AXE iNote \" Disable workaround-5 for internal loopback INTER mode for %0s\"", txrx);
   if(enable_wa) begin
     //INLB_WA#5 Please perform the feasibility WA-5 of running the following pattern for Internal Loopback INTER modes.
 
     if (txrx == "TX") begin
       //TX
-      $display ("\t\t INLB_WA#5: configure the LBERT for the Pattern = 'E63C19C3E63C19C3' for %0s", txrx);
+      $display ("\t\t AXE iNote \" INLB_WA#5: configure the LBERT for the Pattern = 'E63C19C3E63C19C3' for %0s\"", txrx);
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, MODE, 1'b0)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_PAT1_0, PAT1_15_0, 16'd6595)
@@ -333,17 +333,17 @@
 
   dis_tag("BEGIN_INTTASK", "mpllb_wa_1");
   if(enable_wa)
-    $display ("\t\t Enable workaround-1 for mpllb");
+    $display ("\t\t AXE iNote \" Enable workaround-1 for mpllb\"");
   else
-    $display ("\t\t Disable workaround-1 for mpllb");
+    $display ("\t\t AXE iNote \" Disable workaround-1 for mpllb\"");
   if(enable_wa) begin
     //MPLLB_WA#1
     //To disable MPLLB ROPLL charge pump calibration
-    $display ("\t\t MPLLB_WA#1: Overriding MPLLB_ANA_EN_CAL_SPO to 0");
+    $display ("\t\t AXE iNote \" MPLLB_WA#1: Overriding MPLLB_ANA_EN_CAL_SPO to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_MPLLB_ANA_CREG00,MPLLB_ANA_EN_CAL_SPO,1'd0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_MPLLB_ANA_CREG00)
 
-    $display ("\t\t MPLLB_WA#1: set max to STARTUP_TIME and SETTLE_TIME");
+    $display ("\t\t AXE iNote \" MPLLB_WA#1: set max to STARTUP_TIME and SETTLE_TIME\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_RX_VCOCAL_RX_VCO_CAL_TIME_0,RX_VCO_CNTR_PWRUP_TIME,8'h5F)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_RX_VCOCAL_RX_VCO_CAL_TIME_0,RX_VCO_UPDATE_TIME,4'hC)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_RX_VCOCAL_RX_VCO_CAL_TIME_0)
@@ -372,7 +372,7 @@
   reg        mpllb_ana_en_cal_spo_ovrd_val;
 
   dis_tag("BEGIN_INTTASK", "mpllb_wa_2");
-  $display ("\t\t Enable workaround-2 for mpllb");
+  $display ("\t\t AXE iNote \" Enable workaround-2 for mpllb\"");
 
   //P80001562-474254 [n402] Update ATE sequence to fix MPLLB locking issues related to SPO calibration
   //MPLLB_WA#2
@@ -383,12 +383,12 @@
     `ifdef DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_MPLLB_ANA_CREG00_MPLLB_ANA_EN_CAL_SPO
       mpllb_ana_en_cal_spo_ovrd_val = tb.DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_MPLLB_ANA_CREG00_val`DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_MPLLB_ANA_CREG00_MPLLB_ANA_EN_CAL_SPO;
     `else
-      $display ("\t\t !!!ERROR - Invalid MPLLB_ANA_EN_CAL_SPO register, Please check the correct MPLLB_ANA_EN_CAL_SPO register");
+      $display ("\t\t AXE iNote \" !!!ERROR - Invalid MPLLB_ANA_EN_CAL_SPO register, Please check the correct MPLLB_ANA_EN_CAL_SPO register\"");
       tb.inc_error();
     `endif
   end
 
-  $display ("\t\t MPLLB_WA#2: Overriding MPLLB_ANA_EN_CAL_SPO to %0h", mpllb_ana_en_cal_spo_ovrd_val);
+  $display ("\t\t AXE iNote \" MPLLB_WA#2: Overriding MPLLB_ANA_EN_CAL_SPO to %0h\"", mpllb_ana_en_cal_spo_ovrd_val);
   `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_MPLLB_ANA_CREG00, MPLLB_ANA_EN_CAL_SPO, mpllb_ana_en_cal_spo_ovrd_val)
   `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_MPLLB_ANA_CREG00)
   dis_tag("END_INTTASK", "mpllb_wa_2");
@@ -407,9 +407,9 @@
 
   dis_tag("BEGIN_INTTASK", "eq_wa_1");
   if(enable_wa)
-    $display ("\t\t Enable workaround-1 for TX EQ MAIN/PRE/POST");
+    $display ("\t\t AXE iNote \" Enable workaround-1 for TX EQ MAIN/PRE/POST\"");
   else
-    $display ("\t\t Disable workaround-1 for TX EQ MAIN/PRE/POST");
+    $display ("\t\t AXE iNote \" Disable workaround-1 for TX EQ MAIN/PRE/POST\"");
 
   if(enable_wa) begin
     `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,RESET,0)
@@ -417,7 +417,7 @@
     cfg_eq(eq_main, eq_pre, eq_post);
     `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,RESET,0)
 
-    $display ("\t\t Waiting for tx_ack de-asserted");
+    $display ("\t\t AXE iNote \" Waiting for tx_ack de-asserted\"");
     `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
       //for internal test
       meas_duration("START_MEAS", "LANE_PWRUP");
@@ -458,9 +458,9 @@
   input [1:0] sup_ana_atb_val;
   begin
   if(sup_ana_atb_val[0] == 1'b1)
-    $display ("\t\t Enable ATB master of sup_ana");
+    $display ("\t\t AXE iNote \" Enable ATB master of sup_ana\"");
   else
-    $display ("\t\t Disable ATB master of sup_ana");
+    $display ("\t\t AXE iNote \" Disable ATB master of sup_ana\"");
     `ifdef DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG01_RESERVED_7_6
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG01, RESERVED_7_6, sup_ana_atb_val)
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG01)
@@ -468,7 +468,7 @@
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG01, SUP_ATB_ENABLE, sup_ana_atb_val[0])
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG01)
     `else
-       $display ("\t\t Need to check the ovrd register to enable ATB master of sup_ana");
+       $display ("\t\t AXE iNote \" Need to check the ovrd register to enable ATB master of sup_ana\"");
     `endif
   end
 endtask
@@ -478,29 +478,29 @@
   string end_tag;
   begin
     if (tag_id != "BEGIN_TASK" && tag_id != "BEGIN_INTTASK" && tag_id != "END_TASK" && tag_id != "END_INTTASK")begin
-      $display ("\t\t !!!ERROR - Invalid task tag =%0s", tag_id);
+      $display ("\t\t AXE iNote \" !!!ERROR - Invalid task tag =%0s\"", tag_id);
       tb.inc_error();
     end
 
     if (tag_id == "BEGIN_TASK" || tag_id == "BEGIN_INTTASK")begin
       if          (param1 == "UN_DEFINED")begin
-        $display ("\n\t%0s <%0s>"            , tag_id, tag_name);
+        $display ("\n\t AXE iNote \"%0s <%0s>\""            , tag_id, tag_name);
       end else if (param2 == "UN_DEFINED")begin
-        $display ("\n\t%0s <%0s@%0s>"        , tag_id, tag_name, param1);
+        $display ("\n\t AXE iNote \"%0s <%0s@%0s>\""        , tag_id, tag_name, param1);
       end else if (param3 == "UN_DEFINED")begin
-        $display ("\n\t%0s <%0s@%0s@%0s>"    , tag_id, tag_name, param1, param2);
+        $display ("\n\t AXE iNote \"%0s <%0s@%0s@%0s>\""    , tag_id, tag_name, param1, param2);
       end else begin
-        $display ("\n\t%0s <%0s@%0s@%0s@%0s>", tag_id, tag_name, param1, param2, param3);
+        $display ("\n\t AXE iNote \"%0s <%0s@%0s@%0s@%0s>\"", tag_id, tag_name, param1, param2, param3);
       end
     end else begin
       if          (param1 == "UN_DEFINED")begin
-        $display ("\t%0s <%0s>\n"            , tag_id, tag_name);
+        $display ("\t AXE iNote \"%0s <%0s>\""            , tag_id, tag_name);
       end else if (param2 == "UN_DEFINED")begin
-        $display ("\t%0s <%0s@%0s>\n"        , tag_id, tag_name, param1);
+        $display ("\t AXE iNote \"%0s <%0s@%0s>\""        , tag_id, tag_name, param1);
       end else if (param3 == "UN_DEFINED")begin
-        $display ("\t%0s <%0s@%0s@%0s>\n"    , tag_id, tag_name, param1, param2);
+        $display ("\t AXE iNote \"%0s <%0s@%0s@%0s>\""    , tag_id, tag_name, param1, param2);
       end else begin
-        $display ("\t%0s <%0s@%0s@%0s@%0s>\n", tag_id, tag_name, param1, param2, param3);
+        $display ("\t AXE iNote \"%0s <%0s@%0s@%0s@%0s>\"", tag_id, tag_name, param1, param2, param3);
       end
     end
   end
@@ -576,7 +576,8 @@
 task vec_pause;
     input [31:0]   wait_time;
     begin
-      $display ("\n\t\t Waiting for %0d microseconds for expected events to take place\n", wait_time);
+      $display ("\n\t AXE iNote \"\t Waiting for %0d microseconds for expected events to take place\"", wait_time);
+      $display ("\n\t\t AXE iRunLoop [expr (%0d * 1000) / 10] -tck ; # waiting this many 10ns clock periods", wait_time);
       #(wait_time*1000);
     end
 endtask
@@ -589,10 +590,10 @@
 task print_sim_result;
 `ifndef DWC_C20PCIE4_X4NS_WGL_VERIFY
     if (test.test_fail == 1'b0 ) begin
-      $display ("\t\t==================================================================");
-      $display ("\t\t   TEST STATUS : ATE TEST PASSED");
-      $display ("\t\t   Test Completed with zero e r r o r s");
-      $display ("\t\t==================================================================");
+      $display ("\t\t AXE iNote \"==================================================================\"");
+      $display ("\t\t AXE iNote \"   TEST STATUS : ATE TEST PASSED\"");
+      $display ("\t\t AXE iNote \"   Test Completed with zero e r r o r s\"");
+      $display ("\t\t AXE iNote \"==================================================================\"");
     end
     else begin
       $display ("\t\t==================================================================");
@@ -624,11 +625,12 @@
        if (access_type) begin
          //if (act_val === expt_val) begin
          if ((act_val&mask) === (expt_val&mask)) begin
-           $display("\t\t %0s\n", disp_msg);
+           $display($time, " AXE crsel_read_masked ADDR_MOD 0x%h 0x%h ;# : READ DATA=%0xh, EXPECTED DATA=%0xh, MASK=%0xh",    expt_val , mask, act_val, expt_val,mask); 
+           $display("\t\t AXE iNote \" %0s \"", disp_msg);
          end
          else begin
            `ifndef DWC_C20PCIE4_X4NS_WGL_VERIFY
-              $display ($time, " ERROR CREG READ: READ DATA=%hh, EXPECTED DATA=%hh", act_val, expt_val);
+              $display ($time, " ERROR CREG READ: READ DATA=%0xh, EXPECTED DATA=%0xh", act_val, expt_val);
               tb.inc_error();
            `endif
          end
@@ -636,9 +638,10 @@
        else begin
          if ((act_val&mask) === (expt_val&mask)) begin
            $display("\t\t %0s\n", disp_msg);
+           $display ($time, " PASS CREG READ: READ DATA=%0xh, EXPECTED DATA=%0xh, MASK=%0xh", act_val, expt_val,mask);
          end
          else begin
-           $display ($time, " ERROR CREG READ: READ DATA=%hh, EXPECTED DATA=%hh", act_val, expt_val);
+           $display ($time, " ERROR CREG READ: READ DATA=%0xh, EXPECTED DATA=%0xh", act_val, expt_val);
            tb.inc_error();
          end
        end
@@ -657,16 +660,16 @@
      reg [15:0]    exp_data;
      string        test_desc;
      begin
-       $display ("\t\t Reading RX ADAPT ACK at PHY level");
+       $display ("\t\t AXE iNote \" Reading RX ADAPT ACK at PHY level\"");
     `define READ_RX_ADAPT_ACK_PHY(lane_no) \
       if(tb.lane``lane_no``_rx_active == 1'b1)begin \
         `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS, 16'h0)\
         `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_FW_XF_ADAPT_ACK_ADAPT_ACK, 1'h1)\
         `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_FW_XF_ADAPT_ACK, data)\
         if ( rx_adapt_ack_exp === 1'b0) \
-          test_desc = `"Expecting RX ADAPT ACK to be de-asserted on Channle``lane_no```"; \
+          test_desc = `"Expecting RX ADAPT ACK to be de-asserted on Channel``lane_no```"; \
         if ( rx_adapt_ack_exp === 1'b1) \
-          test_desc = `"Expecting RX ADAPT ACK to be asserted on Channle``lane_no```"; \
+          test_desc = `"Expecting RX ADAPT ACK to be asserted on Channel``lane_no```"; \
         exp_data=data; \
         exp_data`DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_FW_XF_ADAPT_ACK_ADAPT_ACK=rx_adapt_ack_exp; \
         check_result (data, exp_data,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE); \
@@ -705,7 +708,7 @@
      string        test_desc;
      reg  valid;
      begin
-       $display ("\t\t Reading RX VALID at PMA level");
+       $display ("\t\t AXE iNote \" Reading RX VALID at PMA level\"");
 
     `define READ_RX_VALID_PMA(lane_no) \
       if(tb.lane``lane_no``_rx_active == 1'b1)begin \
@@ -758,7 +761,7 @@
      reg [1:0] ack_valid;
      begin
        ack_valid={rx_ack_exp,rx_valid_exp};
-       $display ("\t\t Reading RX ACK and RX VALID at PMA level");
+       $display ("\t\t AXE iNote \" Reading RX ACK and RX VALID at PMA level 'h%x\"",ack_valid);
 
     `define READ_RX_ACK_RX_VALID_PMA(lane_no,lane_type) \
        if(tb.lane``lane_no``_rx_active == 1'b1 &&  \
@@ -817,7 +820,7 @@
      reg [15:0]    exp_data;
      string    test_desc;
      begin
-       $display ("\t\t Reading RX ACK at PHY level");
+       $display ("\t\t AXE iNote \" Reading RX ACK at PHY level\"");
 
     `define READ_RX_ACK_PHY(lane_no) \
        if(tb.lane``lane_no``_rx_active == 1'b1)begin \
@@ -825,9 +828,9 @@
          `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_PCS_XF_OUT_0_ACK, 1'h1)\
          `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_PCS_XF_OUT_0, data)\
          if ( rx_ack_exp === 1'b0) \
-         test_desc = `"Expecting RX ACK to be de-asserted on Channle``lane_no```"; \
+         test_desc = `"Expecting RX ACK to be de-asserted on Channel``lane_no```"; \
          if ( rx_ack_exp === 1'b1) \
-         test_desc = `"Expecting RX ACK to be asserted on Channle``lane_no```"; \
+         test_desc = `"Expecting RX ACK to be asserted on Channel``lane_no```"; \
          exp_data=data; \
          exp_data`DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_PCS_XF_OUT_0_ACK=rx_ack_exp; \
          check_result (data, exp_data,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE); \
@@ -864,7 +867,7 @@
      reg [15:0]    exp_data;
      string    test_desc;
      begin
-       $display ("\t\t Reading TX ACK at PMA level");
+       $display ("\t\t AXE iNote \" Reading TX ACK at PMA level\"");
 
     `define READ_TX_ACK_PMA(lane_no) \
        if(tb.lane``lane_no``_tx_active == 1'b1)begin \
@@ -911,7 +914,7 @@
      reg [15:0]    exp_data;
      string    test_desc;
      begin
-       $display ("\t\t Reading TX ACK at PHY level");
+       $display ("\t\t AXE iNote \" Reading TX ACK at PHY level\"");
 
     `define READ_TX_ACK_PHY(lane_no) \
        if(tb.lane``lane_no``_tx_active == 1'b1)begin \
@@ -958,7 +961,7 @@
      reg [15:0]    exp_data;
      string    test_desc;
      begin
-       $display ("\t\t Reading RX ACK at PMA level");
+       $display ("\t\t AXE iNote \" Reading RX ACK at PMA level\"");
 
     `define READ_RX_ACK_PMA(lane_no) \
        if(tb.lane``lane_no``_rx_active == 1'b1)begin \
@@ -1005,7 +1008,7 @@
      reg [15:0]    exp_data;
      string    test_desc;
      begin
-       $display ("\t\t Reading INIT_PWRUP_DONE on all lanes");
+       $display ("\t\t AXE iNote \" Reading INIT_PWRUP_DONE on all lanes\"");
 
     `define READ_INIT_PWRUP_DONE_PHY(lane_no) \
       if(tb.lane``lane_no``_tx_active == 1'b1 || tb.lane``lane_no``_rx_active == 1'b1)begin \
@@ -1050,7 +1053,7 @@
     end else if(start_end == "END_MEAS")begin
       tb.end_ts = $time;
       tb.sim_time =  (tb.end_ts - tb.start_ts)/1000;
-      $display ("\t\t Duration for %0s@%0s@%0s@%0s = %0d us", meas_type, tb.rate_in, tb.freq_in, tb.lpbk_in, tb.sim_time);
+      $display ("\t\t AXE iNote \" Duration for %0s@%0s@%0s@%0s = %0d us\"", meas_type, tb.rate_in, tb.freq_in, tb.lpbk_in, tb.sim_time);
 
       // Check if the configurated time is enough, else print message,
       // and then designer should update the value accordingly
@@ -1071,7 +1074,7 @@
       endcase
       if(chk_time == 1 && tb.sim_time > cfg_time)begin
         // Don't stop simulation since we want to get all mininal time for each type
-        $display ("\t\t !!!ERROR - the configured time for %0s is %0d, the expected minimal time is %0d", meas_type, cfg_time, tb.sim_time);
+        $display ("\t\t AXE iNote \" !!!ERROR - the configured time for %0s is %0d, the expected minimal time is %0d\"", meas_type, cfg_time, tb.sim_time);
       end
     end
   end
@@ -1268,7 +1271,7 @@
     `endif //X1
 
     //Enter CR access
-    $display ("\t\tEnter CR ACCESS");
+    $display ("\t\t AXE iNote \"Enter CR ACCESS\"");
     tb.jtag.set_ir(`DWC_C20PCIE4_X4NS_JTAG_IR_CRSEL);
 
     vec_pause (32'd2);
@@ -1294,12 +1297,12 @@
     ate_param_settings;
     cfg_ref_range(ate_ref_range);
 
-    $display ("\t\t Overriding fsm_cmd_start_r to 1'b0, and fsm_ovrd_en_r to 1'b1 to avoid firmware starting");
+    $display ("\t\t AXE iNote \" Overriding fsm_cmd_start_r to 1'b0, and fsm_ovrd_en_r to 1'b1 to avoid firmware starting\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_FSM_FSM_OVRD_CTL, FSM_CMD_START, 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_FSM_FSM_OVRD_CTL, FSM_OVRD_EN  , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_FSM_FSM_OVRD_CTL)
 
-    $display ("\t\t Overriding ref_clk_en_ovrd_en to 1'b1 to start the sram bootloading process");
+    $display ("\t\t AXE iNote \" Overriding ref_clk_en_ovrd_en to 1'b1 to start the sram bootloading process\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN, REF_CLK_EN_OVRD_EN  , 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN, REF_CLK_EN_OVRD_VAL  , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN)
@@ -1319,11 +1322,11 @@
           vec_pause (32'd1);
          `else
          //the worst case bootloading time is ref clock period* 20*1024
-         $display ("\t\t !!!NEED ATTENTION - SRAM bootloading time can be changing across ref_clk");
+         $display ("\t\t AXE iNote \" !!!NEED ATTENTION - SRAM bootloading time can be changing across ref_clk\"");
          vec_pause (tb.ate_sram_bl_time);
          `endif
 
-         $display ("\t\t Reading SRAM_INIT_DONE");
+         $display ("\t\t AXE iNote \" Reading SRAM_INIT_DONE\"");
          `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS, 16'h0)
          `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SRAM_OUT_SRAM_INIT_DONE, 1'b1)
          `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SRAM_OUT, data)
@@ -1338,10 +1341,10 @@
         `ifdef DWC_C20PCIE4_X4NS_SRAM_EXT_LD
           sram_external_load();
         `else
-           $display ("\t\t update firmware if necessary");
+           $display ("\t\t AXE iNote \" update firmware if necessary\"");
         `endif
          vec_pause (2);
-         $display ("\t\t Insert the vector pause for FW updates if necessary in ate.vec at line number %0d", tb.vec_count);
+         $display ("\t\t AXE iNote \" Insert the vector pause for FW updates if necessary in ate.vec at line number %0d\"", tb.vec_count);
          vec_pause (2);
 
          // P80001562-424322: replace the txX_rate values of SATA1/2 in SRAM
@@ -1349,7 +1352,7 @@
 
          // sram_ext_ld_done should ALWAYS be asserted to ensure register test running at
          // reference clock, else the test can  be very slow
-         $display ("\t\t Overriding sram_ext_ld_done to 1'b1");
+         $display ("\t\t AXE iNote \" Overriding sram_ext_ld_done to 1'b1\"");
          `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SRAM_OVRD_IN, SRAM_EXT_LD_DONE_OVRD_VAL  , 1'b1)
          `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SRAM_OVRD_IN, SRAM_EXT_LD_DONE_OVRD_EN   , 1'b1)
          `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SRAM_OVRD_IN)
@@ -1501,39 +1504,39 @@
   integer     i;
   begin
      // Set up IP ADC
-     $display ("\t\t ADC mode") ;
+     $display ("\t\t AXE iNote \" ADC mode\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_DAC_MODE , 1'b0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_DAC_CHOP , 1'b0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-     $display ("\t\t Attach ADC to ATB") ;
+     $display ("\t\t AXE iNote \" Attach ADC to ATB\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_ATB , 1'b1)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-     $display ("\t\t Select atb_sense") ;
+     $display ("\t\t AXE iNote \" Select atb_sense\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_SEL_ATBF , 1'b0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-     $display ("\t\t Define ADC debug mode") ;
+     $display ("\t\t AXE iNote \" Define ADC debug mode\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, TYPE , 2'd0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
-     $display ("\t\t Force ADC block enable") ;
+     $display ("\t\t AXE iNote \" Force ADC block enable\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_EN_FRCON , 1'b1)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
      if (tx_p_sel === 0) begin
-       $display ("\t\t Select to look at sense_m") ;
+       $display ("\t\t AXE iNote \" Select to look at sense_m\"") ;
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_SEL_ATBP , 1'b0)
      end else begin
-       $display ("\t\t Select to look at sense_p") ;
+       $display ("\t\t AXE iNote \" Select to look at sense_p\"") ;
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_SEL_ATBP , 1'b1)
      end
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-     $display ("\t\t Enables reading") ;
+     $display ("\t\t AXE iNote \" Enables reading\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, MAN_TUNE , 1'd1)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
@@ -1560,16 +1563,16 @@
        for (i=0;i<=9;i=i+1)begin
          if (mask[i] == 1'b1)begin
            case(i)
-             0: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[0]=exp_data[0];
-             1: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[1]=exp_data[1];
-             2: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[2]=exp_data[2];
-             3: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[3]=exp_data[3];
-             4: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[4]=exp_data[4];
-             5: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[5]=exp_data[5];
-             6: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[6]=exp_data[6];
-             7: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[7]=exp_data[7];
-             8: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[8]=exp_data[8];
-             9: force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9]=exp_data[9];
+             0: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[0]=exp_data[0]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[0]= 1'b%h;\"" , exp_data[0] ); end
+             1: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[1]=exp_data[1]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[1]= 1'b%h;\"" , exp_data[1] ); end
+             2: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[2]=exp_data[2]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[2]= 1'b%h;\"" , exp_data[2] ); end
+             3: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[3]=exp_data[3]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[3]= 1'b%h;\"" , exp_data[3] ); end
+             4: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[4]=exp_data[4]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[4]= 1'b%h;\"" , exp_data[4] ); end
+             5: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[5]=exp_data[5]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[5]= 1'b%h;\"" , exp_data[5] ); end
+             6: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[6]=exp_data[6]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[6]= 1'b%h;\"" , exp_data[6] ); end
+             7: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[7]=exp_data[7]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[7]= 1'b%h;\"" , exp_data[7] ); end
+             8: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[8]=exp_data[8]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[8]= 1'b%h;\"" , exp_data[8] ); end
+             9: begin force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9]=exp_data[9]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[9]= 1'b%h;\"" , exp_data[9] ); end
            endcase
          end
        end
@@ -1583,7 +1586,7 @@
        check_result (data, {6'd0,exp_data},test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
      end
 
-     $display ("\t\t Disables reading") ;
+     $display ("\t\t AXE iNote \" Disables reading\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, MAN_TUNE , 1'd0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
@@ -1615,16 +1618,16 @@
        for (i=0;i<=9;i=i+1)begin
          if (mask[i] == 1'b1)begin
            case(i)
-             0: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[0];
-             1: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[1];
-             2: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[2];
-             3: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[3];
-             4: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[4];
-             5: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[5];
-             6: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[6];
-             7: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[7];
-             8: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[8];
-             9: release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9];
+             0: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[0]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[0];\""); end
+             1: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[1]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[1];\""); end
+             2: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[2]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[2];\""); end
+             3: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[3]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[3];\""); end
+             4: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[4]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[4];\""); end
+             5: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[5]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[5];\""); end
+             6: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[6]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[6];\""); end
+             7: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[7]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[7];\""); end
+             8: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[8]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[8];\""); end
+             9: begin release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9]; $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[9];\""); end
            endcase
          end
        end
@@ -1644,56 +1647,56 @@
   string              test_desc;
   begin
     if (hi_limit < lo_limit) begin
-      $display ("\t\t High limit must be >= than low limit for alu_limit_compare function");
+      $display ("\t\t AXE iNote \" High limit must be >= than low limit for alu_limit_compare function\"");
     end
 
     if(lo_limit == 0)
       twos_lo_val = 0;
     else begin
-      $display("\t\t Negate the lo_limit value");
+      $display("\t\t AXE iNote \" Negate the lo_limit value\"");
       twos_lo_val =  17'd65536 - lo_limit;
     end
 
-    $display("\t\t Start to check low limit");
-    $display("\t\t Write low limit data to ALU data register");
+    $display("\t\t AXE iNote \" Start to check low limit\"");
+    $display("\t\t AXE iNote \" Write low limit data to ALU data register\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_DATA,DATA,twos_lo_val)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_DATA)
-    $display("\t\t Add the writing data to the accumulator");
+    $display("\t\t AXE iNote \" Add the writing data to the accumulator\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ADD_DATA)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-    $display("\t\t read ALU accumulator result");
+    $display("\t\t AXE iNote \" read ALU accumulator result\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_zero)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
-    $display("\t\t Read the ALU flags");
+    $display("\t\t AXE iNote \" Read the ALU flags\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS,tb.mask_all_ones)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_FLAGS,data)
     lo_flag = data[0];
-    $display("\t\t Write actual low limit data to ALU data register");
+    $display("\t\t AXE iNote \" Write actual low limit data to ALU data register\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_DATA,DATA,lo_limit)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_DATA)
-    $display("\t\t Add the writing data to the accumulator");
+    $display("\t\t AXE iNote \" Add the writing data to the accumulator\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ADD_DATA)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-    $display("\t\t read ALU accumulator result");
+    $display("\t\t AXE iNote \" read ALU accumulator result\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_zero)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
-    $display("\t\t Negate the accumulator value");
+    $display("\t\t AXE iNote \" Negate the accumulator value\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_NEG)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-    $display("\t\t read ALU accumulator result");
+    $display("\t\t AXE iNote \" read ALU accumulator result\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_zero)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
-    $display("\t\t Start to check high limit");
-    $display("\t\t Write high limit data to ALU data register");
+    $display("\t\t AXE iNote \" Start to check high limit\"");
+    $display("\t\t AXE iNote \" Write high limit data to ALU data register\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_DATA,DATA,hi_limit)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_DATA)
-    $display("\t\t Add the writing data to the accumulator");
+    $display("\t\t AXE iNote \" Add the writing data to the accumulator\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ADD_DATA)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-    $display("\t\t read ALU accumulator result");
+    $display("\t\t AXE iNote \" read ALU accumulator result\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_zero)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
-    $display("\t\t Read the ALU flags");
+    $display("\t\t AXE iNote \" Read the ALU flags\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS,tb.mask_all_ones)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_FLAGS,data)
     hi_flag = data[0];
@@ -1704,16 +1707,16 @@
     test_desc = "Accumulator result is expected to be cleared to zero";
     check_result (data, 0,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
 
-    $display("\t\t Try to assert FLAG of ALU in order to compare previous FLAG");
-    $display("\t\t Negate the hi_limit value");
+    $display("\t\t AXE iNote \" Try to assert FLAG of ALU in order to compare previous FLAG\"");
+    $display("\t\t AXE iNote \" Negate the hi_limit value\"");
     twos_lo_val =  17'd65536 - hi_limit;
-    $display("\t\t Write high limit data to ALU data register");
+    $display("\t\t AXE iNote \" Write high limit data to ALU data register\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_DATA,DATA,twos_lo_val)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_DATA)
-    $display("\t\t Add the high limit data to the accumulator");
+    $display("\t\t AXE iNote \" Add the high limit data to the accumulator\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ADD_DATA)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-    $display("\t\t Read the ALU flags");
+    $display("\t\t AXE iNote \" Read the ALU flags\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS,tb.mask_all_ones)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_FLAGS,data)
     test_desc = "Accumulator result is expected to be one";
@@ -1749,18 +1752,18 @@
 `endif
   begin
      // Set up IP ADC
-     $display ("\t\t ADC mode") ;
+     $display ("\t\t AXE iNote \" ADC mode\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_DAC_MODE , 1'b0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_DAC_CHOP , 1'b0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-     $display ("\t\t Attach ADC to ATB") ;
+     $display ("\t\t AXE iNote \" Attach ADC to ATB\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_ATB , 1'b1)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-     $display ("\t\t Select atb_sense") ;
+     $display ("\t\t AXE iNote \" Select atb_sense\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_SEL_ATBF , 1'b0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
@@ -1770,7 +1773,7 @@
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_EN_FRCON , 1'b1)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-     $display ("\t\t Select to look at sense_p or sense_m based on TX_P and TX_M selection") ;
+     $display ("\t\t AXE iNote \" Select to look at sense_p or sense_m based on TX_P and TX_M selection\"") ;
      if (tx_m_sel === 1) begin
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_SEL_ATBP , 1'b0)
      end
@@ -1779,7 +1782,7 @@
      end
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-     $display ("\t\t Enables reading") ;
+     $display ("\t\t AXE iNote \" Enables reading\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, MAN_TUNE , 1'd1)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
@@ -1829,51 +1832,51 @@
        endcase
 
          if(tx_m_sel === 0) begin
-           $display("\t\t for sim, force rtune_stat value");
+           $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val = 10'h%h;\"" , adc_check_valp[9:0] );
            force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val = adc_check_valp[9:0];
          end
          else begin
-           $display("\t\t for sim, force rtune_stat value");
+           $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val = 10'h%h;\"" , adc_check_valm[9:0] );
            force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val = adc_check_valm[9:0];
          end
          if(tx_m_sel === 0) begin
-           $display("\t\t ALU accumulator clearing");
+           $display("\t\t AXE iNote \" ALU accumulator clearing\"");
            `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ZERO)
            `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-           $display("\t\t read ALU accumulator result");
+           $display("\t\t AXE iNote \" read ALU accumulator result\"");
            `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_ones)
            `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
            test_desc = "Accumulator result is expected to be cleared to zero";
            check_result (data,0,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
-           $display("\t\t set ALU address");
+           $display("\t\t AXE iNote \" set ALU address\"");
            `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ADDR,ADDR,`DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT)
            `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ADDR)
          end
-           $display("\t\t ALU read");
+           $display("\t\t AXE iNote \" ALU read\"");
            `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_READ)
            `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
          if(tx_m_sel === 0)
-           $display("\t\t Add the ADC capturing data to the accumulator for tx_p");
+           $display("\t\t AXE iNote \" Add the ADC capturing data to the accumulator for tx_p\"");
          else
-           $display("\t\t Add the ADC capturing data to the accumulator for tx_m");
+           $display("\t\t AXE iNote \" Add the ADC capturing data to the accumulator for tx_m\"");
            `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ADD_RD_DATA)
            `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-           $display("\t\t read ALU accumulator result");
+           $display("\t\t AXE iNote \" read ALU accumulator result\"");
            `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_zero)
            `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
          if(tx_m_sel === 0) begin
-           $display("\t\t Negate the accumulator value for next calculating");
+           $display("\t\t AXE iNote \" Negate the accumulator value for next calculating\"");
            `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_NEG)
            `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-           $display("\t\t read ALU accumulator result");
+           $display("\t\t AXE iNote \" read ALU accumulator result\"");
            `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_zero)
            `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
          end
          if(tx_m_sel === 1) begin
-           $display("\t\t Take the absolute value, get the actual value");
+           $display("\t\t AXE iNote \" Take the absolute value, get the actual value\"");
            `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ABS)
            `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-           $display("\t\t read ALU accumulator result");
+           $display("\t\t AXE iNote \" read ALU accumulator result\"");
            `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_zero)
            `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
            vec_pause(10);
@@ -1888,6 +1891,8 @@
       `ifdef DWC_C20PCIE4_X4NS_SIM_GATES
        force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune_sar_reg_reg_9_.Q=1'b0;
       `else
+        $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[9] = 1'h0;\"");
+        
        force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9] = 1'h0;
       `endif
      end
@@ -1895,6 +1900,8 @@
       `ifdef DWC_C20PCIE4_X4NS_SIM_GATES
        force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune_sar_reg_reg_9_.Q=1'b1;
       `else
+        $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[9] = 1'h1;\"");
+        
        force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9] = 1'h1;
       `endif
      end
@@ -1914,7 +1921,7 @@
      check_result (data, exp_data,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
     `endif
 
-     $display ("\t\t Disables reading") ;
+     $display ("\t\t AXE iNote \" Disables reading\"") ;
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, MAN_TUNE , 1'd0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
@@ -1923,6 +1930,7 @@
       release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune_sar_reg_reg_9_.Q;
      `else
       release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9];
+     $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[9];\"");
      `endif
      // Restoring original values for subsequent lane writes which were
      // asserted previously
@@ -1952,18 +1960,18 @@
   reg [16:0]    twos_lo_val;
 `endif
   begin
-    $display ("\t\t ADC mode") ;
+    $display ("\t\t AXE iNote \" ADC mode\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_DAC_MODE, 1'b0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_DAC_CHOP, 1'b0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-    $display ("\t\t Attach ADC to ATB") ;
+    $display ("\t\t AXE iNote \" Attach ADC to ATB\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_ATB, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-    $display ("\t\t Select atb_sense") ;
+    $display ("\t\t AXE iNote \" Select atb_sense\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_SEL_ATBF, 1'b0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
@@ -1973,11 +1981,11 @@
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_EN_FRCON, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-    $display ("\t\t Select to look at sense_p") ;
+    $display ("\t\t AXE iNote \" Select to look at sense_p\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02, SUP_ANA_RT_SEL_ATBP, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG02)
 
-    $display ("\t\t Enables reading") ;
+    $display ("\t\t AXE iNote \" Enables reading\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, MAN_TUNE , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
@@ -2003,26 +2011,28 @@
         force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune_sar_reg_reg_1_.Q=1'b0;
         force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune_sar_reg_reg_0_.Q=1'b0;
        `else
+     $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[9:0] = 10'h%h;\"", vcm_act_val);
+     
          force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9:0] = vcm_act_val;
        `endif
-      $display("\t\t ALU accumulator clearing");
+      $display("\t\t AXE iNote \" ALU accumulator clearing\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ZERO)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-      $display("\t\t read ALU accumulator result");
+      $display("\t\t AXE iNote \" read ALU accumulator result\"");
       `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_ones)
       `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
       test_desc = "Accumulator result is expected to be cleared to zero";
       check_result (data,0,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
-      $display("\t\t set ALU address");
+      $display("\t\t AXE iNote \" set ALU address\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ADDR,ADDR,`DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ADDR)
-      $display("\t\t ALU read");
+      $display("\t\t AXE iNote \" ALU read\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_READ)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-      $display("\t\t Add the RTUNE capturing data to the accumulator");
+      $display("\t\t AXE iNote \" Add the RTUNE capturing data to the accumulator\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL,ATE_ALU_OPCODE,`DWC_C20PCIE4_X4NS_ALU_CMD_ADD_RD_DATA)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_CTRL)
-      $display("\t\t read ALU accumulator result");
+      $display("\t\t AXE iNote \" read ALU accumulator result\"");
       `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM_VAL,tb.mask_all_zero)
       `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_ATE_ALU_ACCUM,data)
       alu_check_value_range (lo_limit,hi_limit);
@@ -2032,6 +2042,8 @@
         force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune_sar_reg_reg_9_.Q=1'b0;
         force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune_sar_reg_reg_8_.Q=1'b1;
       `else
+     $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[9:8] = 2'h1;\"");
+     
         force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9:8] = 2'h1;
       `endif
 
@@ -2049,7 +2061,7 @@
       check_result (data, exp_data,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
     `endif
 
-    $display ("\t\t Disables reading") ;
+    $display ("\t\t AXE iNote \" Disables reading\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, MAN_TUNE , 1'b0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
@@ -2059,6 +2071,7 @@
      release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune_sar_reg_reg_8_.Q;
     `else
      release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.dig.sup.rtune.rtune_stat_reg.cr_val[9:8];
+     $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.dig.sup.rtune.rtune_stat_reg.cr_val[9:8];\"");
     `endif
 
     // Restoring original values for subsequent lane writes which were
@@ -2084,7 +2097,7 @@
    iq_adjust[7:6] = (iq_code[6:3] > 4'd4) ?
                         ((iq_code[6:3] == 4'b0111) ? iq_code[6:5] : ~iq_code[6:5]) :
                         (|iq_code[4:3] ? iq_code[6:5] : {1'b0, ~iq_code[5]});
-   $display ("\t\t iq_code=%0d => iq_adjust=%0d", iq_code, iq_adjust);
+   $display ("\t\t AXE iNote \" iq_code=%0d => iq_adjust=%0d\"", iq_code, iq_adjust);
  end
 endtask
 
@@ -2098,7 +2111,7 @@
    reg [6:0] abs_diff_margin;
    reg [9:0] margin_time;
   begin
-     $display ("\t\t Release the override on rx_margin_iq by Firmware");
+     $display ("\t\t AXE iNote \" Release the override on rx_margin_iq by Firmware\"");
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2, MARGIN_IQ_OVRD_EN , 1'b0)
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2)
 
@@ -2120,7 +2133,10 @@
      margin_time = 10'd100 + {1'b0,abs_diff_margin,2'b00};
      tb.curr_rx_margin_iq = rx_margin_iq;
 
-     $display ("\t\t SOC write for the rxX_margin_iq input to walk rx_margin_iq with one code at a time");
+     $display ("\t\t AXE iNote \" SOC write for the rxX_margin_iq input to walk rx_margin_iq with one code at a time\"");
+     
+     $display("\t\t AXE iNote \" tessent_pragma verilog_insert force `DWC_C20PCIE4_X4NS_PHY0_TOP.rx0_margin_iq = 7'h%h;\"", rx_margin_iq);
+     
      force `DWC_C20PCIE4_X4NS_PHY0_TOP.rx0_margin_iq = rx_margin_iq;
      `ifndef X1
      force `DWC_C20PCIE4_X4NS_PHY0_TOP.rx1_margin_iq = rx_margin_iq;
@@ -2136,13 +2152,13 @@
      `endif//X2
      `endif//X1
 
-     $display ("\t\t Wait for a short period of time before starting the RX handshaking");
+     $display ("\t\t AXE iNote \" Wait for a short period of time before starting the RX handshaking\"");
      vec_pause (2);
 
-     $display ("\t\t Overriding rx_req to 1");
+     $display ("\t\t AXE iNote \" Overriding rx_req to 1\"");
      `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANEX,REQ,1)
 
-     $display ("\t\t Waiting for rx margin to complete...");
+     $display ("\t\t AXE iNote \" Waiting for rx margin to complete...\"");
      `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
          //for internal test
          `WAIT_RX_ACK(0,1)
@@ -2161,14 +2177,14 @@
          `endif//X1
          vec_pause (32'd1);
      `else
-        $display ("\t\t Require %0d us for the completion of rxX_margin_iq",margin_time);
+        $display ("\t\t AXE iNote \" Require %0d us for the completion of rxX_margin_iq\"",margin_time);
         vec_pause (margin_time);
      `endif
 
      read_rx_ack_rx_valid_pma (1'b1,1'b1);
      read_rx_ack_phy(1'b1);
 
-     $display ("\t\t Overriding rx_req to 0");
+     $display ("\t\t AXE iNote \" Overriding rx_req to 0\"");
      `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANEX,REQ,0)
      vec_pause (100);
      read_rx_ack_rx_valid_pma (1'b0,1'b1);
@@ -2198,23 +2214,23 @@
      end
      iq_code_2_iq_adjust(tb.iq_code, iq_adjust);
 
-     $display ("\t\t Walk IQ code to %0d (IQ adjust to %0d)", tb.iq_code, iq_adjust);
+     $display ("\t\t AXE iNote \" Walk IQ code to %0d (IQ adjust to %0d)\"", tb.iq_code, iq_adjust);
      if(ate_rxx_dfe_bypass == 1'b0)begin//data slicer
-       $display ("\t\t Override IQ code for data slicer");
+       $display ("\t\t AXE iNote \" Override IQ code for data slicer\"");
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_DATA_OVRD, VAL , iq_adjust)
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_DATA_OVRD, EN  , 1'b1     )
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_DATA_OVRD)
 
-       $display ("\t\t Clock in the code into the IQ circuit for data slicer");
+       $display ("\t\t AXE iNote \" Clock in the code into the IQ circuit for data slicer\"");
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_DATA_ADJUST_CLK, VAL , 1'b1 )
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_DATA_ADJUST_CLK)
      end else begin//bypass slicer
-       $display ("\t\t Override IQ code for bypass slicer");
+       $display ("\t\t AXE iNote \" Override IQ code for bypass slicer\"");
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_BYP_OVRD, VAL , iq_adjust )
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_BYP_OVRD, EN  , 1'b1      )
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_BYP_OVRD)
 
-       $display ("\t\t Clock in the code into the IQ circuit for bypass slicer");
+       $display ("\t\t AXE iNote \" Clock in the code into the IQ circuit for bypass slicer\"");
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_BYPASS_ADJUST_CLK, VAL , 1'b1 )
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_IQC_BYPASS_ADJUST_CLK)
      end
@@ -2241,27 +2257,27 @@
      dac_sel[3] = 5'd19; // dol
 
      // Write DAC code directly since the samping point should still remain within the data-eye
-     $display ("\t\t Enable the override for the DACs");
+     $display ("\t\t AXE iNote \" Enable the override for the DACs\"");
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_DAC_CTRL_OVRD, RX_CAL_DAC_CTRL_OVRD , 1'b1 )
      `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_DAC_CTRL_OVRD)
 
      for(int i=0; (i<4); i++)begin:WRITE_DAC_CODE
        case(i)
-         0: $display ("\t\t SOC write target DEH code based on the desired eye size");
-         1: $display ("\t\t SOC write target DEL code based on the desired eye size");
-         2: $display ("\t\t SOC write target DOH code based on the desired eye size");
-         3: $display ("\t\t SOC write target DOL code based on the desired eye size");
+         0: $display ("\t\t AXE iNote \" SOC write target DEH code based on the desired eye size\"");
+         1: $display ("\t\t AXE iNote \" SOC write target DEL code based on the desired eye size\"");
+         2: $display ("\t\t AXE iNote \" SOC write target DOH code based on the desired eye size\"");
+         3: $display ("\t\t AXE iNote \" SOC write target DOL code based on the desired eye size\"");
        endcase
 
-       $display ("\t\t Set dac_address");
+       $display ("\t\t AXE iNote \" Set dac_address\"");
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_DAC_CTRL_SEL, RX_ANA_CAL_DAC_CTRL_SEL , dac_sel[i])
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_DAC_CTRL_SEL)
 
-       $display ("\t\t Write dac_code");
+       $display ("\t\t AXE iNote \" Write dac_code\"");
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_DAC_CTRL, RX_ANA_CAL_DAC_CTRL , target_dac_code[i])
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_DAC_CTRL)
 
-       $display ("\t\t Clock in the dac code into the DAC");
+       $display ("\t\t AXE iNote \" Clock in the dac code into the DAC\"");
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_CAL_DAC_CTRL_EN, RX_ANA_CAL_DAC_CTRL_EN , 1'b1)
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_RX_ANA_CAL_DAC_CTRL_EN)
      end
@@ -2276,7 +2292,7 @@
   integer i;
   begin
     tb.res_addr[tb.res_no]=addr;
-    $display ("\t\t Store data[%0d] before the test",tb.res_no);
+    $display ("\t\t AXE iNote \" Store data[%0d](%h <= %h) before the test\"",tb.res_no,tb.res_addr[tb.res_no], tb.res_data[tb.res_no]);
     agr_test (`DWC_C20PCIE4_X4NS_ACCESS_TYPE,tb.res_addr[tb.res_no], tb.res_data[tb.res_no], tb.mask_all_zero);
 
     // Check if the data overridden by firmware or not
@@ -2294,7 +2310,7 @@
     end else if(tb.ck_res_data[i] != tb.res_data[tb.res_no])begin:EXIST_REG
       // if the register already exist, and the current read-out data don't match with the stored
       // data previously, it implies the register was overridden by firmware unexpectedly.
-      $display ("\t\t !!!ERROR - the Stored data overridden by firmware. ADDR=%h,READ_DATA=%h,EXPECTED_DATA=%h", addr, tb.res_data[tb.res_no], tb.ck_res_data[i]);
+      $display ("\t\t AXE iNote \" !!!ERROR - the Stored data overridden by firmware. ADDR=%h,READ_DATA=%h,EXPECTED_DATA=%h\"", addr, tb.res_data[tb.res_no], tb.ck_res_data[i]);
       tb.inc_error();
     end
 
@@ -2320,7 +2336,7 @@
 
     if(i == tb.res_no)begin: NOT_STORED
       // it implies the register was not stored at the beginning of the test
-      $display ("\t\t !!!ERROR - the specified register (ADDR=%h) was not stored at the beginning of the test", addr);
+      $display ("\t\t AXE iNote \" !!!ERROR - the specified register (ADDR=%h) was not stored at the beginning of the test\"", addr);
       tb.inc_error();
     end
   end
@@ -2342,7 +2358,7 @@
 
       // the same order as the one in analog tests
       j = i;
-      $display ("\t\t Restore data[%0d] after the test",j);
+      $display ("\t\t AXE iNote \" Restore data[%0d] after the test\"",j);
       asr (`DWC_C20PCIE4_X4NS_ACCESS_TYPE, tb.res_addr[j], tb.res_data[j]);
     end
 
@@ -2368,18 +2384,18 @@
   integer                  data_length = 32+`NTAPS+`MTAPS;
   begin
     dis_tag("BEGIN_TASK", "JTAG_NOCLK");
-    $display("\t\t+************************************************************************");
-    $display ("\t\t This test will read the JTAG id through the JTAG state machine         ");
-    $display ("\t\t It does not require any clocks to be present apart from JTAG clock     ");
-    $display ("\t\t The purpose of the test is to make sure the pins connected             ");
-    $display ("\t\t to the JTAG state machine are operational                              ");
-    $display("\t\t+************************************************************************");
+    $display("\t\t AXE iNote \"+************************************************************************\"");
+    $display ("\t\t AXE iNote \" This test will read the JTAG id through the JTAG state machine         \"");
+    $display ("\t\t AXE iNote \" It does not require any clocks to be present apart from JTAG clock     \"");
+    $display ("\t\t AXE iNote \" The purpose of the test is to make sure the pins connected             \"");
+    $display ("\t\t AXE iNote \" to the JTAG state machine are operational                              \"");
+    $display("\t\t AXE iNote \"+************************************************************************\"");
     tb.res_no=0;
 
-    $display ("\t\tPut a 0 on TMS to move to RTI if in TLR");
+    $display ("\t\t AXE iNote \"Put a 0 on TMS to move to RTI if in TLR\"");
     tb.jtag.reset;
 
-    $display("\t\tEnter id code into IR");
+    $display("\t\t AXE iNote \"Enter id code into IR\"");
     tb.jtag.set_ir(`DWC_C20PCIE4_X4NS_JTAG_IR_IDCODE);
 
     `ifdef DWC_C20PCIE4_X4NS_VEC_TRACE
@@ -2387,9 +2403,9 @@
     `endif
 
     // go from rti to shift-dr and read id code
-    $display ("\t\tGo to shift dr and read id code");
+    $display ("\t\t AXE iNote \"Go to shift dr and read id code\"");
     tb.jtag.set_dr(0, actual_data, data_length);
-    $display ("\t\tRead: IDCODE_HI = 16'h%h, IDCODE_LO = 16'h%h", actual_data[31+`NTAPS:16+`NTAPS], actual_data[15+`NTAPS:0+`NTAPS]);
+    $display ("\t\t AXE iNote \"Read: IDCODE_HI = 16'h%h, IDCODE_LO = 16'h%h\"", actual_data[31+`NTAPS:16+`NTAPS], actual_data[15+`NTAPS:0+`NTAPS]);
 
     `ifdef DWC_C20PCIE4_X4NS_VEC_TRACE
     tb.vec_tdo_en = 1'b0;
@@ -2405,17 +2421,17 @@
 task ate_jtag_clock_test;
   begin
     dis_tag("BEGIN_TASK", "JTAG_CLK");
-    $display ("\t\t+***********************************************************************");
-    $display ("\t\t This test will read the JTAG id through the CR registers               ");
-    $display ("\t\t This test is only used to verify that there is connectivity through the");
-    $display ("\t\t JTAG port.                                                             ");
-    $display ("\t\t+***********************************************************************");
+    $display ("\t\t AXE iNote \"+***********************************************************************\"");
+    $display ("\t\t AXE iNote \" This test will read the JTAG id through the CR registers               \"");
+    $display ("\t\t AXE iNote \" This test is only used to verify that there is connectivity through the\"");
+    $display ("\t\t AXE iNote \" JTAG port.                                                             \"");
+    $display ("\t\t AXE iNote \"+***********************************************************************\"");
     tb.res_no=0;
 
-    $display ("\t\tPut a 0 on TMS to move to RTI if in TLR");
+    $display ("\t\t AXE iNote \"Put a 0 on TMS to move to RTI if in TLR\"");
     tb.jtag.reset;
 
-    $display ("\t\tEnter CR ACCESS");
+    $display ("\t\t AXE iNote \"Enter CR ACCESS\"");
     tb.jtag.set_ir(`DWC_C20PCIE4_X4NS_JTAG_IR_CRSEL);
 
     // Check ID code
@@ -2443,13 +2459,13 @@
   integer     j;
   begin
     dis_tag("BEGIN_TASK", "REGISTER_TEST");
-    $display ("\t\t+*******************************************************************************");
-    $display ("\t\t The read/write/reset test reads and writes all testable registers of the ");
-    $display ("\t\t IP. It verifies that the registers contain the correct reset value and the");
-    $display ("\t\t registers can be written and read. Since this test checks the reset values, the");
-    $display ("\t\t device must be reset prior to this test. At the end of the test,");
-    $display ("\t\t all register are put back to their default values");
-    $display ("\t\t+*******************************************************************************");
+    $display ("\t\t AXE iNote \"+*******************************************************************************\"");
+    $display ("\t\t AXE iNote \" The read/write/reset test reads and writes all testable registers of the \"");
+    $display ("\t\t AXE iNote \" IP. It verifies that the registers contain the correct reset value and the\"");
+    $display ("\t\t AXE iNote \" registers can be written and read. Since this test checks the reset values, the\"");
+    $display ("\t\t AXE iNote \" device must be reset prior to this test. At the end of the test,\"");
+    $display ("\t\t AXE iNote \" all register are put back to their default values\"");
+    $display ("\t\t AXE iNote \"+*******************************************************************************\"");
     tb.res_no=0;
 
     // Rule1 - all registers listed on step3 should be also included on step2,
@@ -2481,10 +2497,10 @@
     `endif //X2
     `endif //X1
 
-    $display ("\t\tPut a 0 on TMS to move to RTI if in TLR");
+    $display ("\t\t AXE iNote \"Put a 0 on TMS to move to RTI if in TLR\"");
     tb.jtag.reset;
 
-    $display ("\t\tEnter CR ACCESS");
+    $display ("\t\t AXE iNote \"Enter CR ACCESS\"");
     tb.jtag.set_ir(`DWC_C20PCIE4_X4NS_JTAG_IR_CRSEL);
 
     // Set maximum error count to larger value for better debug ability.
@@ -2497,11 +2513,11 @@
 
    // JIRA P80001562-316421 - Remove register write at address 0x154 from register test
    // Test register DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT first
-    $display($time, " - Test reset value for address=%hh", `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT);
+    $display($time, " - Test reset value for address=%0xh", `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT);
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT, read_data)
     check_result (read_data,`DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT_rst," ",tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
 
-    $display($time, " - Set register to their inverse value and verify for address=%hh", `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT);
+    $display($time, " - Set register to their inverse value and verify for address=%0xh", `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT);
     mask = 16'd0;
 
    // For N33, skip the test for bit[8:7], since it is the field for overring ref_ana_pre_vreg_bypass
@@ -2517,7 +2533,7 @@
     agr_test(`DWC_C20PCIE4_X4NS_ACCESS_TYPE, `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT, read_data, tb.sel_rd_mask);
     check_result (read_data, write_data & mask," ",tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
 
-    $display($time, " - Set register to their default value and verify for address=%hh", `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT);
+    $display($time, " - Set register to their default value and verify for address=%0xh", `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT);
     write_data = `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT_rst;
     asr(`DWC_C20PCIE4_X4NS_ACCESS_TYPE, `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT, write_data & mask);
     agr_test(`DWC_C20PCIE4_X4NS_ACCESS_TYPE, `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_OUT, read_data, tb.sel_rd_mask);
@@ -2667,7 +2683,7 @@
         `ifdef DWC_C20PCIE4_X4NS_SKIP_RO_REG
           if ( read_write != 16'd0 ) begin
         `endif
-          $display("\t\t Read reset value ");
+          $display("\t\t AXE iNote \" Read reset value \"");
           agr_test(`DWC_C20PCIE4_X4NS_ACCESS_TYPE, address, reset_val, tb.sel_rd_mask);
 
           // Don't check the context portion which isn't included in regs_xN.dat
@@ -2682,7 +2698,7 @@
           #100;
         `ifdef DWC_C20PCIE4_X4NS_SKIP_RO_REG
           end else
-            $display("\t\t %h is RO Register and Reset Value Test is skipped! ", address);
+            $display("\t\t AXE iNote \" 0x%h is RO Register and Reset Value Test is skipped! \"", address);
         `endif
         end
       end
@@ -2702,7 +2718,7 @@
         (address[15:12]      == {`DWC_C20PCIE4_X4NS_CR_TYPE_RAW_PCS_MEM, `DWC_C20PCIE4_X4NS_CR_TYPE_RAW_PCS_MEM7})
        )
     ) begin
-      $display("\t\t Restore creg_rom_access_sel to default value");
+      $display("\t\t AXE iNote \" Restore creg_rom_access_sel to default value\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CREG_ACCESS_CTL, CREG_ROM_ACCESS_SEL, `DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CREG_ACCESS_CTL_rst)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CREG_ACCESS_CTL)
       access_rom = 1'b0;
@@ -2825,7 +2841,7 @@
            (address[15:12] != `DWC_C20PCIE4_X4NS_CR_TYPE_RAW_PCS_LANE_AON_BCAST                     )
         ) begin
 
-          $display("\t\t Write inverse of reset value and read back");
+          $display("\t\t AXE iNote \" Write inverse of reset value and read back\"");
           write_data = tb.sel_rd_mask;
           write_data = ~regs_val[5*i+2];
 
@@ -2841,8 +2857,8 @@
              mask[j] = 1'b1;
           end
 
-          asr(`DWC_C20PCIE4_X4NS_ACCESS_TYPE, address, (mask & write_data));
-          agr_test(`DWC_C20PCIE4_X4NS_ACCESS_TYPE, address, read_data, tb.sel_rd_mask);
+           asr(`DWC_C20PCIE4_X4NS_ACCESS_TYPE, address, (mask & write_data));
+           agr_test(`DWC_C20PCIE4_X4NS_ACCESS_TYPE, address, read_data, tb.sel_rd_mask);
 
           check_result((mask & read_data), (mask & write_data)," ",tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
           #100;
@@ -2924,7 +2940,7 @@
            (address[15:12] != `DWC_C20PCIE4_X4NS_CR_TYPE_RAW_PCS_LANE_AON_BCAST                     )
         ) begin
 
-           $display("\t\t Set register to their default value and verify");
+           $display("\t\t AXE iNote \" Set register to their default value and verify\"");
            write_data = 16'h0000;
            write_data = regs_val[5*i+2];
 
@@ -2955,13 +2971,13 @@
   string    test_desc;
   begin
     dis_tag("BEGIN_TASK", "SIMPLE_REGISTER");
-    $display ("\t\t+***********************************************************************");
-    $display ("\t\t This test performs the following to sup and lane dig and ana registers ");
-    $display ("\t\t ID code read                                                           ");
-    $display ("\t\t Write 'h5555 and readback                                        ");
-    $display ("\t\t Write all ones  and readback                                           ");
-    $display ("\t\t Write all zeros and readback                                           ");
-    $display ("\t\t+***********************************************************************");
+    $display ("\t\t AXE iNote \"+***********************************************************************\"");
+    $display ("\t\t AXE iNote \" This test performs the following to sup and lane dig and ana registers \"");
+    $display ("\t\t AXE iNote \" ID code read                                                           \"");
+    $display ("\t\t AXE iNote \" Write 'h5555 and readback                                        \"");
+    $display ("\t\t AXE iNote \" Write all ones  and readback                                           \"");
+    $display ("\t\t AXE iNote \" Write all zeros and readback                                           \"");
+    $display ("\t\t AXE iNote \"+***********************************************************************\"");
     tb.res_no=0;
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_SUP_DIG_MPLLA_DIV_CLK_OVRD_IN);
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_SUP_ANA_CREG00);
@@ -2969,10 +2985,10 @@
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG00);
 
 
-    $display ("\t\tPut a 0 on TMS to move to RTI if in TLR");
+    $display ("\t\t AXE iNote \"Put a 0 on TMS to move to RTI if in TLR\"");
     tb.jtag.reset;
 
-    $display ("\t\tEnter CR ACCESS");
+    $display ("\t\t AXE iNote \"Enter CR ACCESS\"");
     tb.jtag.set_ir(`DWC_C20PCIE4_X4NS_JTAG_IR_CRSEL);
 
     `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS, 16'hffff)
@@ -2994,7 +3010,7 @@
 
     data_w=16'd0;
     data_w[`DWC_C20PCIE4_X4NS_CR_SUP_DIG_MPLLA_DIV_CLK_OVRD_IN_size-1:0] = 16'hffff;
-    asr (`DWC_C20PCIE4_X4NS_ACCESS_TYPE,`DWC_C20PCIE4_X4NS_CR_SUP_DIG_MPLLA_DIV_CLK_OVRD_IN,data_w);
+   asr (`DWC_C20PCIE4_X4NS_ACCESS_TYPE,`DWC_C20PCIE4_X4NS_CR_SUP_DIG_MPLLA_DIV_CLK_OVRD_IN,data_w);
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_MPLLA_DIV_CLK_OVRD_IN, data)
     check_result (data, data_w,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);
 
@@ -3078,13 +3094,13 @@
     )begin \
     dis_tag("BEGIN_INTTASK", "ANA_OBSERVE", ``obsv_node``, `"``reg_type````lane_no```");\
     if(``tx_p_sel`` == 1'b1)begin\
-      $display ("\t\t Configuring to measure %0s for %0s on atb_s_p", ``obsv_node``, `"``reg_type````lane_no```") ;\
+      $display ("\t\t AXE iNote \" Configuring to measure %0s for %0s on atb_s_p\"", ``obsv_node``, `"``reg_type````lane_no```") ;\
     end else begin\
-      $display ("\t\t Configuring to measure %0s for %0s on atb_s_m", ``obsv_node``, `"``reg_type````lane_no```") ;\
+      $display ("\t\t AXE iNote \" Configuring to measure %0s for %0s on atb_s_m\"", ``obsv_node``, `"``reg_type````lane_no```") ;\
     end\
     `WR_LANE_CREG(``lane_no``, ``reg_type``, ``reg1``, ``bit1``, ``val1``)\
     read_node_thru_dac(``tx_p_sel``,{4'b0000,6'd0}, {4'b0000,6'd0});\
-    $display ("\t\t Disabling to measure %0s for %0s", ``obsv_node``, `"``reg_type````lane_no```") ;\
+    $display ("\t\t AXE iNote \" Disabling to measure %0s for %0s\"", ``obsv_node``, `"``reg_type````lane_no```") ;\
     `WR_LANE_CREG(``lane_no``, ``reg_type``, ``reg1``, ``bit1``, `DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_``reg_type``_ANA_``reg1``_rst)\
     dis_tag("END_INTTASK", "ANA_OBSERVE", ``obsv_node``, `"``reg_type````lane_no```");\
   end\
@@ -3093,13 +3109,13 @@
 `define ANA_OBSERVE_SUP(obsv_node,reg_type,reg1,bit1,val1,reg2,bit2,val2,tx_p_sel) \
   dis_tag("BEGIN_TASK", "ANALOG_OBSERVE", ``obsv_node``);\
   if(``tx_p_sel`` == 1'b1)begin\
-    $display ("\t\t Configuring to measure %0s on atb_s_p", ``obsv_node``) ;\
+    $display ("\t\t AXE iNote \" Configuring to measure %0s on atb_s_p\"", ``obsv_node``) ;\
   end else begin\
-    $display ("\t\t Configuring to measure %0s on atb_s_m", ``obsv_node``) ;\
+    $display ("\t\t AXE iNote \" Configuring to measure %0s on atb_s_m\"", ``obsv_node``) ;\
   end\
   `WR_SUP_CREG(``reg_type``,``reg1``, ``bit1``, ``val1``)\
   read_node_thru_dac(``tx_p_sel``,{4'b0000,6'd0}, {4'b0000,6'd0});\
-  $display ("\t\t Disabling to measure %0s", ``obsv_node``) ;\
+  $display ("\t\t AXE iNote \" Disabling to measure %0s\"", ``obsv_node``) ;\
   `WR_SUP_CREG(``reg_type``,``reg1``, ``bit1``, `DWC_C20PCIE4_X4NS_CR_SUP_DIG_ANA_XF_``reg_type``_ANA_``reg1``_rst)\
   dis_tag("END_TASK", "ANALOG_OBSERVE", ``obsv_node``);\
 
@@ -3126,11 +3142,11 @@
 task ate_analog_observation_test;
   begin
     dis_tag("BEGIN_INTTASK", "ANALOG_OBSERVE_ALL");
-    $display("\t\t+**********************************************************************************************");
-    $display("\t\t+ DESCRIPTION: This test provide information on Analog Nodes using on-board ADC");
-    $display("\t\t+ to measure these quantities.");
-    $display("\t\t+ The device is set-up in external loopback");
-    $display("\t\t+**********************************************************************************************");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
+    $display("\t\t AXE iNote \"+ DESCRIPTION: This test provide information on Analog Nodes using on-board ADC\"");
+    $display("\t\t AXE iNote \"+ to measure these quantities.\"");
+    $display("\t\t AXE iNote \"+ The device is set-up in external loopback\"");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
     tb.res_no=0;
 
     //SUP
@@ -3443,7 +3459,7 @@
 
 `define READ_TX_DC_LVL(lane_no, tx_p_sel) \
    begin \
-   $display (`"\t\t LANE``lane_no`` SELECTION`") ;\
+   $display (`"\t\t  LANE``lane_no`` SELECTION`") ;\
    if (``tx_p_sel`` == 1) begin\
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_TXSP, 1'b1)\
      `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_TXSM, 1'b0)\
@@ -3461,43 +3477,43 @@
    `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_TXSP    , 1'b0)\
    `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_TXSM    , 1'b0)\
    `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02)\
-   $display (`"\t\t END OF LANE``lane_no`` SELECTION`") ;\
+   $display (`"\t\t  END OF LANE``lane_no`` SELECTION`") ;\
    end \
 
 `define VOLTAGE_SWING(preset, drv, vboost_en, tx_vboost_lvl)\
   begin\
     dis_tag("BEGIN_TASK", "TX_SWING", `"``preset```", ``drv``);\
-    $display("\t\t+**********************************************************************************************");\
-    $display("\t\t+ DESCRIPTION: This test checks the DC (low frequency) TX voltage swing for each");\
-    $display("\t\t+ preset settings using a DC test. It uses the on-board ADC");\
-    $display("\t\t+ to measure these quantities.");\
-    $display("\t\t+**********************************************************************************************");\
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");\
+    $display("\t\t AXE iNote \"+ DESCRIPTION: This test checks the DC (low frequency) TX voltage swing for each\"");\
+    $display("\t\t AXE iNote \"+ preset settings using a DC test. It uses the on-board ADC\"");\
+    $display("\t\t AXE iNote \"+ to measure these quantities.\"");\
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");\
     if (``drv`` == "DRIVE1") begin\
       tx_p_sel = 1;\
-      $display ("\t\t TX_P selection");\
+      $display ("\t\t AXE iNote \" TX_P selection\"");\
     end else begin\
       tx_p_sel = 0;\
-      $display ("\t\t TX_M selection");\
+      $display ("\t\t AXE iNote \" TX_M selection\"");\
     end\
     // Disable TX LBERT\
     cfg_tx_lbert("DIS");\
     if (tx_p_sel == 1) begin\
-      $display ("\t\t Setting TX LBERT pattern to all ones");\
+      $display ("\t\t AXE iNote \" Setting TX LBERT pattern to all ones\"");\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, 10'd1023)\
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)\
     end else begin\
-      $display ("\t\t Setting TX LBERT pattern to all zeros");\
+      $display ("\t\t AXE iNote \" Setting TX LBERT pattern to all zeros\"");\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, 10'd0)\
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)\
     end\
-    $display ("\t\t Enabling TX LBERT in Fixed word (PAT0) mode");\
+    $display ("\t\t AXE iNote \" Enabling TX LBERT in Fixed word (PAT0) mode\"");\
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, MODE, `DWC_C20PCIE4_X4NS_NYQUIST_PATTERN)\
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)\
     vec_pause(1);\
-    $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post"); \
+    $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\""); \
     `CFG_EQ(`DWC_C20PCIE4_X4NS_``preset``_MAIN, `DWC_C20PCIE4_X4NS_``preset``_PRE, `DWC_C20PCIE4_X4NS_``preset``_POST)\
     if(``vboost_en`` == "VBOOST_EN")begin\
-      $display ("\t\t Overriding tx_vboost_lvl ");\
+      $display ("\t\t AXE iNote \" Overriding tx_vboost_lvl \"");\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL        , ``tx_vboost_lvl`` )\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL_OVRD_EN, 1'b1              )\
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN)\
@@ -3686,11 +3702,11 @@
 `endif
   begin
     dis_tag("BEGIN_TASK", "ADC_VOLTAGE_MEASURE");
-    $display("\t\t+**********************************************************************************************");
-    $display("\t\t+ DESCRIPTION: This test checks the DC (low frequency) TX voltage swing for the");
-    $display("\t\t+ un-boosted and boosted settings using a DC test. It uses the on-board ADC");
-    $display("\t\t+ to measure these quantities.");
-    $display("\t\t+**********************************************************************************************");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
+    $display("\t\t AXE iNote \"+ DESCRIPTION: This test checks the DC (low frequency) TX voltage swing for the\"");
+    $display("\t\t AXE iNote \"+ un-boosted and boosted settings using a DC test. It uses the on-board ADC\"");
+    $display("\t\t AXE iNote \"+ to measure these quantities.\"");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
     tb.res_no=0;
 
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL);
@@ -3725,24 +3741,24 @@
     //P80001562-168993 TX EQ PRE/MAIN/POST CREG override values should have 96 legs resolution
       for (min_vol_settings=0; min_vol_settings<2; min_vol_settings=min_vol_settings+1) begin //min_vol_settings=0 for MAX and min_vol_settings=1 for MIN
         if (min_vol_settings == 0) begin
-          $display ("\t\t test full swing") ;
-          $display ("\t\t MAX VOLTAGE SETTINGS") ;
-          $display ("\t\t force 0dB deemphasis with the VBOOST set to %0d", ate_tx_vboost_lvl_max);
-          $display ("\t\t Overriding TX EQ with 0db values");
-          $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post");
+          $display ("\t\t AXE iNote \" test full swing\"") ;
+          $display ("\t\t AXE iNote \" MAX VOLTAGE SETTINGS\"") ;
+          $display ("\t\t AXE iNote \" force 0dB deemphasis with the VBOOST set to %0d\"", ate_tx_vboost_lvl_max);
+          $display ("\t\t AXE iNote \" Overriding TX EQ with 0db values\"");
+          $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\"");
           `CFG_EQ(ate_txx_eq_main_0db, ate_txx_eq_pre_0db, ate_txx_eq_post_0db)
-          $display ("\t\t Overriding tx_vboost_lvl ");
+          $display ("\t\t AXE iNote \" Overriding tx_vboost_lvl \"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL        , ate_tx_vboost_lvl_max)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL_OVRD_EN, 1'b1                 )
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN)
         end else begin
-          $display ("\t\t test half swing") ;
-          $display ("\t\t MIN VOLTAGE SETTINGS") ;
-          $display ("\t\t force 0dB deemphasis with the VBOOST set to %0d", ate_tx_vboost_lvl_min);
-          $display ("\t\t Overriding TX EQ with MIN values");
-          $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post");
+          $display ("\t\t AXE iNote \" test half swing\"") ;
+          $display ("\t\t AXE iNote \" MIN VOLTAGE SETTINGS\"") ;
+          $display ("\t\t AXE iNote \" force 0dB deemphasis with the VBOOST set to %0d\"", ate_tx_vboost_lvl_min);
+          $display ("\t\t AXE iNote \" Overriding TX EQ with MIN values\"");
+          $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\"");
           eq_wa_1(1'b1, ate_txx_eq_main_min, ate_txx_eq_pre_min, ate_txx_eq_post_min);
-          $display ("\t\t Overriding tx_vboost_lvl ");
+          $display ("\t\t AXE iNote \" Overriding tx_vboost_lvl \"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL        , ate_tx_vboost_lvl_min)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL_OVRD_EN, 1'b1                 )
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN)
@@ -3750,29 +3766,29 @@
 
       `define TX_DC_TEST(lane_no) \
        begin \
-        $display (`"\t\t LANE``lane_no`` SELECTION`") ;\
+        $display ("\t\t LANE``lane_no`` SELECTION`") ;\
         for (pattern=0; pattern<2; pattern=pattern+1) begin\
           cfg_tx_lbert("DIS");\
           if (pattern == 1) begin\
-            $display ("\t\t Setting TX LBERT pattern to all ones");\
+            $display ("\t\t AXE iNote \" Setting TX LBERT pattern to all ones\"");\
             `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, 10'd1023)\
             `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)\
           end\
           else begin\
-            $display ("\t\t Setting TX LBERT pattern to all zeros");\
+            $display ("\t\t AXE iNote \" Setting TX LBERT pattern to all zeros\"");\
             `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, 10'd0)\
             `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)\
           end\
-          $display ("\t\t Enabling TX LBERT in Fixed word (PAT0) mode");\
+          $display ("\t\t AXE iNote \" Enabling TX LBERT in Fixed word (PAT0) mode\"");\
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, MODE, `DWC_C20PCIE4_X4NS_NYQUIST_PATTERN)\
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)\
           vec_pause(10);\
           for (tx_m_sel=0; tx_m_sel<2; tx_m_sel=tx_m_sel+1) begin\
             if (tx_m_sel == 0) begin\
-              $display ("\t\t TX_P selection");\
+              $display ("\t\t AXE iNote \" TX_P selection\"");\
             end\
             else begin\
-              $display ("\t\t TX_M selection");\
+              $display ("\t\t AXE iNote \" TX_M selection\"");\
             end\
              if (tx_m_sel == 0) begin\
                `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_TXSP, 1'b1)\
@@ -3799,7 +3815,7 @@
              `endif \
           end\
         end\
-        $display (`"\t\t END OF LANE``lane_no`` SELECTION`") ;\
+        $display (`"\t\t  END OF LANE``lane_no`` SELECTION`") ;\
        end\
 
           for (lane=0; lane<lane_max; lane=lane+1) begin
@@ -3825,49 +3841,49 @@
   `else
     for (tx_m_sel=0; tx_m_sel<2; tx_m_sel=tx_m_sel+1) begin //tx_m_sel=0 for TX_P and tx_m_sel=1 for TX_M
       if (tx_m_sel == 0) begin
-        $display ("\t\t TX_P selection");
+        $display ("\t\t AXE iNote \" TX_P selection\"");
       end
       else begin
-        $display ("\t\t TX_M selection");
+        $display ("\t\t AXE iNote \" TX_M selection\"");
       end
 
       // Disable TX/RX LBERT
       cfg_tx_lbert("DIS");
 
       if (tx_m_sel == 0) begin
-        $display ("\t\t Setting TX LBERT pattern to all ones");
+        $display ("\t\t AXE iNote \" Setting TX LBERT pattern to all ones\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, 10'd1023)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)
       end
       else begin
-        $display ("\t\t Setting TX LBERT pattern to all zeros");
+        $display ("\t\t AXE iNote \" Setting TX LBERT pattern to all zeros\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, 10'd0)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)
       end
 
-      $display ("\t\t Enabling TX LBERT in Fixed word (PAT0) mode");
+      $display ("\t\t AXE iNote \" Enabling TX LBERT in Fixed word (PAT0) mode\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, MODE, `DWC_C20PCIE4_X4NS_NYQUIST_PATTERN)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)
       vec_pause(10);
       //P80001562-168993 TX EQ PRE/MAIN/POST CREG override values should have 96 legs resolution
       for (min_vol_settings=0; min_vol_settings<2; min_vol_settings=min_vol_settings+1) begin //min_vol_settings=0 for MAX and min_vol_settings=1 for MIN
         if (min_vol_settings == 0) begin
-          $display ("\t\t MAX VOLTAGE SETTINGS") ;
-          $display ("\t\t force 0dB deemphasis with the VBOOST set to %0d", ate_tx_vboost_lvl_max);
-          $display ("\t\t Overriding TX EQ with 0db values");
-          $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post");
+          $display ("\t\t AXE iNote \" MAX VOLTAGE SETTINGS\"") ;
+          $display ("\t\t AXE iNote \" force 0dB deemphasis with the VBOOST set to %0d\"", ate_tx_vboost_lvl_max);
+          $display ("\t\t AXE iNote \" Overriding TX EQ with 0db values\"");
+          $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\"");
           eq_wa_1(1'b1, ate_txx_eq_main_0db, ate_txx_eq_pre_0db, ate_txx_eq_post_0db);
-          $display ("\t\t Overriding tx_vboost_lvl ");
+          $display ("\t\t AXE iNote \" Overriding tx_vboost_lvl \"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL        , ate_tx_vboost_lvl_max)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL_OVRD_EN, 1'b1                 )
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN)
         end else begin
-          $display ("\t\t MIN VOLTAGE SETTINGS") ;
-          $display ("\t\t force 0dB deemphasis with the VBOOST set to %0d", ate_tx_vboost_lvl_min);
-          $display ("\t\t Overriding TX EQ with MIN values");
-          $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post");
+          $display ("\t\t AXE iNote \" MIN VOLTAGE SETTINGS\"") ;
+          $display ("\t\t AXE iNote \" force 0dB deemphasis with the VBOOST set to %0d\"", ate_tx_vboost_lvl_min);
+          $display ("\t\t AXE iNote \" Overriding TX EQ with MIN values\"");
+          $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\"");
           eq_wa_1(1'b1, ate_txx_eq_main_min, ate_txx_eq_pre_min, ate_txx_eq_post_min);
-          $display ("\t\t Overriding tx_vboost_lvl ");
+          $display ("\t\t AXE iNote \" Overriding tx_vboost_lvl \"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL        , ate_tx_vboost_lvl_min)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN, TX_VBOOST_LVL_OVRD_EN, 1'b1                 )
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_LVL_OVRD_IN)
@@ -3875,7 +3891,7 @@
 
         `define TX_DC_TEST(lane_no) \
            begin \
-           $display (`"\t\t LANE``lane_no`` SELECTION`") ;\
+           $display (`"\t\t  LANE``lane_no`` SELECTION`") ;\
            if (tx_m_sel == 0) begin\
              `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_TXSP, 1'b1)\
              `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_TXSM, 1'b0)\
@@ -3899,7 +3915,7 @@
            `ifdef DWC_C20PCIE4_X4NS_ENABLE_SUP_ANA_ATB \
              cfg_sup_ana_atb(2'b10); \
            `endif \
-           $display (`"\t\t END OF LANE``lane_no`` SELECTION`") ;\
+           $display (`"\t\t  END OF LANE``lane_no`` SELECTION`") ;\
            end \
 
         for (lane=0; lane<lane_max; lane=lane+1) begin
@@ -3938,14 +3954,14 @@
   integer lane;
   begin
     dis_tag("BEGIN_TASK", "TX_VCM");
-    $display("\t\t+**********************************************************************************************");
-    $display("\t\t+ DESCRIPTION: This test checks the operation of the TX VCM voltage");
-    $display("\t\t+**********************************************************************************************");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
+    $display("\t\t AXE iNote \"+ DESCRIPTION: This test checks the operation of the TX VCM voltage\"");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
     tb.res_no=0;
 
     `define TX_VCM_TEST(lane_no) \
       begin \
-      $display (`"\t\t LANE``lane_no`` SELECTION`") ;\
+      $display (`"\t\t  LANE``lane_no`` SELECTION`") ;\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_VCM     , 1'b1)\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02, TX_ANA_ATB_S_ENABLE, 1'b1)\
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_ANA_XF_TX_ANA_CREG02)\
@@ -3962,7 +3978,7 @@
       end \
 
     for (lane=0; lane<lane_max; lane=lane+1) begin
-      $display ("\t\tConnecting VCM node of respective lane to ATB");
+      $display ("\t\t AXE iNote \"Connecting VCM node of respective lane to ATB\"");
       case (lane)
          3'b000: `TX_VCM_TEST(0)
         `ifndef X1
@@ -3993,9 +4009,9 @@
   reg            rx1_act, rx2_act, tx0_act, tx1_act, tx2_act, tx3_act;
   begin
     dis_tag("BEGIN_TASK", "TX_RX_DETECT");
-    $display("\t\t+**********************************************************************************************");
-    $display("\t\t+ DESCRIPTION: This test checks the receiver detection functionality of the PHY");
-    $display("\t\t+**********************************************************************************************");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
+    $display("\t\t AXE iNote \"+ DESCRIPTION: This test checks the receiver detection functionality of the PHY\"");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
     tb.res_no=0;
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL);
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1);
@@ -4008,12 +4024,12 @@
     // Disable TX LBERT
     cfg_tx_lbert("DIS");
 
-    $display ("\t\t Overriding tx_data_en_r");
+    $display ("\t\t AXE iNote \" Overriding tx_data_en_r\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, DATA_EN_OVRD_VAL, 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, DATA_EN_OVRD_EN , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0)
 
-    $display ("\t\t Putting the PHY in P1 state");
+    $display ("\t\t AXE iNote \" Putting the PHY in P1 state\"");
     cfg_pstate(`DWC_C20PCIE4_X4NS_ATE_P1_STATE);
     txrx_reqack_handshake(100,"GOTO_P1");
 
@@ -4021,12 +4037,12 @@
 
     for (term_en=0; term_en<2; term_en=term_en+1) begin
       if (term_en === 0) begin
-        $display ("\t\t Making sure that RX impedance is off");
+        $display ("\t\t AXE iNote \" Making sure that RX impedance is off\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_TERM_EN, 1'b0)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0)
       end
       else begin
-        $display ("\t\t Making sure that RX impedance is on");
+        $display ("\t\t AXE iNote \" Making sure that RX impedance is on\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_TERM_EN, 1'b1)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0)
       end
@@ -4038,20 +4054,29 @@
         `ifdef DWC_C20PCIE4_X4NS_ANA_NEW_FP \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx0.tx.tx_rxdet_m_result=1'b``val``; \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx0.tx.tx_rxdet_p_result=1'b``val``; \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.tx0.tx.tx_rxdet_m_result=1'b``val``;\""); \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.tx0.tx.tx_rxdet_p_result=1'b``val``;\""); \
         `else \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane0.tx.tx_rxdet_m_result=1'b``val``; \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane0.tx.tx_rxdet_p_result=1'b``val``; \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane0.tx.tx_rxdet_m_result=1'b``val``;\""); \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane0.tx.tx_rxdet_p_result=1'b``val``;\""); \
         `endif \
         end \
+       
 
       `define FORCE_TX3_RXDET(val) \
         if(tb.lane3_tx_active == 1'b1)begin \
         `ifdef DWC_C20PCIE4_X4NS_ANA_NEW_FP \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx3.tx.tx_rxdet_m_result=1'b``val``; \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx3.tx.tx_rxdet_p_result=1'b``val``; \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.tx3.tx.tx_rxdet_m_result=1'b``val``;\""); \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.tx3.tx.tx_rxdet_p_result=1'b``val``;\""); \
         `else \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane3.tx.tx_rxdet_m_result=1'b``val``; \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane3.tx.tx_rxdet_p_result=1'b``val``; \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane3.tx.tx_rxdet_m_result=1'b``val``;\""); \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane3.tx.tx_rxdet_p_result=1'b``val``;\""); \
         `endif \
         end \
 
@@ -4060,12 +4085,16 @@
         `ifdef DWC_C20PCIE4_X4NS_ANA_NEW_FP \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx``lane_no``.tx.tx_rxdet_m_result=1'b``val``; \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx``lane_no``.tx.tx_rxdet_p_result=1'b``val``; \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.tx``lane_no``.tx.tx_rxdet_m_result=1'b``val``;\""); \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.tx``lane_no``.tx.tx_rxdet_p_result=1'b``val``;\""); \
         `else \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane``lane_no``.tx.tx_rxdet_m_result=1'b``val``; \
           force `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane``lane_no``.tx.tx_rxdet_p_result=1'b``val``; \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane``lane_no``.tx.tx_rxdet_m_result=1'b``val``;\""); \
+          $display("\t\t AXE iNote \" tessent_pragma verilog_insert force TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane``lane_no``.tx.tx_rxdet_p_result=1'b``val``;\""); \
         `endif \
         end \
-
+       
 
 
       if (term_en !== 0) begin
@@ -4137,7 +4166,7 @@
       end
     `endif  //DWC_C20PCIE4_X4NS_ANA_NEW_FP
 
-      $display ("\t\t Requesting receiver detection");
+      $display ("\t\t AXE iNote \" Requesting receiver detection\"");
       `ifdef DWC_C20PCIE4_X4NS_ATE_RTL_PMA_2P0_P14_AND_AFTER
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_2, DETECT_RX_REQ_OVRD_VAL, 1'b0)
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_2, DETECT_RX_REQ_OVRD_EN , 1'b1)
@@ -4154,7 +4183,7 @@
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_1)
       `endif
 
-      $display ("\t\t Waiting for receiver detection completed...");
+      $display ("\t\t AXE iNote \" Waiting for receiver detection completed...\"");
      `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
          //for internal test
          meas_duration("START_MEAS", "RXDET");
@@ -4200,7 +4229,7 @@
          vec_pause(`DWC_C20PCIE4_X4NS_ATE_LAT_RXDET);
      `endif
 
-      $display ("\t\t Reading TX ACK");
+      $display ("\t\t AXE iNote \" Reading TX ACK\"");
       read_tx_ack_pma(1'b1);
 
       `define CHK_RXDET(lane_no,req) \
@@ -4219,7 +4248,7 @@
           check_result (data, exp_data,test_desc,tb.sel_rd_mask,`DWC_C20PCIE4_X4NS_ACCESS_TYPE);\
         end \
 
-      $display ("\t\t Reading tx_detrx_result");
+      $display ("\t\t AXE iNote \" Reading tx_detrx_result\"");
        `CHK_RXDET(0,1)
       `ifndef X1
        `CHK_RXDET(1,1)
@@ -4277,10 +4306,10 @@
       //wait for tx_ack to de-assert
       vec_pause(10);
 
-      $display ("\t\t Reading TX ACK");
+      $display ("\t\t AXE iNote \" Reading TX ACK\"");
       read_tx_ack_pma(1'b0);
 
-      $display ("\t\t Reading tx_detrx_result");
+      $display ("\t\t AXE iNote \" Reading tx_detrx_result\"");
        `CHK_RXDET(0,0)
       `ifndef X1
        `CHK_RXDET(1,0)
@@ -4315,20 +4344,31 @@
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx6.tx.tx_rxdet_p_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx7.tx.tx_rxdet_m_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.tx7.tx.tx_rxdet_p_result;
+     
             `endif //X4
           `endif //X2
         `endif //X1
     `else
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane0.tx.tx_rxdet_m_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane0.tx.tx_rxdet_p_result;
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane0.tx.tx_rxdet_m_result;\"");    
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane0.tx.tx_rxdet_p_result;\""); 
       `ifndef X1
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane1.tx.tx_rxdet_m_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane1.tx.tx_rxdet_p_result;
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane1.tx.tx_rxdet_m_result;\"");    
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane1.tx.tx_rxdet_p_result;\""); 
         `ifndef X2
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane2.tx.tx_rxdet_m_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane2.tx.tx_rxdet_p_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane3.tx.tx_rxdet_m_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane3.tx.tx_rxdet_p_result;
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane2.tx.tx_rxdet_m_result;\"");    
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane2.tx.tx_rxdet_p_result;\""); 
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane3.tx.tx_rxdet_m_result;\"");    
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane3.tx.tx_rxdet_p_result;\""); 
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane0.tx.tx_rxdet_m_result;\"");    
+    $display("\t\t AXE iNote \" tessent_pragma verilog_insert release TB.DUT_inst.u_pcie_subsys.u_pcie_phy_top.u_pcie_pipe.phy0.pma.ana.lane0.tx.tx_rxdet_p_result;\""); 
           `ifndef X4
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane4.tx.tx_rxdet_m_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane4.tx.tx_rxdet_p_result;
@@ -4338,6 +4378,7 @@
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane6.tx.tx_rxdet_p_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane7.tx.tx_rxdet_m_result;
     release `DWC_C20PCIE4_X4NS_PHY0_TOP.`pma_hier.ana.lane7.tx.tx_rxdet_p_result;
+     
           `endif //X4
         `endif //X2
       `endif //X1
@@ -4382,9 +4423,9 @@
 
 `define CHK_SIGDET_LANEX(exp_hf, exp_lf) \
     if(``exp_hf`` === 1'bx && ``exp_lf`` === 1'bx)begin\
-      $display ("\t\t Both of the HF/LF outputs are expected to be unstable, so skip checking HF/LF outputs\n"); \
+      $display ("\t\t AXE iNote \" Both of the HF/LF outputs are expected to be unstable, so skip checking HF/LF outputs\""); \
     end else begin\
-      $display ("\t\t The exp_hf = %0b, exp_lf = %0b", ``exp_hf``, ``exp_lf``); \
+      $display ("\t\t AXE iNote \" The exp_hf = %0b, exp_lf = %0b\"", ``exp_hf``, ``exp_lf``); \
        `CHK_SIGDET(0,``exp_hf``, ``exp_lf``)\
       `ifndef X1                            \
        `CHK_SIGDET(1,``exp_hf``, ``exp_lf``)\
@@ -4415,7 +4456,7 @@
   string     test_desc;
   begin
     dis_tag("BEGIN_INTTASK", "chk_lfps_data", lfps_str);
-    $display ("\t\t Received data-frequency is expected to be %0f MHz", freq);
+    $display ("\t\t AXE iNote \" Received data-frequency is expected to be %0f MHz\"", freq);
 
     up_freq = 1.05*freq;
     dn_freq = 0.95*freq;
@@ -4431,13 +4472,13 @@
   //JIRA P80001562-534053 Separate sigdet test for PCIe and USB
   if(tb.prot_in == "ATE_USB3DP20ALT" || tb.prot_in == "ATE_USB3DP14ALT" || tb.prot_in == "ATE_USB3" || tb.prot_in == "ATE_USB4" || tb.prot_in == "ATE_TB3")begin
     // lfps_filter_en == 1'b1
-    $display ("\t\t Disabling LF_EN before updating rx_sigdet_lfps_filter_en");
+    $display ("\t\t AXE iNote \" Disabling LF_EN before updating rx_sigdet_lfps_filter_en\"");
     cfg_sigdet(1'b0);
-    $display ("\t\t Enabling LFPS FILTER");
+    $display ("\t\t AXE iNote \" Enabling LFPS FILTER\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_SIGDET_IN, SIGDET_LFPS_FILTER_EN_OVRD_VAL, 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_SIGDET_IN, SIGDET_LFPS_FILTER_EN_OVRD_EN , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_SIGDET_IN)
-    $display ("\t\t Enabling LF_EN after rx_sigdet_lfps_filter_en updated");
+    $display ("\t\t AXE iNote \" Enabling LF_EN after rx_sigdet_lfps_filter_en updated\"");
     cfg_sigdet(1'b1);
 
     if (freq == 0)
@@ -4452,13 +4493,13 @@
     `CHK_SIGDET_LANEX(exp_hf,exp_lf)
   end else begin
     // lfps_filter_en == 1'b0
-    $display ("\t\t Disabling LF_EN before updating rx_sigdet_lfps_filter_en");
+    $display ("\t\t AXE iNote \" Disabling LF_EN before updating rx_sigdet_lfps_filter_en\"");
     cfg_sigdet(1'b0);
-    $display ("\t\t Disabling LFPS FILTER");
+    $display ("\t\t AXE iNote \" Disabling LFPS FILTER\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_SIGDET_IN, SIGDET_LFPS_FILTER_EN_OVRD_VAL, 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_SIGDET_IN, SIGDET_LFPS_FILTER_EN_OVRD_EN , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_RX_OVRD_SIGDET_IN)
-    $display ("\t\t Enabling LF_EN after rx_sigdet_lfps_filter_en updated");
+    $display ("\t\t AXE iNote \" Enabling LF_EN after rx_sigdet_lfps_filter_en updated\"");
     cfg_sigdet(1'b1);
 
     if (freq == 0)begin
@@ -4478,7 +4519,7 @@
 task cfg_sigdet(input lf_en=1'b1, input hf_en=1'b1, input hf_filt_dis=1'b1, input lf_filt_en=1'b0);
   begin
     dis_tag("BEGIN_INTTASK", "cfg_sigdet");
-    $display ("\t\t Overriding rx_sigdet_lf_en to %0b, rx_sigdet_hf_en to %0b, rx_sigdet_hf_filt_dis to %0b", lf_en, hf_en, hf_filt_dis);
+    $display ("\t\t AXE iNote \" Overriding rx_sigdet_lf_en to %0b, rx_sigdet_hf_en to %0b, rx_sigdet_hf_filt_dis to %0b\"", lf_en, hf_en, hf_filt_dis);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_SIGDET_LF_EN_OVRD_VAL      , lf_en      )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_SIGDET_LF_EN_OVRD_EN       , 1'b1       )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_SIGDET_HF_EN_OVRD_VAL      , hf_en      )
@@ -4514,20 +4555,20 @@
       "50MHZ_LFPS" : begin freq = 50 ; freq_str = "50MHz"   ; tb.tb_drv_elec_idle = 1'b0;end
       "500MHZ_LFPS": begin freq = 500; freq_str = "500MHz"  ; tb.tb_drv_elec_idle = 1'b0;end
       "ELEC_IDLE"  : begin freq = 0  ; freq_str = "Elecidle"; tb.tb_drv_elec_idle = 1'b1;end
-      default      : begin $display ("\t\t !!!ERROR - Sigdet Drive signal isn't supported: %0s", lfps_str); tb.inc_error();end
+      default      : begin $display ("\t\t AXE iNote \" !!!ERROR - Sigdet Drive signal isn't supported: %0s\"", lfps_str); tb.inc_error();end
     endcase
 
-    $display("\t\t+**********************************************************************************************");
-    $display("\t\t+DESCRIPTION: This test checks the functionality of SIGDET circuitry");
-    $display("\t\t+Driving %0s LFPS from external device to the RX PADS fot SigDet Functionality", freq_str);
-    $display("\t\t+**********************************************************************************************");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
+    $display("\t\t AXE iNote \"+DESCRIPTION: This test checks the functionality of SIGDET circuitry\"");
+    $display("\t\t AXE iNote \"+Driving %0s LFPS from external device to the RX PADS fot SigDet Functionality\"", freq_str);
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
 
     if(tb.tb_drv_elec_idle == 1'b0)begin
       tb.tb_ext_lfps_phase = 500.0/freq;
     end
     tb.tb_ext_lfps_en    = 1'b1;
 
-    $display ("\t\t External LFPS generater is driving %0s signal to RX pads", freq_str);
+    $display ("\t\t AXE iNote \" External LFPS generater is driving %0s signal to RX pads\"", freq_str);
 
     chk_lfps_data(lfps_str,freq);
 
@@ -4547,11 +4588,11 @@
   real       freq;
   begin
     dis_tag("BEGIN_TASK", "LFPS_DETECT", lfps_str, tb.rate_in);
-    $display("\t\t+**********************************************************************************************");
-    $display("\t\t+ DESCRIPTION: This test checks the functionality of SIGDET circuitry");
-    $display("\t\t+ PHYs built in lbert or beacoing circuit is used to trigger SIGDET circuitry");
-    $display("\t\t+ The device is set-up in external loopback");
-    $display("\t\t+**********************************************************************************************");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
+    $display("\t\t AXE iNote \"+ DESCRIPTION: This test checks the functionality of SIGDET circuitry\"");
+    $display("\t\t AXE iNote \"+ PHYs built in lbert or beacoing circuit is used to trigger SIGDET circuitry\"");
+    $display("\t\t AXE iNote \"+ The device is set-up in external loopback\"");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
 
     case (lfps_str)
       "DIV_20_16":begin
@@ -4613,22 +4654,22 @@
                       mode_str   = "Disable";
                       lbert_pat0 = 10'b0;
                   end
-      default     : begin $display ("\t\t !!!ERROR - Sigdet divN isn't supported: %0s", lfps_str); tb.inc_error();end
+      default     : begin $display ("\t\t AXE iNote \" !!!ERROR - Sigdet divN isn't supported: %0s\"", lfps_str); tb.inc_error();end
     endcase
 
     // txX_data_en will takeover if not set to zero after setting
     // TX_LBERT_CTL_MODE to 0, if top-level signal is randmoized to 1
-    $display ("\t\t Overriding tx_data_en to 0");
+    $display ("\t\t AXE iNote \" Overriding tx_data_en to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, DATA_EN_OVRD_VAL, 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, DATA_EN_OVRD_EN , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0)
 
-    $display ("\t\t Overriding TX LBERT in %0s Mode with pat0 = 10'b%0b", mode_str, lbert_pat0);
+    $display ("\t\t AXE iNote \" Overriding TX LBERT in %0s Mode with pat0 = 10'b%0b\"", mode_str, lbert_pat0);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, MODE, lbert_mode)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, lbert_pat0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)
 
-    $display ("\t\t Overriding tx_beacon_en to %0d", beacon_en);
+    $display ("\t\t AXE iNote \" Overriding tx_beacon_en to %0d\"", beacon_en);
     `define OVRD_BEACON_EN(lane_no)\
       if(tb.lane``lane_no``_tx_active == 1'b1)begin \
         tb.DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_TX_PCS_XF_OVRD_IN_1_val = tb.DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1_val;\
@@ -4652,7 +4693,7 @@
     end
 
     if(lbert_mode != `DWC_C20PCIE4_X4NS_LBERT_DISABLE)begin
-      $display ("\t\t Date-frequency is divided to %0f MHz with divisor = %0f", freq, divisor);
+      $display ("\t\t AXE iNote \" Date-frequency is divided to %0f MHz with divisor = %0f\"", freq, divisor);
     end
 
     chk_lfps_data(lfps_str,freq);
@@ -4703,16 +4744,16 @@
   integer    i;
   begin
     dis_tag("BEGIN_TASK", "RX_ADAPTATION_READOUT");
-    $display("\t\t+**********************************************************************************************");
-    $display("\t\t+ DESCRIPTION: This test read out the PHY registers to check for the PHY behavior");
-    $display("\t\t+ This is to help and understand and Debug the PHY");
-    $display("\t\t+ This Testcase does not has PASS/FAIl condition");
-    $display("\t\t+**********************************************************************************************");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
+    $display("\t\t AXE iNote \"+ DESCRIPTION: This test read out the PHY registers to check for the PHY behavior\"");
+    $display("\t\t AXE iNote \"+ This is to help and understand and Debug the PHY\"");
+    $display("\t\t AXE iNote \"+ This Testcase does not has PASS/FAIl condition\"");
+    $display("\t\t AXE iNote \"+**********************************************************************************************\"");
     tb.res_no=0;
     tb.sel_rd_mask=tb.mask_all_zero;
 
   `define READ_LANE_CREGS(lane_no)\
-    $display("\t\t  Checking Lane%0d status", ``lane_no``);\
+    $display("\t\t AXE iNote \"  Checking Lane%0d status\"", ``lane_no``);\
     // tx2rx_ser_lb_en\
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_TX_PCS_XF_LANE_OVRD_IN_0 , data)\
   if(tb.lane``lane_no``_tx_active == 1'b1)begin \
@@ -4817,7 +4858,7 @@
     end\
 
 
-    $display("\t\t  Checking configuration");
+    $display("\t\t AXE iNote \"  Checking configuration\"");
     // sram_bypass_mode, sram_ext_ld_done, sram_bootload_bypass
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SRAM_IN, data)
 
@@ -4886,7 +4927,7 @@
     // rx_data_en
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1 , data)
 
-    $display("\t\t  Checking SUP/CMN status");
+    $display("\t\t AXE iNote \"  Checking SUP/CMN status\"");
     //------------SUP/CMN-------------------------
     // ref_range, ref_clk_div2_en, ref_clk_en
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_ASIC_IN_0, data)
@@ -4952,34 +4993,34 @@
   begin
     if(prot_det_str == "PCIE_DET0")begin:PCIE_DET0
       dis_tag("BEGIN_TASK", "PCIE_DET0");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+Functional test to verify that the device is operational and");
-      $display("\t\t+PCIE EI detect 0 is functioning. The device is set-up in external loopback.");
-      $display("\t\t+Send PCIE Electrical Idle from external equipment into lane RX > 175mv and LOS/Electrical Idle should be 0 ");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+      $display("\t\t AXE iNote \"+PCIE EI detect 0 is functioning. The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+Send PCIE Electrical Idle from external equipment into lane RX > 175mv and LOS/Electrical Idle should be 0 \"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end else if (prot_det_str == "PCIE_DET1")begin:PCIE_DET1
       dis_tag("BEGIN_TASK", "PCIE_DET1");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+Functional test to verify that the device is operational and");
-      $display("\t\t+PCIE EI detect 1 is functioning. The device is set-up in external loopback.");
-      $display("\t\t+Send PCIE Electrical Idle from external equipment into lane RX < 65mv  and LOS/Electrical Idle should be 1 ");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+      $display("\t\t AXE iNote \"+PCIE EI detect 1 is functioning. The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+Send PCIE Electrical Idle from external equipment into lane RX < 65mv  and LOS/Electrical Idle should be 1 \"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end else if(prot_det_str == "SATA_DET0")begin:SATA_DET0
       dis_tag("BEGIN_TASK", "SATA_DET0");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+Functional test to verify that the device is operational and");
-      $display("\t\t+SATA SQUELCH detect 0 is functioning. The device is set-up in external loopback.");
-      $display("\t\t+Send SATA OOB from external equipment into lane RX > 200mv and Squelch should be 0 ");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+      $display("\t\t AXE iNote \"+SATA SQUELCH detect 0 is functioning. The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+Send SATA OOB from external equipment into lane RX > 200mv and Squelch should be 0 \"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end else if (prot_det_str == "SATA_DET1")begin:SATA_DET1
       dis_tag("BEGIN_TASK", "SATA_DET1");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+Functional test to verify that the device is operational and");
-      $display("\t\t+SATA SQUELCH detect 1 is functioning. The device is set-up in external loopback.");
-      $display("\t\t+Send SATA OOB from external equipment into lane RX < 75mv  and Squelch should be 1 ");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+      $display("\t\t AXE iNote \"+SATA SQUELCH detect 1 is functioning. The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+Send SATA OOB from external equipment into lane RX < 75mv  and Squelch should be 1 \"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end else begin
-      $display ("\t\t !!!ERROR - there is typo on the testname string: %0s", prot_det_str);
+      $display ("\t\t AXE iNote \" !!!ERROR - there is typo on the testname string: %0s\"", prot_det_str);
       tb.inc_error();
     end
     tb.res_no=0;
@@ -4993,12 +5034,12 @@
     cfg_tx_lbert("DIS");
     cfg_rx_lbert("DIS");
 
-    $display ("\t\t Overriding tx_data_en");
+    $display ("\t\t AXE iNote \" Overriding tx_data_en\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, DATA_EN_OVRD_VAL, 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, DATA_EN_OVRD_EN , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0)
 
-    $display ("\t\t Overriding tx_ana_data_en");
+    $display ("\t\t AXE iNote \" Overriding tx_ana_data_en\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_OVRD_OUT_0, TX_ANA_DATA_EN        , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_OVRD_OUT_0, TX_ANA_DATA_EN_OVRD_EN, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_OVRD_OUT_0)
@@ -5031,14 +5072,14 @@
     dis_tag("BEGIN_INTTASK", "restore_calib_rtune");
     ate_txx_term_ctrl_inv = ~ate_txx_term_ctrl;
     ate_rxx_term_ctrl_inv = ~ate_rxx_term_ctrl;
-    $display ("\t\t Overriding tx_term_ctrl to reverse value");
+    $display ("\t\t AXE iNote \" Overriding tx_term_ctrl to reverse value\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, MISC               , ate_txx_misc               )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, DCC_CTRL_RANGE     , ate_txx_dcc_ctrl_range     )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, DCC_BYPASS         , ate_txx_dcc_bypass         )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, TERM_CTRL          , ate_txx_term_ctrl_inv      )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1                                                  )
 
-    $display ("\t\t Overriding rx_term_ctrl to reverse value");
+    $display ("\t\t AXE iNote \" Overriding rx_term_ctrl to reverse value\"");
     `ifdef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, SIGDET_LF_THRESHOLD   , ate_rxx_sigdet_lf_threshold   )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, SIGDET_HF_THRESHOLD   , ate_rxx_sigdet_hf_threshold   )
@@ -5064,14 +5105,14 @@
     cfg_tx_lbert("DIS");
     txrx_reqack_handshake(`DWC_C20PCIE4_X4NS_ATE_LAT_RTUNE_RES,"RES_RTUNE");
 
-    $display ("\t\t Overriding tx_term_ctrl back to previous value");
+    $display ("\t\t AXE iNote \" Overriding tx_term_ctrl back to previous value\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, MISC               , ate_txx_misc               )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, DCC_CTRL_RANGE     , ate_txx_dcc_ctrl_range     )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, DCC_BYPASS         , ate_txx_dcc_bypass         )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, TERM_CTRL          , ate_txx_term_ctrl          )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1                                                  )
 
-    $display ("\t\t Overriding rx_term_ctrl back to previous value");
+    $display ("\t\t AXE iNote \" Overriding rx_term_ctrl back to previous value\"");
     `ifdef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, SIGDET_LF_THRESHOLD   , ate_rxx_sigdet_lf_threshold   )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, SIGDET_HF_THRESHOLD   , ate_rxx_sigdet_hf_threshold   )
@@ -5112,15 +5153,15 @@
       default : rtune_type_val = 2'd0;
     endcase
 
-    $display("\t\t Set tune mode to %0s", rtune_type);
+    $display("\t\t AXE iNote \" Set tune mode to %0s\"", rtune_type);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, TYPE, rtune_type_val)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
-    $display("\t\t Set tune Value to specified value - %0d, iterate through all possibilities if required", rtune_val);
+    $display("\t\t AXE iNote \" Set tune Value to specified value - %0d, iterate through all possibilities if required\"", rtune_val);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, VALUE, rtune_val)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
-    $display("\t\t Pulse SET_VAL to manually write the register specified by the TYPE field to the value in the VALUE field");
+    $display("\t\t AXE iNote \" Pulse SET_VAL to manually write the register specified by the TYPE field to the value in the VALUE field\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, SET_VAL, 1'b0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, SET_VAL, 1'b1)
@@ -5135,11 +5176,11 @@
 task ate_rx_man_comp_cal_test;
   begin
     dis_tag("BEGIN_TASK", "RX_MANUAL_COMP");
-    $display("\t\t+*************************************************************************");
-    $display("\t\t+Functional test to verify that the device is operational and");
-    $display("\t\t+RX tune values are as expected after performing manual comparator calibration.");
-    $display("\t\t+The device is set-up in external loopback.");
-    $display("\t\t+*************************************************************************");
+    $display("\t\t AXE iNote \"+*************************************************************************\"");
+    $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+    $display("\t\t AXE iNote \"+RX tune values are as expected after performing manual comparator calibration.\"");
+    $display("\t\t AXE iNote \"+The device is set-up in external loopback.\"");
+    $display("\t\t AXE iNote \"+*************************************************************************\"");
     tb.res_no=0;
 
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG);
@@ -5157,36 +5198,36 @@
   begin
     if         (dir_det_str == "DN_DRV0")begin
       dis_tag("BEGIN_INTTASK", "tx_man_comp", "DN_DRV0");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+PG is made to transmit all 0s, this would cause static 0 on TXP and static 1 on TXM");
-      $display("\t\t+TX pull-down tune values are as expected after performing manual comparator calibration.");
-      $display("\t\t+The device is set-up in external loopback.");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+PG is made to transmit all 0s, this would cause static 0 on TXP and static 1 on TXM\"");
+      $display("\t\t AXE iNote \"+TX pull-down tune values are as expected after performing manual comparator calibration.\"");
+      $display("\t\t AXE iNote \"+The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end else if(dir_det_str == "DN_DRV1")begin
       dis_tag("BEGIN_INTTASK", "tx_man_comp", "DN_DRV1");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+PG is made to transmit all 1s, this would cause static 1 on TXP and static 0 on TXM");
-      $display("\t\t+TX pull-down tune values are as expected after performing manual comparator calibration.");
-      $display("\t\t+The device is set-up in external loopback.");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+PG is made to transmit all 1s, this would cause static 1 on TXP and static 0 on TXM\"");
+      $display("\t\t AXE iNote \"+TX pull-down tune values are as expected after performing manual comparator calibration.\"");
+      $display("\t\t AXE iNote \"+The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end else if(dir_det_str == "UP_DRV0")begin
       dis_tag("BEGIN_INTTASK", "tx_man_comp", "UP_DRV0");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+PG is made to transmit all 0s, this would cause static 0 on TXP and static 1 on TXM");
-      $display("\t\t+TX pull-up tune values are as expected after performing manual comparator calibration.");
-      $display("\t\t+The device is set-up in external loopback.");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+PG is made to transmit all 0s, this would cause static 0 on TXP and static 1 on TXM\"");
+      $display("\t\t AXE iNote \"+TX pull-up tune values are as expected after performing manual comparator calibration.\"");
+      $display("\t\t AXE iNote \"+The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end else if(dir_det_str == "UP_DRV1")begin
       dis_tag("BEGIN_INTTASK", "tx_man_comp", "UP_DRV1");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+PG is made to transmit all 1s, this would cause static 1 on TXP and static 0 on TXM");
-      $display("\t\t+TX pull-up tune values are as expected after performing manual comparator calibration.");
-      $display("\t\t+The device is set-up in external loopback.");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+PG is made to transmit all 1s, this would cause static 1 on TXP and static 0 on TXM\"");
+      $display("\t\t AXE iNote \"+TX pull-up tune values are as expected after performing manual comparator calibration.\"");
+      $display("\t\t AXE iNote \"+The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end
     //P80001562-168993 TX EQ PRE/MAIN/POST CREG override values should have 96 legs resolution
-    $display ("\t\t Override 0DB de-emphasis for accurate impedance measurements");
-    $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post");
+    $display ("\t\t AXE iNote \" Override 0DB de-emphasis for accurate impedance measurements\"");
+    $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\"");
     `CFG_EQ(ate_txx_eq_main_0db, ate_txx_eq_pre_0db, ate_txx_eq_post_0db)
 
     // Disable TX/RX LBERT
@@ -5194,10 +5235,10 @@
     cfg_rx_lbert("DIS");
 
     if         (dir_det_str == "DN_DRV0" || dir_det_str == "UP_DRV0")begin
-      $display ("\t\t Enabling TX LBERT in All Zeros Pattern Mode");
+      $display ("\t\t AXE iNote \" Enabling TX LBERT in All Zeros Pattern Mode\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, 10'h0)
     end else if(dir_det_str == "DN_DRV1" || dir_det_str == "UP_DRV1")begin
-      $display ("\t\t Enabling TX LBERT in All Ones Pattern Mode");
+      $display ("\t\t AXE iNote \" Enabling TX LBERT in All Ones Pattern Mode\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0, 10'h3ff)
     end
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, MODE, 4'd9)
@@ -5211,7 +5252,7 @@
       ovrd_comp_code("TXUP", `DWC_C20PCIE4_X4NS_ATE_MAN_TXUP_COMP_CODE);
     end
 
-    $display ("\t\t The Setup is completed, and ready for measurement");
+    $display ("\t\t AXE iNote \" The Setup is completed, and ready for measurement\"");
 
     if         (dir_det_str == "DN_DRV0")begin
       dis_tag("END_INTTASK", "tx_man_comp", "DN_DRV0");
@@ -5284,56 +5325,58 @@
 
   begin
     dis_tag("BEGIN_TASK", "TX_COMP_CODE_READ");
-    $display("\t\t+*************************************************************************");
-    $display("\t\t+Functional test to verify that the device is operational and");
-    $display("\t\t+TXUP/TXDN tune values are as expected. The device is set-up in external loopback.");
-    $display("\t\t+*************************************************************************");
+    $display("\t\t AXE iNote \"+*************************************************************************\"");
+    $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+    $display("\t\t AXE iNote \"+TXUP/TXDN tune values are as expected. The device is set-up in external loopback.\"");
+    $display("\t\t AXE iNote \"+*************************************************************************\"");
     tb.res_no=0;
 
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG);
 
     // read TXUP code
-    $display("\t\t Begin to read the TXUP tune value");
-    $display("\t\t Set tune mode to TX Pull Up");
+    $display("\t\t AXE iNote \" Begin to read the TXUP tune value\"");
+    $display("\t\t AXE iNote \" Set tune mode to TX Pull Up\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, TYPE, 2'b11)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
-    $display("\t\t Reading RTUNE_STAT to make sure that within the range of 0-1023");
+    $display("\t\t AXE iNote \" Reading RTUNE_STAT to make sure that within the range of 0-1023\"");
+    $display("\t\t AXE iNote \" ATE WARNING - next read set to capture with mask of 0x3ff\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS, 16'h0)
-    `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT_STAT, 10'h3ff)
+    `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT_STAT, 10'h0)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT, data)
 
     if ((data[9:0] >= 10'h000) || (data[9:0] <= 10'h3ff)) begin
-      $display("\t\t RTUNE_STAT is within the permitted range of 0 to 1023\n");
+      $display("\t\t AXE iNote \" RTUNE_STAT is within the permitted range of 0 to 1023\"");
     end
     else begin
-      $display("\t\t !!!ERROR: RTUNE_STAT is NOT within the permitted range of 0 to 1023\n");
+      $display("\t\t AXE iNote \" !!!ERROR: RTUNE_STAT is NOT within the permitted range of 0 to 1023\"");
       tb.inc_error();
     end
 
     vec_pause(10);
 
     // read TXDN code
-    $display("\t\t Begin to read the TXDN tune value");
-    $display("\t\t Set tune mode to TX Pull Down");
+    $display("\t\t AXE iNote \" Begin to read the TXDN tune value\"");
+    $display("\t\t AXE iNote \" Set tune mode to TX Pull Down\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, TYPE, 2'b10)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
-    $display("\t\t Reading RTUNE_STAT to make sure that within the range of 0-1023");
+    $display("\t\t AXE iNote \" Reading RTUNE_STAT to make sure that within the range of 0-1023\"");
+    $display("\t\t AXE iNote \" ATE WARNING - next read set to capture with mask of 0x3ff\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS, 16'h0)
-    `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT_STAT, 10'h3ff)
+    `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT_STAT, 10'h00)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT, data)
 
     if ((data[9:0] >= 10'h000) || (data[9:0] <= 10'h3ff)) begin
-      $display("\t\t RTUNE_STAT is within the permitted range of 0 to 1023\n");
+      $display("\t\t AXE iNote \" RTUNE_STAT is within the permitted range of 0 to 1023\"");
     end
     else begin
-      $display("\t\t !!!ERROR: RTUNE_STAT is NOT within the permitted range of 0 to 1023\n");
+      $display("\t\t AXE iNote \" !!!ERROR: RTUNE_STAT is NOT within the permitted range of 0 to 1023\"");
       tb.inc_error();
     end
 
     //get rtune calibration result of TX
-     $display("\t\t Reading RTUNE TXDN and TXAVG values");
+     $display("\t\t AXE iNote \" Reading RTUNE TXDN and TXAVG values\"");
      `GET_RTUNE_VAL(TXDN,0,txdn)
      `GET_RTUNE_VAL(TXDN,1,txdn)
      `GET_RTUNE_VAL(TXDN,2,txdn)
@@ -5353,7 +5396,7 @@
 
     // check TX term code
     // P80001562-175306 Add a WA in the TX/RX_COMP_CODE_READ tasks to read the RAWLANEN_DIG_TX_CTL_TERM_CODE to check the TX/RX COMP codes
-    $display("\t\t Reading TX_TERM_CODE");
+    $display("\t\t AXE iNote \" Reading TX_TERM_CODE\"");
     `CHECK_TERM_CODE(0,TX)
     `ifndef X1
       `CHECK_TERM_CODE(1,TX)
@@ -5373,30 +5416,31 @@
     dis_tag("END_TASK", "TX_COMP_CODE_READ");
 
     dis_tag("BEGIN_TASK", "RX_COMP_CODE_READ");
-    $display("\t\t+*************************************************************************");
-    $display("\t\t+Functional test to verify that the device is operational and");
-    $display("\t\t+RX tune values are expected. The device is set-up in external loopback.");
-    $display("\t\t+*************************************************************************");
+    $display("\t\t AXE iNote \"+*************************************************************************\"");
+    $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+    $display("\t\t AXE iNote \"+RX tune values are expected. The device is set-up in external loopback.\"");
+    $display("\t\t AXE iNote \"+*************************************************************************\"");
     // read RX code
-    $display("\t\t Begin to read the RX tune value");
-    $display("\t\t Set tune mode to RX TUNE");
+    $display("\t\t AXE iNote \" Begin to read the RX tune value\"");
+    $display("\t\t AXE iNote \" Set tune mode to RX TUNE\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG, TYPE, 2'b01)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_DEBUG)
 
-    $display("\t\t Reading RTUNE_STAT to make sure that within the range of 0-63");
+    $display("\t\t AXE iNote \" Reading RTUNE_STAT to make sure that within the range of 0-63\"");
+    $display("\t\t AXE iNote \" ATE WARNING - next read set to capture with mask of 0x3ff\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS, 16'h0)
-    `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT_STAT, 10'h3ff)
+    `SET_RDMSK(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT_STAT, 10'h00)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_RTUNE_STAT, data)
 
     if ((data[9:0] >= 10'h000) || (data[9:0] <= 10'h0ff)) begin
-      $display("\t\t RTUNE_STAT is within the permitted range of 0 to 63\n");
+      $display("\t\t AXE iNote \" RTUNE_STAT is within the permitted range of 0 to 63\"");
     end else begin
-      $display("\t\t !!!ERROR: RTUNE_STAT is NOT within the permitted range of 0 to 63\n");
+      $display("\t\t AXE iNote \" !!!ERROR: RTUNE_STAT is NOT within the permitted range of 0 to 63\"");
       tb.inc_error();
     end
 
     //get rtune calibration result of RX
-    $display("\t\t Reading RTUNE RX values");
+    $display("\t\t AXE iNote \" Reading RTUNE RX values\"");
     `GET_RTUNE_VAL(RX,0,rx)
     `GET_RTUNE_VAL(RX,1,rx)
     `GET_RTUNE_VAL(RX,2,rx)
@@ -5407,7 +5451,7 @@
     `GET_RTUNE_VAL(RX,7,rx)
 
     // P80001562-175306 Add a WA in the TX/RX_COMP_CODE_READ tasks to read the RAWLANEN_DIG_TX_CTL_TERM_CODE to check the TX/RX COMP codes
-    $display("\t\t Reading RX_TERM_CODE");
+    $display("\t\t AXE iNote \" Reading RX_TERM_CODE\"");
       `CHECK_TERM_CODE(0,RX)
       `ifndef X1
          `CHECK_TERM_CODE(1,RX)
@@ -5433,11 +5477,11 @@
 `define TX_DEEMPH(preset, drv)\
   begin\
     dis_tag("BEGIN_TASK", "TX_DEEMPH", `"``preset```", ``drv``);\
-    $display("\t\t+*************************************************************************");\
-    $display("\t\t+PG is made to transmit all 1s or all 0s or low frequency pattern.");\
-    $display("\t\t+TX De-emphasis is set to configuration of interest.");\
-    $display("\t\t+TX AC amplitude is measured using PPMU i.e. pin parametric measurement unit");\
-    $display("\t\t+*************************************************************************");\
+    $display("\t\t AXE iNote \"+*************************************************************************\"");\
+    $display("\t\t AXE iNote \"+PG is made to transmit all 1s or all 0s or low frequency pattern.\"");\
+    $display("\t\t AXE iNote \"+TX De-emphasis is set to configuration of interest.\"");\
+    $display("\t\t AXE iNote \"+TX AC amplitude is measured using PPMU i.e. pin parametric measurement unit\"");\
+    $display("\t\t AXE iNote \"+*************************************************************************\"");\
     case(``drv``)\
       "DRIVE0" : begin lbert_mode = `DWC_C20PCIE4_X4NS_NYQUIST_PATTERN; lbert_pat0 = 10'h0  ; pat_str = "Static0"      ; end \
       "DRIVE1" : begin lbert_mode = `DWC_C20PCIE4_X4NS_NYQUIST_PATTERN; lbert_pat0 = 10'h3ff; pat_str = "Static1"      ; end \
@@ -5445,11 +5489,11 @@
     endcase\
     // Disable TX LBERT\
     cfg_tx_lbert("DIS");\
-    $display ("\t\t Enabling TX LBERT in %0s Pattern Mode", pat_str);\
+    $display ("\t\t AXE iNote \" Enabling TX LBERT in %0s Pattern Mode\"", pat_str);\
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0 , lbert_pat0)\
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, MODE , lbert_mode)\
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)\
-    $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post"); \
+    $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\""); \
     `CFG_EQ(`DWC_C20PCIE4_X4NS_``preset``_MAIN, `DWC_C20PCIE4_X4NS_``preset``_PRE, `DWC_C20PCIE4_X4NS_``preset``_POST)\
     vec_pause(10);\
     dis_tag("END_TASK", "TX_DEEMPH", `"``preset```", ``drv``);\
@@ -5606,24 +5650,24 @@
   begin
     if         (cfg == "DRV0")begin
       dis_tag("BEGIN_TASK", "TX_IMPEDANCE_DRIVE0");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+Functional test to verify that the device is operational and");
-      $display("\t\t+the BERTs are functioning. The device is set-up in external loopback.");
-      $display("\t\t+The BERTs are tested that they can match LFSR15 and that they can count");
-      $display("\t\t+errors At the end of BERT test PG is made to transmit all 0s.");
-      $display("\t\t+This would cause static 0 on TXP and static 1 on TXM");
-      $display("\t\t+TX differential impedance Drive0 is measured using PPMU i.e. pin parametric measurement unit");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+      $display("\t\t AXE iNote \"+the BERTs are functioning. The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+The BERTs are tested that they can match LFSR15 and that they can count\"");
+      $display("\t\t AXE iNote \"+errors At the end of BERT test PG is made to transmit all 0s.\"");
+      $display("\t\t AXE iNote \"+This would cause static 0 on TXP and static 1 on TXM\"");
+      $display("\t\t AXE iNote \"+TX differential impedance Drive0 is measured using PPMU i.e. pin parametric measurement unit\"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end else if(cfg == "DRV1")begin
       dis_tag("BEGIN_TASK", "TX_IMPEDANCE_DRIVE1");
-      $display("\t\t+*************************************************************************");
-      $display("\t\t+Functional test to verify that the device is operational and");
-      $display("\t\t+the BERTS are functioning. The device is set-up in external loopback.");
-      $display("\t\t+The berts are tested that they can match lfsr15 and that they can count");
-      $display("\t\t+errors At the end of BERT test PG is made to transmit all 1s.");
-      $display("\t\t+This would cause static 1 on TXP and static 0 on TXM");
-      $display("\t\t+TX differential impedance Drive1 is measured using PPMU i.e. pin parametric measurement unit");
-      $display("\t\t+*************************************************************************");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
+      $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+      $display("\t\t AXE iNote \"+the BERTS are functioning. The device is set-up in external loopback.\"");
+      $display("\t\t AXE iNote \"+The berts are tested that they can match lfsr15 and that they can count\"");
+      $display("\t\t AXE iNote \"+errors At the end of BERT test PG is made to transmit all 1s.\"");
+      $display("\t\t AXE iNote \"+This would cause static 1 on TXP and static 0 on TXM\"");
+      $display("\t\t AXE iNote \"+TX differential impedance Drive1 is measured using PPMU i.e. pin parametric measurement unit\"");
+      $display("\t\t AXE iNote \"+*************************************************************************\"");
     end
     tb.res_no=0;
     store_phy_status (`DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL);
@@ -5636,15 +5680,15 @@
     cfg_tx_lbert("DIS");
     cfg_rx_lbert("DIS");
     //P80001562-168993 TX EQ PRE/MAIN/POST CREG override values should have 96 legs resolution
-    $display ("\t\t Override 0DB de-emphasis for accurate impedance measurements");
-    $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post");
+    $display ("\t\t AXE iNote \" Override 0DB de-emphasis for accurate impedance measurements\"");
+    $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\"");
     `CFG_EQ(ate_txx_eq_main_0db, ate_txx_eq_pre_0db, ate_txx_eq_post_0db)
 
     if         (cfg == "DRV0")begin
-      $display ("\t\t Enabling TX LBERT in All Zeros Pattern Mode");
+      $display ("\t\t AXE iNote \" Enabling TX LBERT in All Zeros Pattern Mode\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0 , 10'h0)
     end else if(cfg == "DRV1")begin
-      $display ("\t\t Enabling TX LBERT in All Ones Pattern Mode");
+      $display ("\t\t AXE iNote \" Enabling TX LBERT in All Ones Pattern Mode\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, PAT0 , 10'h3ff)
     end
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, MODE , 4'd9   )
@@ -5733,11 +5777,11 @@
   reg is_inlb;
   begin
     dis_tag("BEGIN_INTTASK", "ate_lb_check", lpbk_in, patn_in);
-    $display("\t\t+*************************************************************************");
-    $display("\t\t+Functional test to verify that the device is operational and");
-    $display("\t\t+the BERTs are functioning. The BERTs are tested that they can match");
-    $display("\t\t+lfsr31, lfsr23_0, lfsr23_1, lfsr16, lfsr15, lfsr11, lfsr9, lfsr7, Nyquist, DCWORD, FIXED or EXTENDED as specified and that they can count errors");
-    $display("\t\t+*************************************************************************");
+    $display("\t\t AXE iNote \"+*************************************************************************\"");
+    $display("\t\t AXE iNote \"+Functional test to verify that the device is operational and\"");
+    $display("\t\t AXE iNote \"+the BERTs are functioning. The BERTs are tested that they can match\"");
+    $display("\t\t AXE iNote \"+lfsr31, lfsr23_0, lfsr23_1, lfsr16, lfsr15, lfsr11, lfsr9, lfsr7, Nyquist, DCWORD, FIXED or EXTENDED as specified and that they can count errors\"");
+    $display("\t\t AXE iNote \"+*************************************************************************\"");
     // ensure loopback mode pattern are available for ALL lpbk
     if(tb.fst_bert_done == 1'b0 || lpbk_in != tb.lpbk_in)begin
       case(lpbk_in)
@@ -5786,44 +5830,44 @@
   begin
     `define OVRD_RX_LBERT(lane_no)\
       if         (lbert_pattern == `DWC_C20PCIE4_X4NS_LBERT_DISABLE)begin\
-       $display ("\t\t Disabling rx%0s LBERT", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Disabling rx%0s LBERT\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_NYQUIST_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in Nyquist Pattern Mode", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in Nyquist Pattern Mode\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_DCWORD_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in DCWORD Pattern Mode", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in DCWORD Pattern Mode\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_FIXED_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in FIXED Pattern Mode", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in FIXED Pattern Mode\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_EXTENDED_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in EXTENDED Pattern Mode", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in EXTENDED Pattern Mode\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR31_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in LFSR31", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in LFSR31\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR23_0_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in LFSR23_0", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in LFSR23_0\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR23_1_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in LFSR23_1", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in LFSR23_1\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR16_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in LFSR16", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in LFSR16\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR15_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in LFSR15", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in LFSR15\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR11_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in LFSR11", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in LFSR11\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR9_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in LFSR9", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in LFSR9\"", `"``lane_no```");\
       end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR7_PATTERN)begin\
-       $display ("\t\t Enabling rx%0s LBERT in LFSR7", `"``lane_no```");\
+       $display ("\t\t AXE iNote \" Enabling rx%0s LBERT in LFSR7\"", `"``lane_no```");\
       end\
       if(lbert_pattern != `DWC_C20PCIE4_X4NS_LBERT_SYNC)begin\
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_RX_LBERT_CTL, MODE, lbert_pattern)\
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_RX_LBERT_CTL)\
       end\
       if(lbert_pattern != `DWC_C20PCIE4_X4NS_LBERT_DISABLE)begin\
-        $display ("\t\t Set rx%0s LBERT SYNC to 0", `"``lane_no```");\
+        $display ("\t\t AXE iNote \" Set rx%0s LBERT SYNC to 0\"", `"``lane_no```");\
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_RX_LBERT_CTL, SYNC, 1'b0)\
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_RX_LBERT_CTL)\
-        $display ("\t\t Set rx%0s LBERT SYNC to 1", `"``lane_no```");\
+        $display ("\t\t AXE iNote \" Set rx%0s LBERT SYNC to 1\"", `"``lane_no```");\
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_RX_LBERT_CTL, SYNC, 1'b1)\
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_RX_LBERT_CTL)\
-        $display ("\t\t Set rx%0s LBERT SYNC to 0", `"``lane_no```");\
+        $display ("\t\t AXE iNote \" Set rx%0s LBERT SYNC to 0\"", `"``lane_no```");\
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_RX_LBERT_CTL, SYNC, 1'b0)\
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_RX_LBERT_CTL)\
       end\
@@ -5885,15 +5929,15 @@
   reg [15:0]    exp_data;
   string    test_desc;
   begin
-    $display ("\t\t Introducing error\n");
+    $display ("\t\t AXE iNote \" Introducing error\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, TRIGGER_ERR, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL, TRIGGER_ERR, 1'b0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL)
 
-    $display ("\t\t Wait until the measure time timeout...");
+    $display ("\t\t AXE iNote \" Wait until the measure time timeout...\"");
     vec_pause(5);
-    $display ("\t\t Insert the vector pause of interest for eye measure time in ate.vec at line number %0d", tb.vec_count);
+    $display ("\t\t AXE iNote \" Insert the vector pause of interest for eye measure time in ate.vec at line number %0d\"", tb.vec_count);
     vec_pause(5);
 
 
@@ -5928,14 +5972,14 @@
     lbert_test_duration(test_duration,test_vec_cycle,patten_bit,flag);
   `define LBERT_DURATION(lane_no) \
     if (tb.lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR15_PATTERN) begin \
-      $display("\t\t %0d microseconds have run for %0s with %0d MBps baud rate for Rx lane%0s !!!", test_duration, tb.patn_in, ate_baud_rate, `"``lane_no```"); \
-      $display("\t\t The equation for BERT check duration = 1.0 * 10 * (2**%0d-1)/(%0d) !!!", patten_bit, ate_baud_rate ); \
+      $display("\t\t AXE iNote \" %0d microseconds have run for %0s with %0d MBps baud rate for Rx lane%0s !!!\"", test_duration, tb.patn_in, ate_baud_rate, `"``lane_no```"); \
+      $display("\t\t AXE iNote \" The equation for BERT check duration = 1.0 * 10 * (2**%0d-1)/(%0d) !!!\"", patten_bit, ate_baud_rate ); \
       vec_pause(test_duration); \
     end else begin \
-      $display("\t\t %0d microseconds have run for %0s with %0d MBps baud rate for Rx lane%0s !!!", 10, tb.patn_in, ate_baud_rate, `"``lane_no```"); \
+      $display("\t\t AXE iNote \" %0d microseconds have run for %0s with %0d MBps baud rate for Rx lane%0s !!!\"", 10, tb.patn_in, ate_baud_rate, `"``lane_no```"); \
       if (flag == 1'b1 ) begin \
-        $display("\t\t %0d cycles need to be added to the vector at line number %0d to reach the minimum transmission length required for %0s with %0d MBps baud rate for Rx lane%0s !!!", test_vec_cycle, tb.vec_count, tb.patn_in, ate_baud_rate, `"``lane_no```"); \
-        $display("\t\t The equation for BERT cycle added to vector to reach the minimum transmission length = (1.0 * 10 * (2**%0d-1)/(%0d) - 10) / (2*%0d) !!!", patten_bit, ate_baud_rate,`DWC_C20PCIE4_X4NS_JTAG_TCK_PHASE); \
+        $display("\t\t AXE iNote \" %0d cycles need to be added to the vector at line number %0d to reach the minimum transmission length required for %0s with %0d MBps baud rate for Rx lane%0s !!!\"", test_vec_cycle, tb.vec_count, tb.patn_in, ate_baud_rate, `"``lane_no```"); \
+        $display("\t\t AXE iNote \" The equation for BERT cycle added to vector to reach the minimum transmission length = (1.0 * 10 * (2**%0d-1)/(%0d) - 10) / (2*%0d) !!!\"", patten_bit, ate_baud_rate,`DWC_C20PCIE4_X4NS_JTAG_TCK_PHASE); \
       end \
       vec_pause(10); \
     end \
@@ -5964,7 +6008,7 @@
     `endif//X1
 
   `define OVRD_TRIGGER_ERR(lane_no)\
-    $display ("\t\t Introducing error on tx%0s\n", `"``lane_no```");\
+    $display ("\t\t AXE iNote \" Introducing error on tx%0s\"", `"``lane_no```");\
     tb.DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL_val = tb.DWC_C20PCIE4_X4NS_CR_LANEX_DIG_TX_LBERT_CTL_val;\
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL, TRIGGER_ERR, 1'b1)\
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL)\
@@ -6275,7 +6319,7 @@
                     end
     endcase
 
-    $display ("\t\t Connect rxX_p/m based on the loopback mode = %0s", lpbk_in);
+    $display ("\t\t AXE iNote \" Connect rxX_p/m based on the loopback mode = %0s\"", lpbk_in);
     tb.lpbk_in     = lpbk_in;
 
   end
@@ -6297,7 +6341,7 @@
       "DCWORD"    : tb.lbert_pattern = `DWC_C20PCIE4_X4NS_DCWORD_PATTERN;
       "FIXED"     : tb.lbert_pattern = `DWC_C20PCIE4_X4NS_FIXED_PATTERN;
       "EXTENDED"  : tb.lbert_pattern = `DWC_C20PCIE4_X4NS_EXTENDED_PATTERN;
-      default:    begin $display("\t\t !!!ERROR - the LBERT pattern = %0s isn't supported", patn_in);tb.inc_error();end
+      default:    begin $display("\t\t AXE iNote \" !!!ERROR - the LBERT pattern = %0s isn't supported\"", patn_in);tb.inc_error();end
     endcase
     tb.patn_in = patn_in;
   end
@@ -6336,7 +6380,7 @@
   reg [15:0]    data;
   string    test_desc;
   begin
-    $display ("\t\t JTAG ID READ for selective register read enabling");
+    $display ("\t\t AXE iNote \" JTAG ID READ for selective register read enabling\"");
     `SET_RDMSK(DWC_C20PCIE4_X4NS_ALL_BITS, 16'hffff)
     `READ_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_IDCODE_LO, data)
     test_desc = "JTAG IDCODE_LO is read as expected";
@@ -6367,7 +6411,7 @@
     // and hence customer isn't able to gather the tasks together to create a new sequence.
     if(skip_iq_cal == 1'b1)begin
       dis_tag("BEGIN_INTTASK", "skip_iq_calib_eyetest");
-      $display ("\t\t Override skip_rx_iq_cal_startup to 1");
+      $display ("\t\t AXE iNote \" Override skip_rx_iq_cal_startup to 1\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_STARTUP_CAL_ALGO_CTL_0, SKIP_RX_IQ_CAL_STARTUP, 1'b1)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_STARTUP_CAL_ALGO_CTL_0)
       dis_tag("END_INTTASK", "skip_iq_calib_eyetest");
@@ -6387,10 +6431,10 @@
       reset_val = 1'b0;
     end
 
-    $display ("\t\t Overriding rx_reset to %0d", reset_val);
+    $display ("\t\t AXE iNote \" Overriding rx_reset to %0d\"", reset_val);
     `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANEX,RESET,reset_val)
 
-    $display ("\t\t Overriding tx_reset to %0d", reset_val);
+    $display ("\t\t AXE iNote \" Overriding tx_reset to %0d\"", reset_val);
     `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,RESET,reset_val)
 
     dis_tag("END_INTTASK", "cfg_lanes_reset", reset_ind);
@@ -6398,18 +6442,18 @@
 
 task pwrup_act_txrx;
     dis_tag("BEGIN_INTTASK", "pwrup_act_txrx");
-    $display ("\t\t De-asserting rx_reset");
+    $display ("\t\t AXE iNote \" De-asserting rx_reset\"");
     `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANEX,RESET,0)
-    $display ("\t\t De-asserting tx_reset");
+    $display ("\t\t AXE iNote \" De-asserting tx_reset\"");
     `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,RESET,0)
     dis_tag("END_INTTASK", "pwrup_act_txrx");
 endtask
 
 task pwrup_all_txrx;
   dis_tag("BEGIN_INTTASK", "pwrup_all_txrx");
-  $display ("\t\t De-asserting rx_reset");
+  $display ("\t\t AXE iNote \" De-asserting rx_reset\"");
   `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANEX,RESET,0)
-  $display ("\t\t De-asserting tx_reset");
+  $display ("\t\t AXE iNote \" De-asserting tx_reset\"");
   `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,RESET,0)
   dis_tag("END_INTTASK", "pwrup_all_txrx");
 endtask
@@ -6418,7 +6462,7 @@
   input integer time_wait_for_pwrup_txrx;
   input string pwrup_type;
 
-  $display ("\t\t Waiting for the lanes pwrup_all_txrx completed on %0s...\n",pwrup_type);
+  $display ("\t\t AXE iNote \" Waiting for the lanes pwrup_all_txrx completed on %0s...\"",pwrup_type);
   `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
     //for internal test
     meas_duration("START_MEAS", pwrup_type);
@@ -6494,13 +6538,13 @@
     // lane0/3 start doing dcc calibrations after rate change.
     pwrup_all_txrx;
 
-    $display ("\t\t Release Override on fsm_cmd_start_r and fsm_ovrd_en_r");
+    $display ("\t\t AXE iNote \" Release Override on fsm_cmd_start_r and fsm_ovrd_en_r\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_FSM_FSM_OVRD_CTL, FSM_CMD_START, 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_FSM_FSM_OVRD_CTL, FSM_OVRD_EN  , 1'b0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_FSM_FSM_OVRD_CTL)
 
     if(tb.init_cfg_done == 1'b0)begin
-      $display ("\t\t Initial configuration done\n");
+      $display ("\t\t AXE iNote \" Initial configuration done\"");
       tb.init_cfg_done=1'b1;
     end
 endtask
@@ -6541,7 +6585,7 @@
   tb.lane2_rx_active = 1'b1;
   tb.lane3_tx_active = 1'b1;
   tb.lane3_rx_active = 1'b1;
-   $display ("\t\t Waiting for PHY power up...");
+   $display ("\t\t AXE iNote \" Waiting for PHY power up...\"");
   `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
       //for internal test
       meas_duration("START_MEAS", "STARTUP_CAL");
@@ -6606,7 +6650,7 @@
       `ifdef DWC_C20PCIE4_X4NS_FW_FAST_SIM
           tb.vec_adj_time = `DWC_C20PCIE4_X4NS_ATE_LAT_STARTUP_NORMAL / 2;
           adjust_vec_pause (tb.ate_startup_cal_time / 2, "# reading address: 16'h301a");
-          $display ("\t\t Insert the vector pause of interest for normal FW in ate.vec at line number %0d", tb.vec_count);
+          $display ("\t\t AXE iNote \" Insert the vector pause of interest for normal FW in ate.vec at line number %0d\"", tb.vec_count);
           adjust_vec_pause (tb.ate_startup_cal_time / 2, "# reading address: 16'h301a");
       `else
           adjust_vec_pause (tb.ate_startup_cal_time, "# reading address: 16'h301a");
@@ -6638,7 +6682,7 @@
 endtask
 
 task dis_cca;
-    $display ("\t\t Overriding tx_offcan_cont to 0 for 4point eye test");
+    $display ("\t\t AXE iNote \" Overriding tx_offcan_cont to 0 for 4point eye test\"");
     // override the _cont bits only since the CNTX_CFG_* have had the configuration from context
     tb.sel_wr_mask=tb.mask_all_zero;
     tb.sel_wr_mask`DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0_OFFCAN_CONT=1'b1;
@@ -6646,7 +6690,7 @@
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0)
     tb.sel_wr_mask=tb.mask_all_ones;
 
-    $display ("\t\t Overriding rx_offcan_cont and rx_adapt_cont to 0 for 4point eye test");
+    $display ("\t\t AXE iNote \" Overriding rx_offcan_cont and rx_adapt_cont to 0 for 4point eye test\"");
     tb.sel_wr_mask=tb.mask_all_zero;
     `ifdef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
     tb.sel_wr_mask`DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8_ADAPT_CONT =1'b1;
@@ -6669,34 +6713,34 @@
     // ensure the generated vectors are identical althogh the lbert pattern isn't necessary for some modes\
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL, PAT0, 10'b0)\
     if(lbert_pattern == `DWC_C20PCIE4_X4NS_LBERT_DISABLE)begin\
-      $display ("\t\t Disabling tx%0s LBERT", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Disabling tx%0s LBERT\"", `"``lane_no```");\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_NYQUIST_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in Nyquist Pattern Mode", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in Nyquist Pattern Mode\"", `"``lane_no```");\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL, PAT0, 10'b01_0101_0101)\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_DCWORD_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in DCWORD Pattern Mode", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in DCWORD Pattern Mode\"", `"``lane_no```");\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL, PAT0, 10'b01_0101_0101)\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_FIXED_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in FIXED Pattern Mode", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in FIXED Pattern Mode\"", `"``lane_no```");\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL, PAT0, 10'b01_0101_0101)\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_EXTENDED_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in EXTENDED", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in EXTENDED\"", `"``lane_no```");\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR31_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in LFSR31", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in LFSR31\"", `"``lane_no```");\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR23_0_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in LFSR23_0", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in LFSR23_0\"", `"``lane_no```");\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR23_1_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in LFSR23_1", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in LFSR23_1\"", `"``lane_no```");\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR16_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in LFSR16", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in LFSR16\"", `"``lane_no```");\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR11_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in LFSR11", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in LFSR11\"", `"``lane_no```");\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR9_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in LFSR9", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in LFSR9\"", `"``lane_no```");\
     end else if(lbert_pattern == `DWC_C20PCIE4_X4NS_LFSR7_PATTERN)begin\
-      $display ("\t\t Enabling tx%0s LBERT in LFSR7", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in LFSR7\"", `"``lane_no```");\
     end else begin\
-      $display ("\t\t Enabling tx%0s LBERT in LFSR15", `"``lane_no```");\
+      $display ("\t\t AXE iNote \" Enabling tx%0s LBERT in LFSR15\"", `"``lane_no```");\
     end\
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL, MODE, lbert_pattern)\
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANE``lane_no``_DIG_TX_LBERT_CTL)\
@@ -6764,7 +6808,7 @@
 
     dis_tag("BEGIN_INTTASK", "cfg_lane_lb_ovrd_en");
     `define OVRD_LANE_LB_OVRD_EN(lane_no)\
-      $display ("\t\t Overriding lane%0s_rx2tx_par_lb_ovrd_en to 1 and lane%0s_tx2rx_ser_lb_ovrd_en to 1",\
+      $display ("\t\t AXE iNote \" Overriding lane%0s_rx2tx_par_lb_ovrd_en to 1 and lane%0s_tx2rx_ser_lb_ovrd_en to 1\"",\
                                `"``lane_no```", `"``lane_no```");\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_TX_PCS_XF_LANE_OVRD_IN_0, LANE_RX2TX_PAR_LB_EN_OVRD_EN, 1'b1     )\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_TX_PCS_XF_LANE_OVRD_IN_0, LANE_TX2RX_SER_LB_EN_OVRD_EN, 1'b1     )\
@@ -6776,7 +6820,7 @@
 
     if(rx2tx_lb)begin
       `ifdef X1
-       $display ("\t\t !!!ERROR - ate_rx2tx_loopback_test require more than 1 lane");
+       $display ("\t\t AXE iNote \" !!!ERROR - ate_rx2tx_loopback_test require more than 1 lane\"");
        tb.inc_error();
       `else
       `OVRD_LANE_LB_OVRD_EN_RX2TX(0)
@@ -6806,7 +6850,7 @@
 
     dis_tag("BEGIN_INTTASK", "cfg_lane_lb_en_val");
     `define OVRD_LANE_LB_EN(lane_no, tx2rx_val, rx2tx_val)\
-      $display ("\t\t Overriding lane%0s_rx2tx_par_lb_en to %d and lane%0s_tx2rx_ser_lb_en to %d",\
+      $display ("\t\t AXE iNote \" Overriding lane%0s_rx2tx_par_lb_en to %d and lane%0s_tx2rx_ser_lb_en to %d\"",\
                                `"``lane_no```",``rx2tx_val``, `"``lane_no```", ``tx2rx_val``);\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_TX_PCS_XF_LANE_OVRD_IN_0, LANE_LINK_NUM               , 4'd0     )\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_TX_PCS_XF_LANE_OVRD_IN_0, LANE_RX2TX_PAR_LB_EN        , rx2tx_val)\
@@ -6818,7 +6862,7 @@
 
     if(rx2tx_lb)begin
       `ifdef X1
-       $display ("\t\t !!!ERROR - ate_rx2tx_loopback_test require more than 1 lane");
+       $display ("\t\t AXE iNote \" !!!ERROR - ate_rx2tx_loopback_test require more than 1 lane\"");
        tb.inc_error();
       `else
       `OVRD_LANE_LB_EN(0,tx2rx_val,rx2tx_val)
@@ -6853,7 +6897,7 @@
     rx2tx_lb_en_even = (tb.lb_mode      == `DWC_C20PCIE4_X4NS_RX2TX_EVEN);
     rx2tx_lb_en_odd  = (tb.lb_mode      == `DWC_C20PCIE4_X4NS_RX2TX_ODD );
     `define OVRD_LANE_LB_EN(lane_no, tx2rx_val, rx2tx_val)\
-      $display ("\t\t Overriding lane%0s_rx2tx_par_lb_en to %d and lane%0s_tx2rx_ser_lb_en to %d",\
+      $display ("\t\t AXE iNote \" Overriding lane%0s_rx2tx_par_lb_en to %d and lane%0s_tx2rx_ser_lb_en to %d\"",\
                                `"``lane_no```",``rx2tx_val``, `"``lane_no```", ``tx2rx_val``);\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_TX_PCS_XF_LANE_OVRD_IN_0, LANE_LINK_NUM               , 4'd0     )\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_TX_PCS_XF_LANE_OVRD_IN_0, LANE_RX2TX_PAR_LB_EN        , rx2tx_val)\
@@ -6873,7 +6917,7 @@
 
     if(rx2tx_lb_en_even == 1'b1 || rx2tx_lb_en_odd == 1'b1)begin
       `ifdef X1
-       $display ("\t\t !!!ERROR - ate_rx2tx_loopback_test require more than 1 lane");
+       $display ("\t\t AXE iNote \" !!!ERROR - ate_rx2tx_loopback_test require more than 1 lane\"");
        tb.inc_error();
       `else
       `OVRD_LANE_LB_EN_RX2TX(0)
@@ -6895,7 +6939,7 @@
 
     if(tb.lb_mode[3:2] == `DWC_C20PCIE4_X4NS_WAFER_SORT)begin
       int_inter_lb = (tb.lb_mode == `DWC_C20PCIE4_X4NS_ILB_INTER);
-      $display ("\t\t Overriding rx_loopback_sel");
+      $display ("\t\t AXE iNote \" Overriding rx_loopback_sel\"");
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_3, LOOPBACK_SEL        , int_inter_lb)
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_3, LOOPBACK_SEL_OVRD_EN, 1'b1        )
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_3)
@@ -6916,7 +6960,7 @@
       default             : begin tx2rx_lb_en = 1'b0; rx2tx_lb_en = 1'b0; end
     endcase
 
-    $display ("\t\t Overriding lane_rx2tx_par_lb_en and lane_tx2rx_ser_lb_en at PMA");
+    $display ("\t\t AXE iNote \" Overriding lane_rx2tx_par_lb_en and lane_tx2rx_ser_lb_en at PMA\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_LANE_OVRD_IN, LANE_RX2TX_PAR_LB, rx2tx_lb_en)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_LANE_OVRD_IN, LANE_TX2RX_SER_LB, tx2rx_lb_en)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_LANE_OVRD_IN, EN               , 1'b1       )
@@ -6940,7 +6984,7 @@
     end
 
     `define OVRD_RX_DATA_EN(lane_no)\
-      $display ("\t\t Overriding rx%0s_data_en to %0d", `"``lane_no```", rx_en);\
+      $display ("\t\t AXE iNote \" Overriding rx%0s_data_en to %0d\"", `"``lane_no```", rx_en);\
       tb.DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_PCS_XF_OVRD_IN_1_val = tb.DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1_val;\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_PCS_XF_OVRD_IN_1, DATA_EN        , rx_en)\
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_PCS_XF_OVRD_IN_1, DATA_EN_OVRD_EN, 1'b1 )\
@@ -7059,7 +7103,7 @@
       dis_tag("BEGIN_TASK", "ADAPTATION",tb.rate_in, tb.lpbk_in);
       `define WR_ADPT_REQ(lane_no, val) \
         if(tb.lane``lane_no``_rx_active == 1'b1)begin \
-          $display (`"\t\t Overriding rx``lane_no``_adapt_req to ``val```");\
+          $display (`"\t\t  Overriding rx``lane_no``_adapt_req to ``val```");\
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_PCS_XF_OVRD_IN_1, ADAPT_REQ        , ``val``)\
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANE``lane_no``_DIG_RX_PCS_XF_OVRD_IN_1, ADAPT_REQ_OVRD_EN, 1'b1   )\
           // necessary for rx2tx loopback test \
@@ -7071,7 +7115,7 @@
       `WR_ADPT_REQ(X,1'b1)
 
       // Wait for RX adaptation to complete
-      $display ("\t\t Waiting for rx adaptation to complete...");
+      $display ("\t\t AXE iNote \" Waiting for rx adaptation to complete...\"");
       `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
           //for internal test
           meas_duration("START_MEAS", "ADAPT");
@@ -7099,7 +7143,7 @@
           meas_duration("END_MEAS", "ADAPT");
           vec_pause (32'd1);
       `else
-         $display ("\t\t !!!NEED ATTENTION - adaptation time can be changing across protocols/lane number");
+         $display ("\t\t AXE iNote \" !!!NEED ATTENTION - adaptation time can be changing across protocols/lane number\"");
          get_vec_adj_time("ADAPT");
          adjust_vec_pause (tb.ate_adpt_time,"# reading address: 16'h20a6");
       `endif
@@ -7121,12 +7165,12 @@
   input [3:0] ref_range;
   begin
     `ifdef DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_CTL_0_REF_RANGE_OVRD_VAL
-       $display  ("\t\t Overriding ref_range to %0d",ref_range);
+       $display  ("\t\t AXE iNote \" Overriding ref_range to %0d\"",ref_range);
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_CTL_0, REF_RANGE_OVRD_VAL    , ref_range)
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_CTL_0, REF_RANGE_OVRD_EN     , 1'b1     )
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_CTL_0)
     `else
-       $display  ("\t\t Overriding ref_range to %0d",ref_range[2:0]);
+       $display  ("\t\t AXE iNote \" Overriding ref_range to %0d\"",ref_range[2:0]);
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_0, REF_CLK_RANGE         , ref_range[2:0])
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_0, REF_CLK_RANGE_OVRD_EN , 1'b1          )
        `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_0)
@@ -7137,12 +7181,12 @@
 task cfg_pstate;
   input [1:0] pstate;
   begin
-    $display ("\t\t Override rx_pstate to %0d", pstate);
+    $display ("\t\t AXE iNote \" Override rx_pstate to %0d\"", pstate);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, PSTATE        , pstate)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, PSTATE_OVRD_EN, 1'b1  )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1)
 
-    $display ("\t\t Override tx_pstate to %0d", pstate);
+    $display ("\t\t AXE iNote \" Override tx_pstate to %0d\"", pstate);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, PSTATE        , pstate)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, PSTATE_OVRD_EN, 1'b1  )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1)
@@ -7158,7 +7202,7 @@
       dis_tag("BEGIN_INTTASK", "cfg_mpllen", "off");
     end
 
-    $display ("\t\t Override tx_mpll_en to %0d", mpll_en);
+    $display ("\t\t AXE iNote \" Override tx_mpll_en to %0d\"", mpll_en);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, MPLL_EN        , mpll_en)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, MPLL_EN_OVRD_EN, 1'b1   )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1)
@@ -7180,14 +7224,14 @@
       end else begin
         dis_tag("BEGIN_INTTASK", "cfg_mpllb_recal_force_dis");
       end
-      $display ("\t\t Override mpllb_recal_force_en to %0d", mpll_recal_force_en);
+      $display ("\t\t AXE iNote \" Override mpllb_recal_force_en to %0d\"", mpll_recal_force_en);
     end else begin
       if(mpll_recal_force_en == 1'b1)begin
         dis_tag("BEGIN_INTTASK", "cfg_mplla_recal_force_en");
       end else begin
         dis_tag("BEGIN_INTTASK", "cfg_mplla_recal_force_dis");
       end
-      $display ("\t\t Override mplla_recal_force_en to %0d", mpll_recal_force_en);
+      $display ("\t\t AXE iNote \" Override mplla_recal_force_en to %0d\"", mpll_recal_force_en);
     end
 
     if(ate_txx_mpllb_sel == 1'b1)begin
@@ -7224,7 +7268,7 @@
       dis_tag("BEGIN_INTTASK", "cfg_rx_recal_force_dis");
     end
 
-    $display ("\t\t Override rx_recal_force_en to %0d", rx_recal_force_en);
+    $display ("\t\t AXE iNote \" Override rx_recal_force_en to %0d\"", rx_recal_force_en);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2, RECAL_FORCE_EN        , rx_recal_force_en)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2, RECAL_FORCE_EN_OVRD_EN, 1'b1             )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2)
@@ -7247,7 +7291,7 @@
       dis_tag("BEGIN_INTTASK", "cfg_tx_recal_force_dis");
     end
 
-    $display ("\t\t Override tx_recal_force_en to %0d", tx_recal_force_en);
+    $display ("\t\t AXE iNote \" Override tx_recal_force_en to %0d\"", tx_recal_force_en);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2, RECAL_FORCE_EN        , tx_recal_force_en)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2, RECAL_FORCE_EN_OVRD_EN, 1'b1             )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2)
@@ -7270,14 +7314,14 @@
         end else begin
           dis_tag("BEGIN_TASK", "cfg_mpllb_force_dis");
         end
-        $display ("\t\t Override mpllb_force_en to %0d", mpll_force_val);
+        $display ("\t\t AXE iNote \" Override mpllb_force_en to %0d\"", mpll_force_val);
       end else begin
         if(mpll_force_val == 1'b1)begin
           dis_tag("BEGIN_TASK", "cfg_mplla_force_en");
         end else begin
           dis_tag("BEGIN_TASK", "cfg_mplla_force_dis");
         end
-        $display ("\t\t Override mplla_force_en to %0d", mpll_force_val);
+        $display ("\t\t AXE iNote \" Override mplla_force_en to %0d\"", mpll_force_val);
       end
     end else begin
       if(mplla_force_en == 1'b0)begin
@@ -7286,14 +7330,14 @@
         end else begin
           dis_tag("BEGIN_INTTASK", "cfg_mpllb_force_dis");
         end
-        $display ("\t\t Override mpllb_force_en to %0d", mpll_force_val);
+        $display ("\t\t AXE iNote \" Override mpllb_force_en to %0d\"", mpll_force_val);
       end else begin
         if(mpll_force_val == 1'b1)begin
           dis_tag("BEGIN_INTTASK", "cfg_mplla_force_en");
         end else begin
           dis_tag("BEGIN_INTTASK", "cfg_mplla_force_dis");
         end
-        $display ("\t\t Override mplla_force_en to %0d", mpll_force_val);
+        $display ("\t\t AXE iNote \" Override mplla_force_en to %0d\"", mpll_force_val);
       end
     end
 
@@ -7344,14 +7388,14 @@
   input [1:0] pstate;
   begin
     if(txrx == "RX")begin
-      $display ("\t\t Override rx_pstate to %0d", pstate);
+      $display ("\t\t AXE iNote \" Override rx_pstate to %0d\"", pstate);
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, PSTATE        , pstate)
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, PSTATE_OVRD_EN, 1'b1  )
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1)
     end
 
     if(txrx == "TX")begin
-      $display ("\t\t Override tx_pstate to %0d", pstate);
+      $display ("\t\t AXE iNote \" Override tx_pstate to %0d\"", pstate);
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, PSTATE        , pstate)
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, PSTATE_OVRD_EN, 1'b1  )
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1)
@@ -7364,13 +7408,13 @@
   input txrx_reset;
   begin
     if(txrx == "RX" || txrx == "TXRX")begin
-      $display  ("\t\t Overriding rx_reset to %0d",txrx_reset);
+      $display  ("\t\t AXE iNote \" Overriding rx_reset to %0d\"",txrx_reset);
       `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANEX,RESET,txrx_reset)
       vec_pause(10);
       read_rx_ack_phy(1'b0);
     end
     if(txrx == "TX" || txrx == "TXRX")begin
-      $display  ("\t\t Overriding tx_reset to %0d",txrx_reset);
+      $display  ("\t\t AXE iNote \" Overriding tx_reset to %0d\"",txrx_reset);
       `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,RESET,txrx_reset)
       vec_pause(10);
       read_tx_ack_phy(1'b0);
@@ -7382,7 +7426,7 @@
   input string txrx;
   begin
     if(txrx == "RX" || txrx == "TXRX")begin
-      $display  ("\t\t Enable  rx_req/reset_ovrd_en to 1");
+      $display  ("\t\t AXE iNote \" Enable  rx_req/reset_ovrd_en to 1\"");
         `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANE0,REQ,0)
         `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANE0,RESET,0)
         `ifndef X1
@@ -7408,7 +7452,7 @@
 
     end
     if(txrx == "TX" || txrx == "TXRX")begin
-      $display  ("\t\t Enable  tx_req/reset_ovrd_en to 1");
+      $display  ("\t\t AXE iNote \" Enable  tx_req/reset_ovrd_en to 1\"");
         `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANE0,REQ,0)
         `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANE0,RESET,0)
         `ifndef X1
@@ -7440,13 +7484,13 @@
   input txrx_disable;
   begin
     if(txrx == "RX" || txrx == "TXRX")begin
-      $display  ("\t\t Overriding rx_disable to %0d",txrx_disable);
+      $display  ("\t\t AXE iNote \" Overriding rx_disable to %0d\"",txrx_disable);
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_DISABLE        , txrx_disable)
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_DISABLE_OVRD_EN, 1'b1)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0)
     end
     if(txrx == "TX" || txrx == "TXRX")begin
-      $display  ("\t\t Overriding tx_disable to %0d",txrx_disable);
+      $display  ("\t\t AXE iNote \" Overriding tx_disable to %0d\"",txrx_disable);
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_OVRD_IN_0, DISABLE          , txrx_disable)
       `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_OVRD_IN_0, DISABLE_OVRD_EN  , 1'b1)
       `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_OVRD_IN_0)
@@ -7457,7 +7501,7 @@
 task cfg_rx_term;
   input rx_term_en;
   begin
-    $display  ("\t\t Overriding rx_term_en to %0d",rx_term_en);
+    $display  ("\t\t AXE iNote \" Overriding rx_term_en to %0d\"",rx_term_en);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_TERM_EN        , rx_term_en)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_TERM_EN_OVRD_EN, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0)
@@ -7467,7 +7511,7 @@
 task cfg_ref_clk;
   input ref_clk_en;
   begin
-    $display  ("\t\t Overriding ref_clk_en to %0d",ref_clk_en);
+    $display  ("\t\t AXE iNote \" Overriding ref_clk_en to %0d\"",ref_clk_en);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN, REF_CLK_EN_OVRD_VAL    , ref_clk_en        )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN, REF_CLK_EN_OVRD_EN     , 1'b1              )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN)
@@ -7477,7 +7521,7 @@
 task cfg_lane_init_pwrup_done;
   input lane_init_pwrup_done;
   begin
-    $display  ("\t\t Overriding lane_init_pwrup_done to %0d",lane_init_pwrup_done);
+    $display  ("\t\t AXE iNote \" Overriding lane_init_pwrup_done to %0d\"",lane_init_pwrup_done);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_INIT_PWRUP_DONE, INIT_PWRUP_DONE, lane_init_pwrup_done)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_INIT_PWRUP_DONE)
   end
@@ -7486,7 +7530,7 @@
 task cfg_pg_reset;
   input pg_reset_en;
   begin
-    $display  ("\t\t Overriding pg_reset to %0d",pg_reset_en);
+    $display  ("\t\t AXE iNote \" Overriding pg_reset to %0d\"",pg_reset_en);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_IN, PG_RESET_OVRD_VAL , pg_reset_en )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_IN, PG_RESET_OVRD_EN  , 1'b1        )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_PG_OVRD_IN)
@@ -7499,13 +7543,13 @@
   string       disp_msg;
   begin
     dis_tag("BEGIN_INTTASK", "txrx_reqack_handshake");
-    $display ("\t\t Override rx_req to 1 at PHY");
+    $display ("\t\t AXE iNote \" Override rx_req to 1 at PHY\"");
     `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANEX,REQ,1)
 
-    $display ("\t\t Override tx_req to 1 at PHY");
+    $display ("\t\t AXE iNote \" Override tx_req to 1 at PHY\"");
     `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,REQ,1)
 
-    $display ("\t\t Waiting for tx/rx_ack asserted");
+    $display ("\t\t AXE iNote \" Waiting for tx/rx_ack asserted\"");
     `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
         //for internal test
         meas_duration("START_MEAS", chg_type);
@@ -7552,7 +7596,7 @@
         //for customer deliver
         if(chg_type == "FORCE_RECAL")begin
           disp_msg = "!!!NEED ATTENTION - rate-change time for force re-cal can be changing across ref_clk/lane number";
-          $display ("\t\t %0s",disp_msg);
+          $display ("\t\t AXE iNote \" %0s\"",disp_msg);
         end
 
         vec_pause(wtime);
@@ -7560,13 +7604,13 @@
     read_rx_ack_phy(1'b1);
     read_tx_ack_phy(1'b1);
 
-    $display ("\t\t Override rx_req to 0 at PHY");
+    $display ("\t\t AXE iNote \" Override rx_req to 0 at PHY\"");
     `WR_RAWLANE_DIG_RX_PCS_XF_OVRD_IN_0(LANEX,REQ,0)
 
-    $display ("\t\t Override tx_req to 0 at PHY");
+    $display ("\t\t AXE iNote \" Override tx_req to 0 at PHY\"");
     `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,REQ,0)
 
-    $display ("\t\t Waiting for tx/rx_ack de-asserted");
+    $display ("\t\t AXE iNote \" Waiting for tx/rx_ack de-asserted\"");
     `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
         //for internal test
         `ifdef X1
@@ -7620,10 +7664,10 @@
   input [15:0] wtime;
   input string chg_type;
   begin
-    $display ("\t\t Override tx_req to 1 at PHY");
+    $display ("\t\t AXE iNote \" Override tx_req to 1 at PHY\"");
     `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,REQ,1)
 
-    $display ("\t\t Waiting for tx_ack asserted");
+    $display ("\t\t AXE iNote \" Waiting for tx_ack asserted\"");
     `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
         //for internal test
         meas_duration("START_MEAS", chg_type);
@@ -7651,10 +7695,10 @@
     `endif
     read_tx_ack_phy(1'b1);
 
-    $display ("\t\t Override tx_req to 0 at PHY");
+    $display ("\t\t AXE iNote \" Override tx_req to 0 at PHY\"");
     `WR_RAWLANE_DIG_TX_PCS_XF_OVRD_IN_0(LANEX,REQ,0)
 
-    $display ("\t\t Waiting for tx_ack de-asserted");
+    $display ("\t\t AXE iNote \" Waiting for tx_ack de-asserted\"");
     `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
         //for internal test
          `WAIT_TX_ACK(0,0)
@@ -7684,13 +7728,13 @@
 task tx_reqack_handshake_pma;
   input [15:0] wtime;
   begin
-    $display ("\t\t Overriding tx_req to 1 at PMA");
+    $display ("\t\t AXE iNote \" Overriding tx_req to 1 at PMA\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, REQ_OVRD_VAL, 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, REQ_OVRD_EN , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0)
 
 
-    $display ("\t\t Waiting for tx_ack asserted");
+    $display ("\t\t AXE iNote \" Waiting for tx_ack asserted\"");
     `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
         //for internal test
         `define WAIT_TX_ACK_PMA(lane_no,exp_val) \
@@ -7719,12 +7763,12 @@
     `endif
     read_tx_ack_pma(1'b1);
 
-    $display ("\t\t Overriding tx_req to 0 at PMA");
+    $display ("\t\t AXE iNote \" Overriding tx_req to 0 at PMA\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, REQ_OVRD_VAL, 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, REQ_OVRD_EN , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0)
 
-    $display ("\t\t Waiting for tx_ack de-asserted");
+    $display ("\t\t AXE iNote \" Waiting for tx_ack de-asserted\"");
     `ifndef DWC_C20PCIE4_X4NS_VEC_TRACE
         //for internal test
          `WAIT_TX_ACK_PMA(0,0)
@@ -7751,7 +7795,7 @@
     // Release the override on tx_req at PMA-level.  it is because firmware will perform TX DCC
     // for the rx2tx loopback mode, and tx_req/ack handshake on PHY-level can be blocked by the
     // override on PMA-level
-    $display ("\t\t Release the override on tx_req at PMA level");
+    $display ("\t\t AXE iNote \" Release the override on tx_req at PMA level\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, REQ_OVRD_EN , 1'b0)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0)
   end
@@ -7760,7 +7804,7 @@
 task cfg_txrate_pma;
   input [2:0] tx_rate;
   begin
-    $display ("\t\t Overriding tx_rate_r");
+    $display ("\t\t AXE iNote \" Overriding tx_rate_r\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_1, RATE_OVRD_VAL, tx_rate)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_1, RATE_OVRD_EN , 1'b1   )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_1)
@@ -7770,7 +7814,7 @@
 task cfg_txpstate_pma;
   input [1:0] tx_pstate;
   begin
-    $display ("\t\t Overriding tx_pstate at PMA");
+    $display ("\t\t AXE iNote \" Overriding tx_pstate at PMA\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, PSTATE_OVRD_VAL, tx_pstate)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0, PSTATE_OVRD_EN , 1'b1     )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ASIC_TX_OVRD_IN_0)
@@ -7848,9 +7892,9 @@
     check_jtag_idcode;
 
     // ===============================================================CMN_STATIC=================================================================
-    $display ("\t\t Overriding mpll_recal_force_en to 0");
+    $display ("\t\t AXE iNote \" Overriding mpll_recal_force_en to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLL_RECAL_BANK_OVRD, MPLLA_RECAL_FORCE_EN_OVRD_VAL, 1'b0)
-    $display ("\t\t Overriding mpll_recal_skip_en to based on configuration");
+    $display ("\t\t AXE iNote \" Overriding mpll_recal_skip_en to based on configuration\"");
     if(tb.prot_in == "ATE_MPHY4" || tb.prot_in == "ATE_MPHY5" || tb.prot_in == "ATE_MPHY5LPBW")begin
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLL_RECAL_BANK_OVRD, MPLLA_RECAL_SKIP_EN_OVRD_VAL , ate_mplla_na)
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLL_RECAL_BANK_OVRD, MPLLB_RECAL_SKIP_EN_OVRD_VAL , ate_mpllb_na)
@@ -7859,7 +7903,7 @@
        `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLL_RECAL_BANK_OVRD, MPLLB_RECAL_SKIP_EN_OVRD_VAL , 1'b0)
     end
 
-    $display ("\t\t Overriding mpll_recal_bank_sel to based on configuration");
+    $display ("\t\t AXE iNote \" Overriding mpll_recal_bank_sel to based on configuration\"");
     // config bank1 for MPHY4/5 RATE B, else config bank 0
     if(tb.prot_in == "ATE_MPHY4" || tb.prot_in == "ATE_MPHY5" || tb.prot_in == "ATE_MPHY5LPBW")begin
        if(tb.rate_in == "ATE_MPHY5_G1BR0" || tb.rate_in == "ATE_MPHY5_G1BR1" ||
@@ -7890,7 +7934,7 @@
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLL_RECAL_BANK_OVRD)
 
     // Set mpll?_cntx_sel to 0 and mpll?_init_cal_disable to 1'b1 if mpll? isn't available on the image
-    $display ("\t\t Overriding mplla_init_cal_disable to %0d, mpllb_init_cal_disable to %0d, rtune_req to 0",
+    $display ("\t\t AXE iNote \" Overriding mplla_init_cal_disable to %0d, mpllb_init_cal_disable to %0d, rtune_req to 0\"",
                                ate_mplla_na,ate_mpllb_na);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CMN_CTL_1, MPLLA_INIT_CAL_DISABLE        , ate_mplla_na)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CMN_CTL_1, MPLLB_INIT_CAL_DISABLE        , ate_mpllb_na)
@@ -7901,7 +7945,7 @@
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CMN_CTL_1, RTUNE_REQ_OVRD_EN             , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CMN_CTL_1)
 
-    $display ("\t\t Overriding mplla_force_en, mpllb_force_en, ref_repeat_clk_en to 0, ref_clk_en to %0d", ref_clk_en_val);
+    $display ("\t\t AXE iNote \" Overriding mplla_force_en, mpllb_force_en, ref_repeat_clk_en to 0, ref_clk_en to %0d\"", ref_clk_en_val);
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN, MPLLA_FORCE_EN_OVRD_VAL    , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN, MPLLA_FORCE_EN_OVRD_EN     , 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN, MPLLB_FORCE_EN_OVRD_VAL    , 1'b0)
@@ -7912,12 +7956,12 @@
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN, REF_CLK_EN_OVRD_EN         , 1'b1          )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_AON_SUP_OVRD_IN)
 
-    $display ("\t\t Overriding bg_en_r to 1");
+    $display ("\t\t AXE iNote \" Overriding bg_en_r to 1\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_0, BG_EN        , 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_0, BG_EN_OVRD_EN, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_0)
 
-    $display ("\t\t Overriding ref_clkdet_en_r to 0");
+    $display ("\t\t AXE iNote \" Overriding ref_clkdet_en_r to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_1, REF_CLKDET_EN        , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_1, REF_CLKDET_EN_OVRD_EN, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_SUP_DIG_REFCLK_OVRD_IN_1)
@@ -7926,7 +7970,7 @@
     `ifndef DWC_C20PCIE4_X4NS_ATE_MULT_PHY
     // Note that the overrides below should be removed and res_req/ack_in/out should connected
     // appropriatly for multiple-phys scenario
-    $display ("\t\t Get access to external resistor");
+    $display ("\t\t AXE iNote \" Get access to external resistor\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_SUP_OVRD_IN_0, RES_ACK_IN , 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_SUP_OVRD_IN_0, RES_REQ_IN , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_SUP_DIG_SUP_OVRD_IN_0, RES_OVRD_EN, 1'b1)
@@ -7934,9 +7978,9 @@
     `endif
 
     // ===============================================================TX_STATIC=================================================================
-    $display ("\t\t Overriding tx_lpd, tx_data_en, tx_invert, tx_beacon_en to 0");
-    $display ("\t\t Overriding tx_clk_rdy, tx_mpll_en to 1");
-    $display ("\t\t Overriding tx_pstate to P1");
+    $display ("\t\t AXE iNote \" Overriding tx_lpd, tx_data_en, tx_invert, tx_beacon_en to 0\"");
+    $display ("\t\t AXE iNote \" Overriding tx_clk_rdy, tx_mpll_en to 1\"");
+    $display ("\t\t AXE iNote \" Overriding tx_pstate to P1\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, PSTATE           , `DWC_C20PCIE4_X4NS_ATE_P1_STATE)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, PSTATE_OVRD_EN   , 1'b1                )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, LPD              , 1'b0                )
@@ -7953,23 +7997,23 @@
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1, MPLL_EN_OVRD_EN  , 1'b1                )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_1)
 
-    $display ("\t\t Overriding tx_disable to 0");
+    $display ("\t\t AXE iNote \" Overriding tx_disable to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_OVRD_IN_0, DISABLE          , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_OVRD_IN_0, DISABLE_OVRD_EN  , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_OVRD_IN_0)
 
-    $display ("\t\t Overriding lane_link_num to 0");
+    $display ("\t\t AXE iNote \" Overriding lane_link_num to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_LANE_OVRD_IN_0, LANE_LINK_NUM        , 4'd0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_LANE_OVRD_IN_0, LANE_LINK_NUM_OVRD_EN, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_LANE_OVRD_IN_0)
 
-    $display ("\t\t Overriding tx_hp_prot_en to 0");
+    $display ("\t\t AXE iNote \" Overriding tx_hp_prot_en to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_TX_HP_PROT_EN_OVRD_IN, TX_HP_PROT_EN        , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_TX_HP_PROT_EN_OVRD_IN, TX_HP_PROT_EN_OVRD_EN, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_TX_TX_HP_PROT_EN_OVRD_IN)
 
-    $display ("\t\t Overriding tx_detrx_req, tx_recal_force_en, tx_recal_skip_en to 0");
-    $display ("\t\t Overriding tx_master_mplla_state, tx_master_mpllb_state, tx_lane2lane_dskw_en to 1");
+    $display ("\t\t AXE iNote \" Overriding tx_detrx_req, tx_recal_force_en, tx_recal_skip_en to 0\"");
+    $display ("\t\t AXE iNote \" Overriding tx_master_mplla_state, tx_master_mpllb_state, tx_lane2lane_dskw_en to 1\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2, MASTER_MPLLA_STATE        , 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2, MASTER_MPLLA_STATE_OVRD_EN, 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2, MASTER_MPLLB_STATE        , 1'b1)
@@ -7984,20 +8028,20 @@
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2, RECAL_SKIP_EN_OVRD_EN     , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2)
 
-    $display ("\t\t Overriding tx_req to 0");
+    $display ("\t\t AXE iNote \" Overriding tx_req to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_0, REQ          , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_0, REQ_OVRD_EN  , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_0)
 
 
     // ===============================================================RX_STATIC=================================================================
-    $display ("\t\t Overriding rx_req to 0");
+    $display ("\t\t AXE iNote \" Overriding rx_req to 0\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_0, REQ          , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_0, REQ_OVRD_EN  , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_0)
 
-    $display ("\t\t Overriding rx_lpd, rx_invert, rx_adapt_req, rx_adapt_in_prog, rx_data_en to 0");
-    $display ("\t\t Overriding rx_pstate to P1");
+    $display ("\t\t AXE iNote \" Overriding rx_lpd, rx_invert, rx_adapt_req, rx_adapt_in_prog, rx_data_en to 0\"");
+    $display ("\t\t AXE iNote \" Overriding rx_pstate to P1\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, PSTATE               , `DWC_C20PCIE4_X4NS_ATE_P1_STATE)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, PSTATE_OVRD_EN       , 1'b1                )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, LPD                  , 1'b0                )
@@ -8014,11 +8058,11 @@
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, INVERT_OVRD_EN       , 1'b1                )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1)
 
-    $display ("\t\t Clear the rx_adapt_dis IRQ to prevent rx_ack assertion after initial power-up sequence completed");
+    $display ("\t\t AXE iNote \" Clear the rx_adapt_dis IRQ to prevent rx_ack assertion after initial power-up sequence completed\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_IRQ_CTL_RX_ADAPT_DIS_IRQ_CLR, RX_ADAPT_DIS_IRQ_CLR, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_IRQ_CTL_RX_ADAPT_DIS_IRQ_CLR)
 
-    $display ("\t\t Override rx_margin_vdac and rx_recal_bank_sel to 0");
+    $display ("\t\t AXE iNote \" Override rx_margin_vdac and rx_recal_bank_sel to 0\"");
     // config bank1 for MPHY4/5 RATE B, else config bank 0
     if(tb.prot_in == "ATE_MPHY4" || tb.prot_in == "ATE_MPHY5" || tb.prot_in == "ATE_MPHY5LPBW")begin
        if(tb.rate_in == "ATE_MPHY5_G1BR0" || tb.rate_in == "ATE_MPHY5_G1BR1" ||
@@ -8041,7 +8085,7 @@
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_3, MARGIN_VDAC_OVRD_EN   , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_3)
 
-    $display ("\t\t Override rx_recal_skip_en, rx_recal_force_en, rx_margin_iq, rx_margin_in_prog, rx_margin_error_clear to 0 ");
+    $display ("\t\t AXE iNote \" Override rx_recal_skip_en, rx_recal_force_en, rx_margin_iq, rx_margin_in_prog, rx_margin_error_clear to 0 \"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2, MARGIN_IQ                 , 7'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2, MARGIN_IQ_OVRD_EN         , 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2, MARGIN_IN_PROG            , 1'b0)
@@ -8054,8 +8098,8 @@
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2, RECAL_SKIP_EN_OVRD_EN     , 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_2)
 
-    $display ("\t\t Overriding rx_disable to 0");
-    $display ("\t\t Overriding rx_term_en, rx_sigdet_lf_en, rx_sigdet_hf_filt_dis to 1");
+    $display ("\t\t AXE iNote \" Overriding rx_disable to 0\"");
+    $display ("\t\t AXE iNote \" Overriding rx_term_en, rx_sigdet_lf_en, rx_sigdet_hf_filt_dis to 1\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_DISABLE                    , 1'b0)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_DISABLE_OVRD_EN            , 1'b1)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_TERM_EN                    , 1'b1)
@@ -8119,67 +8163,67 @@
         end
     end
     // ===============================================================CNTX_SEL=================================================================
-    $display ("\t\t Overriding cmn_cntx_sel");
+    $display ("\t\t AXE iNote \" Overriding cmn_cntx_sel\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_0   , CMN_CNTX_SEL          , cmn_cntx_sel   )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_0   , CMN_CNTX_SEL_OVRD_EN  , 1'b1           )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_0                                            )
 
-    $display ("\t\t Overriding mplla_cntx_sel") ;
+    $display ("\t\t AXE iNote \" Overriding mplla_cntx_sel\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_1   , MPLLA_CNTX_SEL        , mplla_cntx_sel )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_1   , MPLLA_CNTX_SEL_OVRD_EN, 1'b1           )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_1                                            )
 
-    $display ("\t\t Overriding mpllb_cntx_sel") ;
+    $display ("\t\t AXE iNote \" Overriding mpllb_cntx_sel\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_2   , MPLLB_CNTX_SEL        , mpllb_cntx_sel )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_2   , MPLLB_CNTX_SEL_OVRD_EN, 1'b1           )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CNTX_SEL_OVRD_IN_2                                            )
 
-    $display ("\t\t Overriding tx_cntx_sel") ;
+    $display ("\t\t AXE iNote \" Overriding tx_cntx_sel\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_3, CNTX_SEL              , txx_cntx_sel   )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_3, CNTX_SEL_OVRD_EN      , 1'b1           )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_3                                         )
 
-    $display ("\t\t Overriding rx_cntx_sel") ;
+    $display ("\t\t AXE iNote \" Overriding rx_cntx_sel\"") ;
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_4, CNTX_SEL              , rxx_cntx_sel   )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_4, CNTX_SEL_OVRD_EN      , 1'b1           )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_4                                         )
     if(tb.prot_in == "ATE_HDMI" || cntx_res_bypass == 1'b1)begin
         // CMN CFG
-        $display ("\t\t Overriding cmn_cntx_cfg_0") ;
+        $display ("\t\t AXE iNote \" Overriding cmn_cntx_cfg_0\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_0   , SUP_MISC                 , ate_sup_misc                       )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_0   , TX_VBOOST_LVL            , ate_tx_vboost_lvl                  )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_0                                                                   )
-        $display ("\t\t Overriding cmn_cntx_cfg_1") ;
+        $display ("\t\t AXE iNote \" Overriding cmn_cntx_cfg_1\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_1   , RX_VREF_CTRL             , ate_rx_vref_ctrl                   )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_1   , TXDN_TERM_OFFSET         , ate_txdn_term_offset               )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_1                                                                   )
-        $display ("\t\t Overriding cmn_cntx_cfg_2") ;
+        $display ("\t\t AXE iNote \" Overriding cmn_cntx_cfg_2\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_2   , RX_TERM_OFFSET           , ate_rx_term_offset                 )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_2   , TXUP_TERM_OFFSET         , ate_txup_term_offset               )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_2                                                                   )
 
         `ifdef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_1P4
-            $display ("\t\t Overriding cmn_cntx_cfg_3") ;
+            $display ("\t\t AXE iNote \" Overriding cmn_cntx_cfg_3\"") ;
             `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_3   , FW_SUP_MISC              , ate_fw_sup_misc                    )
             `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_3                                                                   )
-            $display ("\t\t Overriding cmn_cntx_cfg_4") ;
+            $display ("\t\t AXE iNote \" Overriding cmn_cntx_cfg_4\"") ;
             `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_4   , UNIQUE_ID                , ate_sup_protocol_id                )
             `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_4                                                                   )
         `elsif DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
-            $display ("\t\t Overriding cmn_cntx_cfg_3") ;
+            $display ("\t\t AXE iNote \" Overriding cmn_cntx_cfg_3\"") ;
             `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_3   , FW_SUP_MISC              , ate_fw_sup_misc                    )
             `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_3                                                                   )
-            $display ("\t\t Overriding cmn_cntx_cfg_4") ;
+            $display ("\t\t AXE iNote \" Overriding cmn_cntx_cfg_4\"") ;
             `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_4   , UNIQUE_ID                , ate_sup_protocol_id                )
             `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_4                                                                   )
         `else
-            $display ("\t\t Overriding cmn_cntx_cfg_3") ;
+            $display ("\t\t AXE iNote \" Overriding cmn_cntx_cfg_3\"") ;
             `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_3   , UNIQUE_ID                , ate_sup_protocol_id                )
             `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_SUP_CNTX_CFG_3                                                                   )
         `endif
 
         // MPLLA CFG
-        $display ("\t\t Overriding mplla_cntx_cfg_0") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_0\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_0 , MULTIPLIER               , ate_mplla_multiplier               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_0 , DIV_CLK_EN               , ate_mplla_div_clk_en               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_0 , FB_CLK_DIV4_EN           , ate_mplla_fb_clk_div4_en           )
@@ -8188,26 +8232,26 @@
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_0                                                                 )
         //following registers have changed the fields after RAW 2.0
       `ifndef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
-        $display ("\t\t Overriding mplla_cntx_cfg_1") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_1\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , DIV_MULTIPLIER           , ate_mplla_div_multiplier           )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , TX_CLK_DIV               , ate_mplla_tx_clk_div               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , WORD_CLK_DIV             , ate_mplla_word_clk_div             )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , CTL_BUF_BYPASS           , ate_mplla_ctl_buf_bypass           )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , BW_THRESHOLD             , ate_mplla_bw_threshold             )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_2") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_2\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_2 , BW_LOW                   , ate_mplla_bw_low[15:0]             )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_2                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_3") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_3\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_3 , BW_HIGH                  , ate_mplla_bw_high[15:0]            )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_3                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_4") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_4\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_4 , SSC_PEAK_LSB             , ate_mplla_ssc_peak[15:0]           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_4                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_5") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_5\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_5 , SSC_STEP_SIZE_LSB        , ate_mplla_ssc_step_size[15:0]      )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_5                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_6") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_6\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_6 , SSC_PEAK_MSB             , ate_mplla_ssc_peak[19:16]          )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_6 , SSC_STEP_SIZE_MSB        , ate_mplla_ssc_step_size[20:16]     )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_6 , SSC_UP_SPREAD            , ate_mplla_ssc_up_spread            )
@@ -8215,89 +8259,89 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_6 , LC_FREQSEL               , ate_mplla_lc_freqsel               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_6 , FRAC_EN                  , ate_mplla_frac_en                  )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_6                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_7") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_7\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_7 , FRAC_DEN                 , ate_mplla_frac_den                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_7                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_8") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_8\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_8 , FRAC_QUOT                , ate_mplla_frac_quot                )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_8                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_9") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_9\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_9 , FRAC_REM                 , ate_mplla_frac_rem                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_9                                                                 )
         // MPLLB CFG
-        $display ("\t\t Overriding mpllb_cntx_cfg_0") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_0\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_0 , MULTIPLIER               , ate_mpllb_multiplier               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_0 , DIV_CLK_EN               , ate_mpllb_div_clk_en               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_0 , TX_CLK_DIV               , ate_mpllb_tx_clk_div               )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_0                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_1") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_1\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1 , DIV_MULTIPLIER           , ate_mpllb_div_multiplier           )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1 , WORD_CLK_DIV             , ate_mpllb_word_clk_div             )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1 , CAL_DAC_CODE             , ate_mpllb_cal_dac_code             )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_2") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_2\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_2 , CP_INT                   , ate_mpllb_cp_int                   )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_2 , CP_PROP                  , ate_mpllb_cp_prop                  )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_2 , FREQ_VCO                 , ate_mpllb_freq_vco                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_2                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_3") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_3\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_3 , CP_INT_GS                , ate_mpllb_cp_int_gs                )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_3 , CP_PROP_GS               , ate_mpllb_cp_prop_gs               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_3 , V2I                      , ate_mpllb_v2i                      )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_3                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_4") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_4\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_4 , SSC_PEAK_LSB             , ate_mpllb_ssc_peak[15:0]           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_4                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_5") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_5\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_5 , SSC_STEP_SIZE_LSB        , ate_mpllb_ssc_step_size[15:0]      )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_5                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_6") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_6\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_6 , SSC_PEAK_MSB             , ate_mpllb_ssc_peak[19:16]          )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_6 , SSC_STEP_SIZE_MSB        , ate_mpllb_ssc_step_size[20:16]     )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_6 , SSC_UP_SPREAD            , ate_mpllb_ssc_up_spread            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_6 , REF_CLK_MPLLB_DIV        , ate_ref_clk_mpllb_div              )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_6 , FRAC_EN                  , ate_mpllb_frac_en                  )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_6                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_7") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_7\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_7 , FRAC_DEN                 , ate_mpllb_frac_den                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_7                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_8") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_8\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_8 , FRAC_QUOT                , ate_mpllb_frac_quot                )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_8                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_9") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_9\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_9 , FRAC_REM                 , ate_mpllb_frac_rem                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_9                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_10") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_10\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_10, HDMI_DIV                 , ate_mpllb_hdmi_div                 )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_10, HDMI_PIXEL_CLK_DIV       , `DWC_C20PCIE4_X4NS_ATE_HDMI_PIXEL_CLK_DIV     )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_10                                                                )
       `else//DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
-        $display ("\t\t Overriding mplla_cntx_cfg_1") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_1\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , DIV_MULTIPLIER           , ate_mplla_div_multiplier           )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , TX_CLK_DIV               , ate_mplla_tx_clk_div               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , WORD_CLK_DIV             , ate_mplla_word_clk_div             )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1 , CTL_BUF_BYPASS           , ate_mplla_ctl_buf_bypass           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_1                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_2") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_2\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_2 , BW_LOW_LSB               , ate_mplla_bw_low[15:0]             )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_2                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_3") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_3\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_3 , BW_HIGH_LSB              , ate_mplla_bw_high[15:0]            )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_3                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_4") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_4\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_4 , BW_LOW_MSB               , ate_mplla_bw_low[21:16]            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_4 , BW_HIGH_MSB              , ate_mplla_bw_high[21:16]           )
         `ifndef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_4 , BW_THRESHOLD             , ate_mplla_bw_threshold             )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_4                                                                 )
         `endif
-        $display ("\t\t Overriding mplla_cntx_cfg_5") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_5\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_5 , SSC_PEAK_LSB             , ate_mplla_ssc_peak[15:0]           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_5                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_6") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_6\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_6 , SSC_STEP_SIZE_LSB        , ate_mplla_ssc_step_size[15:0]      )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_6                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_7") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_7\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_7 , SSC_PEAK_MSB             , ate_mplla_ssc_peak[19:16]          )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_7 , SSC_STEP_SIZE_MSB        , ate_mplla_ssc_step_size[20:16]     )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_7 , SSC_UP_SPREAD            , ate_mplla_ssc_up_spread            )
@@ -8305,16 +8349,16 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_7 , LC_FREQSEL               , ate_mplla_lc_freqsel               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_7 , FRAC_EN                  , ate_mplla_frac_en                  )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_7                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_8") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_8\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_8 , FRAC_DEN                 , ate_mplla_frac_den                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_8                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_9") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_9\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_9 , FRAC_QUOT                , ate_mplla_frac_quot                )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_9                                                                 )
-        $display ("\t\t Overriding mplla_cntx_cfg_10") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_10\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_10 , FRAC_REM                , ate_mplla_frac_rem                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_10                                                                )
-        $display ("\t\t Overriding mplla_cntx_cfg_11") ;
+        $display ("\t\t AXE iNote \" Overriding mplla_cntx_cfg_11\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_11 , VREG_CP_GAIN_CTRL       , ate_mplla_vreg_cp_gain_ctrl        )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_11 , VREG_PFD_GAIN_CTRL      , ate_mplla_vreg_pfd_gain_ctrl       )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_11 , VREG_PMIX_GAIN_CTRL     , ate_mplla_vreg_pmix_gain_ctrl      )
@@ -8322,37 +8366,37 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_11 , VREG_TXCLK_GAIN_CTRL    , ate_mplla_vreg_txclk_gain_ctrl     )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLA_CNTX_CFG_11                                                                )
         // MPLLB CFG
-        $display ("\t\t Overriding mpllb_cntx_cfg_0") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_0\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_0 , MULTIPLIER               , ate_mpllb_multiplier               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_0 , TX_CLK_DIV               , ate_mpllb_tx_clk_div               )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_0                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_1") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_1\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1 , DIV_MULTIPLIER           , ate_mpllb_div_multiplier           )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1 , WORD_CLK_DIV             , ate_mpllb_word_clk_div             )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1 , CAL_DAC_CODE             , ate_mpllb_cal_dac_code             )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1 , DIV_CLK_EN               , ate_mpllb_div_clk_en               )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_1                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_2") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_2\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_2 , CP_INT                   , ate_mpllb_cp_int                   )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_2 , CP_PROP                  , ate_mpllb_cp_prop                  )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_2                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_3") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_3\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_3 , CP_INT_GS                , ate_mpllb_cp_int_gs                )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_3 , CP_PROP_GS               , ate_mpllb_cp_prop_gs               )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_3                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_4") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_4\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_4 , V2I                      , ate_mpllb_v2i                      )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_4 , FREQ_VCO                 , ate_mpllb_freq_vco                 )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_4 , CP_PROP_BIAS             , ate_mpllb_cp_prop_bias             )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_4 , CP_INT_BIAS              , ate_mpllb_cp_int_bias              )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_4                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_5") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_5\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_5 , SSC_PEAK_LSB             , ate_mpllb_ssc_peak[15:0]           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_5                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_6") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_6\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_6 , SSC_STEP_SIZE_LSB        , ate_mpllb_ssc_step_size[15:0]      )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_6                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_7") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_7\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_7 , SSC_PEAK_MSB             , ate_mpllb_ssc_peak[19:16]          )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_7 , SSC_STEP_SIZE_MSB        , ate_mpllb_ssc_step_size[20:16]     )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_7 , SSC_UP_SPREAD            , ate_mpllb_ssc_up_spread            )
@@ -8360,20 +8404,20 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_7 , FRAC_EN                  , ate_mpllb_frac_en                  )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_7 , PMIX_DEG_MODE            , ate_mpllb_pmix_deg_mode            )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_7                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_8") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_8\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_8 , FRAC_DEN                 , ate_mpllb_frac_den                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_8                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_9") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_9\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_9 , FRAC_QUOT                , ate_mpllb_frac_quot                )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_9                                                                 )
-        $display ("\t\t Overriding mpllb_cntx_cfg_10") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_10\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_10, FRAC_REM                 , ate_mpllb_frac_rem                 )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_10                                                                )
-        $display ("\t\t Overriding mpllb_cntx_cfg_11") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_11\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_11, HDMI_DIV                 , ate_mpllb_hdmi_div                 )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_11, HDMI_PIXEL_CLK_DIV       , `DWC_C20PCIE4_X4NS_ATE_HDMI_PIXEL_CLK_DIV     )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_11                                                                )
-        $display ("\t\t Overriding mpllb_cntx_cfg_12") ;
+        $display ("\t\t AXE iNote \" Overriding mpllb_cntx_cfg_12\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_12, VREG_V2I_GAIN_CTRL       , ate_mpllb_vreg_v2i_gain_ctrl       )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_12, VREG_CP_GAIN_CTRL        , ate_mpllb_vreg_cp_gain_ctrl        )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_MPLLB_CNTX_CFG_12, VREG_PMIX_GAIN_CTRL      , ate_mpllb_vreg_pmix_gain_ctrl      )
@@ -8387,7 +8431,7 @@
     if(tb.prot_in == "ATE_HDMI" || cntx_res_bypass == 1'b1)begin
         // TX CFG
       `ifndef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
-        $display ("\t\t Overriding tx_cntx_cfg_0");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_0\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0, RATE               , ate_txx_rate               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0, WIDTH              , ate_txx_width              )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0, ALIGN_WIDE_XFER_EN , ate_txx_align_wide_xfer_en )
@@ -8399,14 +8443,14 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0, OFFCAN_CONT        , ate_txx_offcan_cont        )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0                                                  )
 
-        $display ("\t\t Overriding tx_cntx_cfg_1");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_1\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, MISC               , ate_txx_misc               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, DCC_CTRL_RANGE     , ate_txx_dcc_ctrl_range     )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, DCC_BYPASS         , ate_txx_dcc_bypass         )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, TERM_CTRL          , ate_txx_term_ctrl          )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1                                                  )
       `else
-        $display ("\t\t Overriding tx_cntx_cfg_0");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_0\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0, RATE               , ate_txx_rate               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0, WIDTH              , ate_txx_width              )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0, ALIGN_WIDE_XFER_EN , ate_txx_align_wide_xfer_en )
@@ -8417,14 +8461,14 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0, OFFCAN_CONT        , ate_txx_offcan_cont        )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_0                                                  )
 
-        $display ("\t\t Overriding tx_cntx_cfg_1");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_1\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, MISC               , ate_txx_misc               )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, DCC_CTRL_RANGE     , ate_txx_dcc_ctrl_range     )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, DCC_BYPASS         , ate_txx_dcc_bypass         )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1, TERM_CTRL          , ate_txx_term_ctrl          )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_1                                                  )
 
-        $display ("\t\t Overriding tx_cntx_cfg_2");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_2\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2, VREG_VPTX_GAIN_CTRL, ate_txx_vreg_vptx_gain_ctrl)
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2, VREG_VPTX_BYPASS   , ate_txx_vreg_vptx_bypass   )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2, VREG_VBG_GAIN_CTRL , ate_txx_vreg_vbg_gain_ctrl )
@@ -8436,39 +8480,39 @@
       `endif
       // For fw_tx_misc
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2_FW_TX_MISC
-        $display ("\t\t Overriding tx_cntx_cfg_2");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_2\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2, FW_TX_MISC         , ate_fw_tx_misc             )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2                                                  )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3_FW_TX_MISC
-        $display ("\t\t Overriding tx_cntx_cfg_3");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_3\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3, FW_TX_MISC         , ate_fw_tx_misc             )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3                                                  )
       `endif
       // For fw_lane_misc
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2_FW_LANE_MISC
-        $display ("\t\t Overriding tx_cntx_cfg_2");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_2\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2, FW_LANE_MISC       , ate_fw_lane_misc           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2                                                  )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3_FW_LANE_MISC
-        $display ("\t\t Overriding tx_cntx_cfg_3");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_3\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3, FW_LANE_MISC       , ate_fw_lane_misc           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3                                                  )
       `endif
       // For lane_protocol_id
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2_TX_UNIQUE_ID
-        $display ("\t\t Overriding tx_cntx_cfg_2");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_2\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2, TX_UNIQUE_ID       , ate_lane_protocol_id       )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_2                                                  )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3_TX_UNIQUE_ID
-        $display ("\t\t Overriding tx_cntx_cfg_3");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_3\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3, TX_UNIQUE_ID       , ate_lane_protocol_id       )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_3                                                  )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_4_TX_UNIQUE_ID
-        $display ("\t\t Overriding tx_cntx_cfg_4");
+        $display ("\t\t AXE iNote \" Overriding tx_cntx_cfg_4\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_4, TX_UNIQUE_ID       , ate_lane_protocol_id       )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_CNTX_CFG_4                                                  )
       `endif
@@ -8476,14 +8520,14 @@
 
     if(tb.prot_in == "ATE_HDMI" || tb.prot_in == "ATE_DP" || tb.prot_in == "ATE_EDP" || cntx_res_bypass == 1'b1)begin
         // RX CFG
-        $display ("\t\t Overriding rx_cntx_cfg_0");
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_0\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_0, EQ_ATT_LVL            , ate_rxx_eq_att_lvl            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_0, EQ_VGA_GAIN           , ate_rxx_eq_vga_gain           )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_0, EQ_CTLE_OFST_SEL      , ate_rxx_eq_ctle_ofst_sel      )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_0, EQ_CTLE_BOOST         , ate_rxx_eq_ctle_boost         )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_0, EQ_CTLE_POLE          , ate_rxx_eq_ctle_pole          )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_0                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_1") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_1\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_1, EQ_CTLE_ZERO          , ate_rxx_eq_ctle_zero          )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_1, EQ_AFE_RATE           , ate_rxx_eq_afe_rate           )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_1, EQ_AFE_BIAS_TIA       , ate_rxx_eq_afe_bias_tia       )
@@ -8491,31 +8535,31 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_1, EQ_AFE_VCM_ADJ        , ate_rxx_eq_afe_vcm_adj        )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_1                                                        )
       `ifndef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
-        $display ("\t\t Overriding rx_cntx_cfg_2") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_2\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_2, EQ_DFE_TAP1           , ate_rxx_eq_dfe_tap1           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_2                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_3") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_3\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_3, DFE_BYPASS            , ate_rxx_dfe_bypass            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_3, ADAPT_SEL             , ate_rxx_adapt_sel             )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_3, ADAPT_MODE            , ate_rxx_adapt_mode            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_3, MISC                  , ate_rxx_misc                  )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_3, DELTA_IQ              , ate_rxx_delta_iq              )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_3                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_4") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_4\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4, CDR_VCO_CONFIG        , ate_rxx_cdr_vco_config        )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4, DCC_CTRL_RANGE        , ate_rxx_dcc_ctrl_range        )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_5") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_5\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_5, RATE                  , ate_rxx_rate                  )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_5, REF_LD_VAL            , ate_rxx_ref_ld_val            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_5, DIV16P5_CLK_EN        , ate_rxx_div16p5_clk_en        )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_5, CDR_PPM_MAX           , ate_rxx_cdr_ppm_max           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_5                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_6") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_6\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_6, WIDTH                 , ate_rxx_width                 )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_6, VCO_LD_VAL            , ate_rxx_vco_ld_val            )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_6                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_7") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_7\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_7, SIGDET_LF_THRESHOLD   , ate_rxx_sigdet_lf_threshold   )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_7, SIGDET_HF_THRESHOLD   , ate_rxx_sigdet_hf_threshold   )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_7, SIGDET_LFPS_FILTER_EN , ate_rxx_sigdet_lfps_filter_en )
@@ -8526,12 +8570,12 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_7, OFFCAN_CONT           , ate_rxx_offcan_cont           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_7                                                        )
         `ifdef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_1P4
-          $display ("\t\t Overriding rx_cntx_cfg_8") ;
+          $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_8\"") ;
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, ADAPT_CONTROL       , ate_rxx_adapt_control         )
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8                                                      )
         `endif
       `else //DWC_C20PCIE4_X4NS_ATE_RAW_2P0_P14_AND_AFTER
-        $display ("\t\t Overriding rx_cntx_cfg_2") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_2\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_2, EQ_AFE_QCTRL_SEL      , ate_rxx_eq_afe_qctrl_sel      )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_2, EQ_AFE_QCTRL          , ate_rxx_eq_afe_qctrl          )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_2, EQ_AFE_BIAS_TIA_SEL   , ate_rxx_eq_afe_bias_tia_sel   )
@@ -8539,31 +8583,31 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_2, BAUD_RATE             , ate_rxx_baud_rate_desi        )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_2, PROTOCOL              , ate_rxx_protocol              )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_2                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_3") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_3\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_3, EQ_DFE_TAP1           , ate_rxx_eq_dfe_tap1           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_3                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_4") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_4\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4, DFE_BYPASS            , ate_rxx_dfe_bypass            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4, ADAPT_SEL             , ate_rxx_adapt_sel             )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4, ADAPT_MODE            , ate_rxx_adapt_mode            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4, MISC                  , ate_rxx_misc                  )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4, DELTA_IQ              , ate_rxx_delta_iq              )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_4                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_5") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_5\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_5, CDR_VCO_CONFIG        , ate_rxx_cdr_vco_config        )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_5, DCC_CTRL_RANGE        , ate_rxx_dcc_ctrl_range        )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_5                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_6") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_6\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_6, RATE                  , ate_rxx_rate                  )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_6, REF_LD_VAL            , ate_rxx_ref_ld_val            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_6, DIV16P5_CLK_EN        , ate_rxx_div16p5_clk_en        )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_6, CDR_PPM_MAX           , ate_rxx_cdr_ppm_max           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_6                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_7") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_7\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_7, WIDTH                 , ate_rxx_width                 )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_7, VCO_LD_VAL            , ate_rxx_vco_ld_val            )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_7                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_8") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_8\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, SIGDET_LF_THRESHOLD   , ate_rxx_sigdet_lf_threshold   )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, SIGDET_HF_THRESHOLD   , ate_rxx_sigdet_hf_threshold   )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, SIGDET_LFPS_FILTER_EN , ate_rxx_sigdet_lfps_filter_en )
@@ -8572,7 +8616,7 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, ADAPT_CONT            , ate_rxx_adapt_cont            )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8, OFFCAN_CONT           , ate_rxx_offcan_cont           )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8                                                        )
-        $display ("\t\t Overriding rx_cntx_cfg_9") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_9\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9, VREG_VRO_GAIN_CTRL    , ate_rxx_vreg_vro_gain_ctrl    )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9, VREG_VRO_BYPASS       , ate_rxx_vreg_vro_bypass       )
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9, VREG_VCO_GAIN_CTRL    , ate_rxx_vreg_vco_gain_ctrl    )
@@ -8581,7 +8625,7 @@
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9, VREG_CLK_BYPASS       , ate_rxx_vreg_clk_bypass       )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9                                                        )
         `ifdef DWC_C20PCIE4_X4NS_ATE_RTL_RAW_2P0_P14_AND_AFTER
-          $display ("\t\t Overriding rx_cntx_cfg_10") ;
+          $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_10\"") ;
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_10,ADAPT_CONTROL       , ate_rxx_adapt_control         )
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_10,EQ_CTLE_HF_GAIN_EN  , ate_rxx_eq_ctle_hf_gain_en    )
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_10,EQ_CTLE_HF_GAIN     , ate_rxx_eq_ctle_hf_gain       )
@@ -8590,38 +8634,38 @@
       `endif
       // For lane_protocol_id
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8_UNIQUE_ID
-        $display ("\t\t Overriding rx_cntx_cfg_8") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_8\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8,UNIQUE_ID              , ate_lane_protocol_id          )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_8                                                        )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9_UNIQUE_ID
-        $display ("\t\t Overriding rx_cntx_cfg_9") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_9\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9,UNIQUE_ID              , ate_lane_protocol_id          )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9                                                        )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_10_UNIQUE_ID
-        $display ("\t\t Overriding rx_cntx_cfg_10") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_10\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_10,UNIQUE_ID             , ate_lane_protocol_id          )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_10                                                       )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_11_UNIQUE_ID
-        $display ("\t\t Overriding rx_cntx_cfg_11") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_11\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_11,UNIQUE_ID             , ate_lane_protocol_id          )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_11                                                       )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_12_UNIQUE_ID
-        $display ("\t\t Overriding rx_cntx_cfg_12") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_12\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_12,UNIQUE_ID             , ate_lane_protocol_id          )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_12                                                       )
       `endif
       // For fw_rx_misc
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9_FW_RX_MISC
-        $display ("\t\t Overriding rx_cntx_cfg_9") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_9\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9,FW_RX_MISC             , ate_fw_rx_misc                )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_9                                                        )
       `endif
       `ifdef DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_11_FW_RX_MISC
-        $display ("\t\t Overriding rx_cntx_cfg_11") ;
+        $display ("\t\t AXE iNote \" Overriding rx_cntx_cfg_11\"") ;
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_11,FW_RX_MISC            , ate_fw_rx_misc                )
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_CNTX_CFG_11                                                       )
       `endif
@@ -8631,13 +8675,13 @@
     // Below are overriding configurates which are per-protocol/rate (mainly part of config_master) but not part of context
     // ===============================================================CMN_PARA=================================================================
     dp_rbr_ind = (tb.rate_in == "ATE_DP_RBR_10B");
-    $display ("\t\t Overriding tx_clk_dskw_en");
+    $display ("\t\t AXE iNote \" Overriding tx_clk_dskw_en\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2, CLK_DSKW_EN        , dp_rbr_ind)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2, CLK_DSKW_EN_OVRD_EN, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_PCS_XF_OVRD_IN_2)
 
     hdmimode_enable = (tb.prot_in == "ATE_HDMI");
-    $display ("\t\t Overriding mplla_ssc_en, mpllb_ssc_en, hdmimode_enable");
+    $display ("\t\t AXE iNote \" Overriding mplla_ssc_en, mpllb_ssc_en, hdmimode_enable\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CMN_CTL_1, HDMIMODE_ENABLE        , hdmimode_enable )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CMN_CTL_1, HDMIMODE_ENABLE_OVRD_EN, 1'b1            )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWCMN_DIG_CMN_CTL_1, MPLLA_SSC_EN           , ate_mplla_ssc_en)
@@ -8648,21 +8692,21 @@
 
 
     // ===============================================================TX_PARA=================================================================
-    $display ("\t\t Hooking up tx0_clk to appropriate mpll word/dword/qword/div16p5/div33 clock");
-    $display ("\t\t Overriding tx_clk_sel");
+    $display ("\t\t AXE iNote \" Hooking up tx0_clk to appropriate mpll word/dword/qword/div16p5/div33 clock\"");
+    $display ("\t\t AXE iNote \" Overriding tx_clk_sel\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_CTL_CLK_CTL, TX_CLK_SEL   , ate_tx_clk_sel)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_TX_CTL_CLK_CTL)
     //P80001562-168993 TX EQ PRE/MAIN/POST CREG override values should have 96 legs resolution
-    $display ("\t\t Overriding tx_eq_pre, tx_eq_main and tx_eq_post");
+    $display ("\t\t AXE iNote \" Overriding tx_eq_pre, tx_eq_main and tx_eq_post\"");
     `CFG_EQ(ate_txx_eq_main, ate_txx_eq_pre, ate_txx_eq_post)
 
     // ===============================================================RX_PARA=================================================================
-    $display ("\t\t Overriding rx_cdr_ssc_en");
+    $display ("\t\t AXE iNote \" Overriding rx_cdr_ssc_en\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, CDR_SSC_EN        , ate_rxx_cdr_ssc_en)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1, CDR_SSC_EN_OVRD_EN, 1'b1              )
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_RAWLANEX_DIG_RX_PCS_XF_OVRD_IN_1)
 
-    $display ("\t\t Overriding rx_term_acdc, rx_sigdet_hf_en");
+    $display ("\t\t AXE iNote \" Overriding rx_term_acdc, rx_sigdet_hf_en\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_TERM_ACDC            , ate_rxx_term_acdc   )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_TERM_ACDC_OVRD_EN    , 1'b1                )
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_RAWLANEAONX_DIG_RX_OVRD_IN_0, RX_SIGDET_HF_EN_OVRD_VAL, ate_rxx_sigdet_hf_en)
@@ -8708,7 +8752,7 @@
       dis_tag("BEGIN_INTTASK", "goto_pstate", "p1");
       chg_type = "GOTO_P1";
     end else begin
-      $display ("\t\t !!!ERROR - pstate=%d isn't supported yet", pstate);
+      $display ("\t\t AXE iNote \" !!!ERROR - pstate=%d isn't supported yet\"", pstate);
       tb.inc_error();
     end
 
@@ -8724,7 +8768,7 @@
     end else if(pstate == `DWC_C20PCIE4_X4NS_ATE_P1_STATE)begin
       dis_tag("END_INTTASK", "goto_pstate", "p1");
     end else begin
-      $display ("\t\t !!!ERROR - pstate=%d isn't supported yet", pstate);
+      $display ("\t\t AXE iNote \" !!!ERROR - pstate=%d isn't supported yet\"", pstate);
       tb.inc_error();
     end
   end
@@ -9032,9 +9076,9 @@
   begin
     dis_tag("BEGIN_INTTASK", "ate_pipe_pstate", patn_in, prot_in, freq_in);
 
-    $display ("\t\t+*************************************************************************");
-    $display ("\t\t+Functional test to measurement pipe power state");
-    $display ("\t\t+*************************************************************************");
+    $display ("\t\t AXE iNote \"+*************************************************************************\"");
+    $display ("\t\t AXE iNote \"+Functional test to measurement pipe power state\"");
+    $display ("\t\t AXE iNote \"+*************************************************************************\"");
 
     //Get pipe state string
     curr_pstate = get_pipe_pstate_str(patn_in,0);
@@ -9091,7 +9135,7 @@
        dis_tag("BEGIN_TASK", "EXIT_PG_SEQUENCE", patn_in, prot_in, freq_in);
        access_type=`DWC_C20PCIE4_X4NS_ACCESS_TYPE;
        if(access_type) begin
-         $display ("\t\tEnter CR ACCESS");
+         $display ("\t\t AXE iNote \"Enter CR ACCESS\"");
          tb.jtag.set_ir(`DWC_C20PCIE4_X4NS_JTAG_IR_CRSEL);
        end
        cfg_lane_init_pwrup_done(1'b0); // clear the irq and not gate the tx_ack when exist PG state
@@ -9151,7 +9195,7 @@
         pstate[ptr*8+:8] = pstate_combin[ptr*8+:8];
       end
     end // for
-    $display ("\t\t+ pstate : %0s",pstate);
+    $display ("\t\t AXE iNote \"+ pstate : %0s\"",pstate);
     get_pipe_pstate_str = pstate;
     return get_pipe_pstate_str;
   end
@@ -9258,24 +9302,24 @@
       {`DWC_C20PCIE4_X4NS_ATE_MPHY_FAMILY,`DWC_C20PCIE4_X4NS_ATE_PIPE_H8       }: out_struct = PIPE_PSTATE_MPHY_H8     ;
       {`DWC_C20PCIE4_X4NS_ATE_MPHY_FAMILY,`DWC_C20PCIE4_X4NS_ATE_PIPE_H8ULP    }: out_struct = PIPE_PSTATE_MPHY_H8ULP  ;
       default: begin
-        $display ("\t\t !!!Type not exist: %0s, %0s",prot_in,pstate_str );
+        $display ("\t\t AXE iNote \" !!!Type not exist: %0s, %0s\"",prot_in,pstate_str );
         tb.inc_error();
       end
     endcase
-    $display("\t\t get_pipe_pstate_t: prot_in: %0s , pstate_str: %0s",prot_in,pstate_str);
-    $display("\t\t PIPE_PSTATE.TX_RESET %0d"       ,out_struct.TX_RESET       );
-    $display("\t\t PIPE_PSTATE.TX_PSTATE %0d"      ,out_struct.TX_PSTATE      );
-    $display("\t\t PIPE_PSTATE.TX_MPLL_EN %0d"     ,out_struct.TX_MPLL_EN     );
-    $display("\t\t PIPE_PSTATE.TX_DISABLE %0d"     ,out_struct.TX_DISABLE     );
-    $display("\t\t PIPE_PSTATE.RX_RESET %0d"       ,out_struct.RX_RESET       );
-    $display("\t\t PIPE_PSTATE.RX_PSTATE %0d"      ,out_struct.RX_PSTATE      );
-    $display("\t\t PIPE_PSTATE.RX_DISABLE %0d"     ,out_struct.RX_DISABLE     );
-    $display("\t\t PIPE_PSTATE.RX_TERM_EN %0d"     ,out_struct.RX_TERM_EN     );
-    $display("\t\t PIPE_PSTATE.RX_SIGDET_LF_EN %0d",out_struct.RX_SIGDET_LF_EN);
-    $display("\t\t PIPE_PSTATE.RX_SIGDET_HF_EN %0d",out_struct.RX_SIGDET_HF_EN);
-    $display("\t\t PIPE_PSTATE.RX_SQ_EN %0d"       ,out_struct.RX_SQ_EN       );
-    $display("\t\t PIPE_PSTATE.REF_CLKEN %0d"      ,out_struct.REF_CLKEN      );
-    $display("\t\t PIPE_PSTATE.PG_RESET %0d"       ,out_struct.PG_RESET       );
+    $display("\t\t AXE iNote \" get_pipe_pstate_t: prot_in: %0s , pstate_str: %0s\"",prot_in,pstate_str);
+    $display("\t\t AXE iNote \" PIPE_PSTATE.TX_RESET %0d\""       ,out_struct.TX_RESET       );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.TX_PSTATE %0d\""      ,out_struct.TX_PSTATE      );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.TX_MPLL_EN %0d\""     ,out_struct.TX_MPLL_EN     );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.TX_DISABLE %0d\""     ,out_struct.TX_DISABLE     );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.RX_RESET %0d\""       ,out_struct.RX_RESET       );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.RX_PSTATE %0d\""      ,out_struct.RX_PSTATE      );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.RX_DISABLE %0d\""     ,out_struct.RX_DISABLE     );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.RX_TERM_EN %0d\""     ,out_struct.RX_TERM_EN     );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.RX_SIGDET_LF_EN %0d\"",out_struct.RX_SIGDET_LF_EN);
+    $display("\t\t AXE iNote \" PIPE_PSTATE.RX_SIGDET_HF_EN %0d\"",out_struct.RX_SIGDET_HF_EN);
+    $display("\t\t AXE iNote \" PIPE_PSTATE.RX_SQ_EN %0d\""       ,out_struct.RX_SQ_EN       );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.REF_CLKEN %0d\""      ,out_struct.REF_CLKEN      );
+    $display("\t\t AXE iNote \" PIPE_PSTATE.PG_RESET %0d\""       ,out_struct.PG_RESET       );
   end
 endtask
 
@@ -9305,7 +9349,7 @@
         patn[ptr*8+:8] = patn_combin[ptr*8+:8];
       end
     end // for
-    $display ("\t\t+ patn : %0s",patn);
+    $display ("\t\t AXE iNote \"+ patn : %0s\"",patn);
     get_patn_str = patn;
     return get_patn_str;
   end
@@ -9317,15 +9361,15 @@
   string osc_patn;
   begin
     dis_tag("BEGIN_INTTASK", "ATE_RINGO_TEST", patn_in);
-    $display("\t\t+***********************************************************************");
-    $display("\t\t+ This test just generate Ringo clk and send to tx serial for measurement");
-    $display("\t\t+***********************************************************************");
+    $display("\t\t AXE iNote \"+***********************************************************************\"");
+    $display("\t\t AXE iNote \"+ This test just generate Ringo clk and send to tx serial for measurement\"");
+    $display("\t\t AXE iNote \"+***********************************************************************\"");
 
     div_patn = get_patn_str(patn_in,0,"_");
     osc_patn = get_patn_str(patn_in,1,"_");
-    $display("\t\t Current div: %s, Current osc: %s",div_patn,osc_patn);
+    $display("\t\t AXE iNote \" Current div: %s, Current osc: %s\"",div_patn,osc_patn);
 
-    $display ("\t\t Overriding tx_drv_source to 0 to enable Alt path to tx_p/m");
+    $display ("\t\t AXE iNote \" Overriding tx_drv_source to 0 to enable Alt path to tx_p/m\"");
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_DRV_SOURCE_REG, 2'b00)
     `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OVRD_ALT_BUS, 1'b1)
     `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
@@ -9333,35 +9377,35 @@
     `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_OSC_DIVEXTRA_EN
       case(div_patn)
         "DIV64": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV32": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-32");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-32\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV4": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-4");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-4\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV1": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-1");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-1\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         default: begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
@@ -9371,35 +9415,35 @@
     `elsif DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_OSC_DIVEXTRA_EN_I
       case(div_patn)
         "DIV64": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN_I, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV32": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-32");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-32\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN_I, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV4": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-4");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-4\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN_I, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV1": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-1");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-1\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN_I, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         default: begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, OSC_DIVEXTRA_EN_I, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
@@ -9409,35 +9453,35 @@
     `elsif DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04_TX_ANA_OSC_DIV64_ENN
       case(div_patn)
         "DIV64": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_DIV64_ENN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV32": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-32");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-32\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_DIV64_ENN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV4": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-4");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-4\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_DIV64_ENN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV1": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-1");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-1\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_DIV64_ENN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         default: begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_DIV64_ENN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
@@ -9447,27 +9491,27 @@
     `elsif DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01_TX_ANA_OSC_DIV_EN
       case(div_patn)
         "DIV64": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_EN, 2'b11)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV32": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-32");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-32\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_EN, 2'b10)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV4": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-4");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-4\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_EN, 2'b01)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV1": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-1");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-1\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_EN, 2'b00)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         default: begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_EN, 2'b11)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
@@ -9475,27 +9519,27 @@
     `elsif DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01_TX_ANA_OSC_DIV_1_0
       case(div_patn)
         "DIV64": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_1_0, 2'b11)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV32": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-32");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-32\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_1_0, 2'b10)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV4": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-4");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-4\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_1_0, 2'b01)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV1": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-1");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-1\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_1_0, 2'b00)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         default: begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-64");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-64\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV_1_0, 2'b11)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
@@ -9503,17 +9547,17 @@
     `else
       case(div_patn)
         "DIV4": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-4");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-4\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         "DIV1": begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-1");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-1\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b0)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
         default: begin
-          $display ("\t\t Enable Ring oscillator outputs divide-by-4");
+          $display ("\t\t AXE iNote \" Enable Ring oscillator outputs divide-by-4\"");
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_DIV4_EN, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
         end
@@ -9522,17 +9566,17 @@
 
     case(osc_patn)
       "VPULVT": begin
-        $display ("\t\t Enable Ring vp_ulvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring vp_ulvt oscillator\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_VP_ULVT, 1'b1)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
       end
       "VPTX": begin
-        $display ("\t\t Enable Ring vptx oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring vptx oscillator\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_VPTX, 1'b1)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
       end
       "VPLVT": begin
-        $display ("\t\t Enable Ring vp_lvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring vp_lvt oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04_TX_ANA_OSC_VP_LVT
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_VP_LVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
@@ -9545,12 +9589,12 @@
         `endif
       end
       "VPH": begin
-        $display ("\t\t Enable Ring vph oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring vph oscillator\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01, TX_ANA_OSC_VPH, 1'b1)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG01)
       end
       "VPCELL": begin
-        $display ("\t\t Enable Ring vp_cell oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring vp_cell oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_TX_ANA_OSC_VPTX_SVT
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_VPTX_SVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
@@ -9560,30 +9604,30 @@
         `endif
       end
       "VPMUXCELL": begin
-        $display ("\t\t Enable Ring vp_mux_cell oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring vp_mux_cell oscillator\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_VP_MUX_CELL, 1'b1)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
       end
       "NMOS": begin
-        $display ("\t\t Enable Ring nmos oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring nmos oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04_TX_ANA_OSC_NMOS
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_NMOS, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
         `else
-          $display ("\t\t Ring nmos oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled");
+          $display ("\t\t AXE iNote \" Ring nmos oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled\"");
         `endif
       end
       "PMOS": begin
-        $display ("\t\t Enable Ring pmos oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring pmos oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04_TX_ANA_OSC_PMOS
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_PMOS, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
         `else
-          $display ("\t\t Ring pmos oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled");
+          $display ("\t\t AXE iNote \" Ring pmos oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled\"");
         `endif
       end
       "NMOSLVT": begin
-        $display ("\t\t Enable Ring nmos_lvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring nmos_lvt oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_TX_ANA_OSC_NMOS_LVT
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_NMOS_LVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
@@ -9591,20 +9635,20 @@
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_VPTX_ULVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
         `else
-          $display ("\t\t Ring nmos_lvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled");
+          $display ("\t\t AXE iNote \" Ring nmos_lvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled\"");
         `endif
       end
       "NMOSELVT": begin
-        $display ("\t\t Enable Ring nmos_elvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring nmos_elvt oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_TX_ANA_OSC_NMOS_ELVT
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_NMOS_ELVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
         `else
-          $display ("\t\t Ring nmos_elvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled");
+          $display ("\t\t AXE iNote \" Ring nmos_elvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled\"");
         `endif
       end
       "PMOSLVT": begin
-        $display ("\t\t Enable Ring pmos_lvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring pmos_lvt oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_TX_ANA_OSC_PMOS_LVT
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_PMOS_LVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
@@ -9612,20 +9656,20 @@
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_VPTX_LVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
         `else
-          $display ("\t\t Ring pmos_lvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled");
+          $display ("\t\t AXE iNote \" Ring pmos_lvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled\"");
         `endif
       end
       "PMOSELVT": begin
-        $display ("\t\t Enable Ring pmos_elvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring pmos_elvt oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_TX_ANA_OSC_PMOS_ELVT
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_PMOS_ELVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
         `else
-          $display ("\t\t Ring pmos_elvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled");
+          $display ("\t\t AXE iNote \" Ring pmos_elvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled\"");
         `endif
       end
       "CMOSLVT": begin
-        $display ("\t\t Enable Ring cmos_lvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring cmos_lvt oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_TX_ANA_OSC_CMOS_LVT
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_CMOS_LVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
@@ -9633,11 +9677,11 @@
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_CMOS_LVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
         `else
-          $display ("\t\t Ring cmos_lvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled");
+          $display ("\t\t AXE iNote \" Ring cmos_lvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled\"");
         `endif
       end
       "CMOSULVT": begin
-        $display ("\t\t Enable Ring cmos_ulvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring cmos_ulvt oscillator\"");
         `ifdef DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD_TX_ANA_OSC_CMOS_ULVT
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD, TX_ANA_OSC_CMOS_ULVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG0_OVRD)
@@ -9645,11 +9689,11 @@
           `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_CMOS_ULVT, 1'b1)
           `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
         `else
-          $display ("\t\t Ring cmos_ulvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled");
+          $display ("\t\t AXE iNote \" Ring cmos_ulvt oscillator is not supported, please check the correct register to enable otherwise default vp_ulvt oscillator will be enabled\"");
         `endif
       end
       default: begin
-        $display ("\t\t Enable Ring vp_ulvt oscillator");
+        $display ("\t\t AXE iNote \" Enable Ring vp_ulvt oscillator\"");
         `SET_WR_VAL(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04, TX_ANA_OSC_VP_ULVT, 1'b1)
         `WRITE_CREG(DWC_C20PCIE4_X4NS_CR_LANEX_DIG_ANA_XF_TX_ANA_CREG04)
       end
@@ -9698,7 +9742,7 @@
 task ate_init_for_debug_test;
   begin
     dis_tag("BEGIN_INTTASK", "ATE_INIT_FOR_DEBUG_TEST");
-    $display("\t\t Initialize related signals for debug capabilities");
+    $display("\t\t AXE iNote \" Initialize related signals for debug capabilities\"");
     // Set the amount of debug info. 0 = none, 1-255 = higher number, more info
     tb.debug = 1;
 
@@ -9750,7 +9794,7 @@
     `endif //X1
 
     //Enter CR access
-    $display ("\t\tEnter CR ACCESS");
+    $display ("\t\t AXE iNote \"Enter CR ACCESS\"");
     tb.jtag.set_ir(`DWC_C20PCIE4_X4NS_JTAG_IR_CRSEL);
 
     vec_pause (32'd2);
@@ -9765,9 +9809,9 @@
   reg [15:0] data;
   begin
     dis_tag("BEGIN_TASK", "ATE_CALIBRATION_REG_READOUT_TEST");
-    $display("\t\t+***********************************************************************");
-    $display("\t\t+ This test just generate the vector that readout all MPHY calibration registers");
-    $display("\t\t+***********************************************************************");
+    $display("\t\t AXE iNote \"+***********************************************************************\"");
+    $display("\t\t AXE iNote \"+ This test just generate the vector that readout all MPHY calibration registers\"");
+    $display("\t\t AXE iNote \"+***********************************************************************\"");
 
     ate_init_for_debug_test();
     tb.sel_rd_mask=tb.mask_all_zero;
