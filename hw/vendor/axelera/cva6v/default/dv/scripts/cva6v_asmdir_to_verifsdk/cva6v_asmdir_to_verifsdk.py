import argparse
import pathlib
import yaml

def parse_arguments():
    parser = argparse.ArgumentParser(description="Scan .S files and generate a YAML file with test names.")
    parser.add_argument("--input_dir", type=pathlib.Path, default=".", help="The directory to scan for .S files.")
    parser.add_argument("--prefix", type=str, default="", help="Prefix to add to each name.")
    parser.add_argument("--suffix", type=str, default="", help="Suffix to add to each name.")
    parser.add_argument("--reqid", type=str, default="", nargs="+", help="Requirement IDs to generate")
    parser.add_argument("--output_file", type=pathlib.Path, default="tests_fw_cva6v_default_autogenerated.yaml", help="The output YAML file path.")
    parser.add_argument("--label", type=str, default="", help="Additional label to generate")
    parser.add_argument("--datadrive", action="store_true", help="set this flag if generation is based on data drive to generate proper tags from folders")
    parser.add_argument("--verbose", action='store_true', help="Prints each parsed assembly")

    return parser.parse_args()

def scan_directory_for_asm_files(directory, pattern='*.S'):
    """ Ignores objdumps in build/ folder by default """
    build_folder = directory / "build"
    return [a for a in directory.rglob(pattern) if build_folder not in a.parents]

def add_prefix_suffix(name, prefix="", suffix=""):
    return f"{prefix}{name}{suffix}"

def generate_yaml_from_asms(asms, args):
    asms.sort()
    if args.datadrive:
        date = args.prefix.split("_")[2]
    data = {
        'tests': [
            {
                'name': add_prefix_suffix(asm.stem, args.prefix, args.suffix),
                'description': "TODO",
                'labels': ["CVA6V_DV_TESTS", "CVA6V_DV_RAG_TESTS"] + ([f"CVA6V_DV_RAG_{date}_TESTS"] if args.datadrive else []) + ([args.label] if args.label else []),
                'requirement_ids': [a for a in args.reqid],
                'platforms': ["cva6v.*"],
                'owner': "Pawel Wiecha",
                'flags': [f"ELF={args.input_dir}/build/{asm.stem}" if args.datadrive else f"ELF=$REPO_ROOT/hw/vendor/axelera/cva6v/default/dv/asm/tests/build/random/{asm.stem}" ]
            } for asm in asms
        ]
    }
    print(f"Creating {args.output_file}")
    with pathlib.Path(args.output_file).open('w') as yaml_file:
        yaml.dump(data, yaml_file, default_flow_style=False, sort_keys=True)

def main(args):
    asms = scan_directory_for_asm_files(args.input_dir)
    print(f"Parsed {len(asms)} asm files\n")
    if args.verbose:
        for asm in asms:
            print(f"{asm}\n")

    generate_yaml_from_asms(asms, args)
if __name__ == "__main__":
    args = parse_arguments()
    main(args)
