// (C) Copyright 2024 Axelera AI B.V.
// All Rights Reserved
// *** Axelera AI Confidential ***
//
// Owner: Milos Stanisavljevic <milos.stanisavljevic@axelera.ai>

/// TODO:__one_line_summary_of_veloce_ddr_subsys__
///
// This file was automatically generated by coreConsultant (version V-2024.03).
//
// FILENAME : /home/projects_2/workspace/ruytterh/europa/europa_rtl_repo/hw/vendor/synopsys/lpddr_subsys/default/workspaces/Europa_lpddr_ctrl_config_lp5x_1_60a/export/DWC_ddrctl_inst.sv
// DATE : 07/04/24 11:20:03
// ABSTRACT : SystemVerilog Testbench template (Example design instantiation).
//

module snps_ddr_subsystem (// Ports for APB
                           pclk,
                           presetn,
                           // Ports for APB Device Interface
                           pclk_apbrw,
                           // Ports for AXI Port n Global Signals
                           aclk_0,
                           aresetn_0,
                           csysreq_0,
                           cactive_0,
                           csysack_0,
                           // Ports for AXI Port n Read Address Channel
                           araddr_0,
                           arautopre_0,
                           arburst_0,
                           arcache_0,
                           arid_0,
                           arlen_0,
                           arlock_0,
                           arpoison_0,
                           arprot_0,
                           arqos_0,
                           arregion_0,
                           arsize_0,
                           arurgentb_0,
                           arurgentr_0,
                           arvalid_0,
                           arpoison_intr_0,
                           arready_0,
                           raq_split_0,
                           raqb_pop_0,
                           raqb_push_0,
                           raqb_wcount_0,
                           raqr_pop_0,
                           raqr_push_0,
                           raqr_wcount_0,
                           // Ports for AXI Port n Read Data Channel
                           rready_0,
                           rdata_0,
                           rid_0,
                           rlast_0,
                           rresp_0,
                           rvalid_0,
                           // Ports for AXI Port n Write Address Channel
                           awaddr_0,
                           awautopre_0,
                           awburst_0,
                           awcache_0,
                           awid_0,
                           awlen_0,
                           awlock_0,
                           awpoison_0,
                           awprot_0,
                           awqos_0,
                           awregion_0,
                           awsize_0,
                           awurgent_0,
                           awvalid_0,
                           awpoison_intr_0,
                           awready_0,
                           waq_pop_0,
                           waq_push_0,
                           waq_split_0,
                           waq_wcount_0,
                           // Ports for AXI Port n Write Data Channel
                           wdata_0,
                           wlast_0,
                           wstrb_0,
                           wvalid_0,
                           wready_0,
                           // Ports for AXI Port n Write Response Channel
                           bready_0,
                           bid_0,
                           bresp_0,
                           bvalid_0,
                           // Ports for Bump
                           BP_PWROK,
                           BP_A,
                           BP_ATO,
                           BP_ATO_PLL,
                           BP_B0_D,
                           BP_B1_D,
                           BP_B2_D,
                           BP_B3_D,
                           BP_CK0_C,
                           BP_CK0_T,
                           BP_CK1_C,
                           BP_CK1_T,
                           BP_ZN,
                           BP_MEMRESET_L,
                           // Ports for Clocks and Resets
                           core_ddrc_core_clk,
                           core_ddrc_core_clk_apbrw,
                           core_ddrc_rstn,
                           // Ports for Credit Counters
                           hpr_credit_cnt,
                           lpr_credit_cnt,
                           wr_credit_cnt,
                           wrecc_credit_cnt,
                           // Ports for DDRC Hardware Low Power Signals
                           csysdiscamdrain_ddrc,
                           csysfrequency_ddrc,
                           csysfsp_ddrc,
                           csysmode_ddrc,
                           csysreq_ddrc,
                           cactive_ddrc,
                           csysack_ddrc,
                           // Ports for DDRC Self Refresh Signals
                           stat_ddrc_reg_selfref_type,
                           // Ports for DFI
                           DfiClk,
                           // Ports for ECC Scrubber
                           sbr_clk,
                           sbr_resetn,
                           sbr_done_intr,
                           // Ports for Inline ECC Debug Signals
                           dbg_dfi_ie_cmd_type,
                           // Ports for Interrupts
                           derate_temp_limit_intr,
                           derate_temp_limit_intr_fault,
                           ecc_ap_err_intr,
                           ecc_ap_err_intr_fault,
                           ecc_corrected_err_intr,
                           ecc_corrected_err_intr_fault,
                           ecc_uncorrected_err_intr,
                           ecc_uncorrected_err_intr_fault,
                           rd_linkecc_corr_err_intr,
                           rd_linkecc_corr_err_intr_fault,
                           rd_linkecc_uncorr_err_intr,
                           rd_linkecc_uncorr_err_intr_fault,
                           // Ports for LPDDR4 Initialization Handshake Interface
                           dfi_reset_n_in,
                           init_mr_done_in,
                           dfi_reset_n_ref,
                           init_mr_done_out,
                           // Ports for Manually exported pins
                           Reset_async,
                           acsm_ADME,
                           acsm_CRE1,
                           acsm_CRE2,
                           acsm_FCA1,
                           acsm_FCA2,
                           acsm_FRA1,
                           acsm_FRA2,
                           acsm_MCS,
                           acsm_MCSW,
                           acsm_PDE,
                           acsm_RET,
                           acsm_RREN1,
                           acsm_RREN2,
                           bc_ADME,
                           bc_CRE1,
                           bc_CRE2,
                           bc_FCA1,
                           bc_FCA2,
                           bc_FRA1,
                           bc_FRA2,
                           bc_MCS,
                           bc_MCSW,
                           bc_PDE,
                           bc_RET,
                           bc_RREN1,
                           bc_RREN2,
                           dccm_ADME,
                           dccm_CRE1,
                           dccm_CRE2,
                           dccm_FCA1,
                           dccm_FCA2,
                           dccm_FRA1,
                           dccm_FRA2,
                           dccm_MCS,
                           dccm_MCSW,
                           dccm_PDE,
                           dccm_RET,
                           dccm_RREN1,
                           dccm_RREN2,
                           gs_ADME,
                           gs_CRE1,
                           gs_CRE2,
                           gs_FCA1,
                           gs_FCA2,
                           gs_FRA1,
                           gs_FRA2,
                           gs_MCS,
                           gs_MCSW,
                           gs_PDE,
                           gs_RET,
                           gs_RREN1,
                           gs_RREN2,
                           iccm_ADME,
                           iccm_CRE1,
                           iccm_CRE2,
                           iccm_FCA1,
                           iccm_FCA2,
                           iccm_FRA1,
                           iccm_FRA2,
                           iccm_MCS,
                           iccm_MCSW,
                           iccm_PDE,
                           iccm_RET,
                           iccm_RREN1,
                           iccm_RREN2,
                           paddr,
                           penable,
                           pie_ADME,
                           pie_CRE1,
                           pie_CRE2,
                           pie_FCA1,
                           pie_FCA2,
                           pie_FRA1,
                           pie_FRA2,
                           pie_MCS,
                           pie_MCSW,
                           pie_PDE,
                           pie_RET,
                           pie_RREN1,
                           pie_RREN2,
                           pprot,
                           pprot_pin,
                           psel,
                           pstrb,
                           pwdata,
                           pwrite,
                           scan_shift_i,
                           wdata_ADME,
                           wdata_CRE1,
                           wdata_CRE2,
                           wdata_FCA1,
                           wdata_FCA2,
                           wdata_FRA1,
                           wdata_FRA2,
                           wdata_KCS,
                           wdata_MCSRD,
                           wdata_MCSWR,
                           wdata_PDE,
                           wdata_RET,
                           wdata_RREN1,
                           wdata_RREN2,
                           acsm_PRN,
                           bc_PRN,
                           dccm_PRN,
                           gs_PRN,
                           iccm_PRN,
                           pie_PRN,
                           prdata,
                           prdata_par,
                           pready,
                           pslverr,
                           wdata_PRN,
                           // Ports for Misc
                           PhyInt_fault,
                           PhyInt_n,
                           dwc_lpddr5xphy_pll_lock,
                           dwc_lpddr5xphy_pmu_busy,
                           // Ports for Mode Register Read/Write
                           hif_mrr_data,
                           hif_mrr_data_valid,
                           // Ports for PLL Clock
                           PllBypClk,
                           PllRefClk,
                           // Ports for Per-bank refresh Bank number
                           hif_refresh_req_bank,
                           // Ports for Performance Logging Signals
                           perf_bank,
                           perf_bg,
                           perf_dfi_rd_data_cycles,
                           perf_dfi_wr_data_cycles,
                           perf_hif_hi_pri_rd,
                           perf_hif_rd,
                           perf_hif_rd_or_wr,
                           perf_hif_rmw,
                           perf_hif_wr,
                           perf_hpr_req_with_nocredit,
                           perf_hpr_xact_when_critical,
                           perf_ie_blk_hazard,
                           perf_lpr_req_with_nocredit,
                           perf_lpr_xact_when_critical,
                           perf_op_is_activate,
                           perf_op_is_cas,
                           perf_op_is_cas_wck_sus,
                           perf_op_is_cas_ws,
                           perf_op_is_cas_ws_off,
                           perf_op_is_crit_ref,
                           perf_op_is_dqsosc_mpc,
                           perf_op_is_dqsosc_mrr,
                           perf_op_is_enter_dsm,
                           perf_op_is_enter_powerdown,
                           perf_op_is_enter_selfref,
                           perf_op_is_load_mode,
                           perf_op_is_mwr,
                           perf_op_is_precharge,
                           perf_op_is_rd,
                           perf_op_is_rd_activate,
                           perf_op_is_rd_or_wr,
                           perf_op_is_refresh,
                           perf_op_is_rfm,
                           perf_op_is_spec_ref,
                           perf_op_is_tcr_mrr,
                           perf_op_is_wr,
                           perf_op_is_zqlatch,
                           perf_op_is_zqstart,
                           perf_precharge_for_other,
                           perf_precharge_for_rdwr,
                           perf_rank,
                           perf_raw_hazard,
                           perf_rdwr_transitions,
                           perf_selfref_mode,
                           perf_visible_window_limit_reached_rd,
                           perf_visible_window_limit_reached_wr,
                           perf_war_hazard,
                           perf_waw_hazard,
                           perf_wr_xact_when_critical,
                           perf_write_combine,
                           perf_write_combine_noecc,
                           perf_write_combine_wrecc,
                           // Ports for Port Arbiter
                           pa_rmask,
                           pa_wmask,
                           // Ports for Power and Ground
                           VIO_TIEHI,
                           // Ports for Register Visibility Control
                           dis_regs_ecc_syndrome,
                           // Ports for Reset
                           Reset,
                           // Ports for Scan
                           scan_DlyTestClk,
                           scan_asst_mode,
                           scan_clk,
                           scan_mode,
                           scan_occ_bypass,
                           scan_occ_reset,
                           scan_shift_async,
                           scan_shift_cg,
                           scan_si,
                           scan_so,
                           // Ports for TDR
                           DdrPhyCsrCmdTdrCaptureEn,
                           DdrPhyCsrCmdTdrShiftEn,
                           DdrPhyCsrCmdTdrUpdateEn,
                           DdrPhyCsrRdDataTdrCaptureEn,
                           DdrPhyCsrRdDataTdrShiftEn,
                           DdrPhyCsrRdDataTdrUpdateEn,
                           TDRCLK,
                           WRSTN,
                           WSI,
                           DdrPhyCsrCmdTdr_Tdo,
                           DdrPhyCsrRdDataTdr_Tdo,
                           // Ports for Test
                           BurnIn,
                           Iddq_mode,
                           dwc_lpddr5xphy_dto
                           );

   // Ports for APB
   input          pclk;
   input          presetn;
   // Ports for APB Device Interface
   input          pclk_apbrw;
   // Ports for AXI Port n Global Signals
   input          aclk_0;
   input          aresetn_0;
   input          csysreq_0;
   output         cactive_0;
   output         csysack_0;
   // Ports for AXI Port n Read Address Channel
   input  [32:0]  araddr_0;
   input          arautopre_0;
   input  [1:0]   arburst_0;
   input  [3:0]   arcache_0;
   input  [7:0]   arid_0;
   input  [7:0]   arlen_0;
   input  [0:0]   arlock_0;
   input          arpoison_0;
   input  [2:0]   arprot_0;
   input  [3:0]   arqos_0;
   input  [3:0]   arregion_0;
   input  [2:0]   arsize_0;
   input          arurgentb_0;
   input          arurgentr_0;
   input          arvalid_0;
   output         arpoison_intr_0;
   output         arready_0;
   output         raq_split_0;
   output         raqb_pop_0;
   output         raqb_push_0;
   output [5:0]   raqb_wcount_0;
   output         raqr_pop_0;
   output         raqr_push_0;
   output [5:0]   raqr_wcount_0;
   // Ports for AXI Port n Read Data Channel
   input          rready_0;
   output [255:0] rdata_0;
   output [7:0]   rid_0;
   output         rlast_0;
   output [1:0]   rresp_0;
   output         rvalid_0;
   // Ports for AXI Port n Write Address Channel
   input  [32:0]  awaddr_0;
   input          awautopre_0;
   input  [1:0]   awburst_0;
   input  [3:0]   awcache_0;
   input  [7:0]   awid_0;
   input  [7:0]   awlen_0;
   input  [0:0]   awlock_0;
   input          awpoison_0;
   input  [2:0]   awprot_0;
   input  [3:0]   awqos_0;
   input  [3:0]   awregion_0;
   input  [2:0]   awsize_0;
   input          awurgent_0;
   input          awvalid_0;
   output         awpoison_intr_0;
   output         awready_0;
   output         waq_pop_0;
   output         waq_push_0;
   output         waq_split_0;
   output [5:0]   waq_wcount_0;
   // Ports for AXI Port n Write Data Channel
   input  [255:0] wdata_0;
   input          wlast_0;
   input  [31:0]  wstrb_0;
   input          wvalid_0;
   output         wready_0;
   // Ports for AXI Port n Write Response Channel
   input          bready_0;
   output [7:0]   bid_0;
   output [1:0]   bresp_0;
   output         bvalid_0;
   // Ports for Bump
   input          BP_PWROK;
   inout  [19:0]  BP_A;
   inout          BP_ATO;
   inout          BP_ATO_PLL;
   inout  [12:0]  BP_B0_D;
   inout  [12:0]  BP_B1_D;
   inout  [12:0]  BP_B2_D;
   inout  [12:0]  BP_B3_D;
   inout          BP_CK0_C;
   inout          BP_CK0_T;
   inout          BP_CK1_C;
   inout          BP_CK1_T;
   inout          BP_ZN;
   output         BP_MEMRESET_L;
   // Ports for Clocks and Resets
   input          core_ddrc_core_clk;
   input          core_ddrc_core_clk_apbrw;
   input          core_ddrc_rstn;
   // Ports for Credit Counters
   output [6:0]   hpr_credit_cnt;
   output [6:0]   lpr_credit_cnt;
   output [6:0]   wr_credit_cnt;
   output [6:0]   wrecc_credit_cnt;
   // Ports for DDRC Hardware Low Power Signals
   input          csysdiscamdrain_ddrc;
   input  [4:0]   csysfrequency_ddrc;
   input          csysfsp_ddrc;
   input          csysmode_ddrc;
   input          csysreq_ddrc;
   output         cactive_ddrc;
   output         csysack_ddrc;
   // Ports for DDRC Self Refresh Signals
   output [1:0]   stat_ddrc_reg_selfref_type;
   // Ports for DFI
   input          DfiClk;
   // Ports for ECC Scrubber
   input          sbr_clk;
   input          sbr_resetn;
   output         sbr_done_intr;
   // Ports for Inline ECC Debug Signals
   output [2:0]   dbg_dfi_ie_cmd_type;
   // Ports for Interrupts
   output         derate_temp_limit_intr;
   output [1:0]   derate_temp_limit_intr_fault;
   output         ecc_ap_err_intr;
   output [1:0]   ecc_ap_err_intr_fault;
   output         ecc_corrected_err_intr;
   output [1:0]   ecc_corrected_err_intr_fault;
   output         ecc_uncorrected_err_intr;
   output [1:0]   ecc_uncorrected_err_intr_fault;
   output         rd_linkecc_corr_err_intr;
   output [1:0]   rd_linkecc_corr_err_intr_fault;
   output         rd_linkecc_uncorr_err_intr;
   output [1:0]   rd_linkecc_uncorr_err_intr_fault;
   // Ports for LPDDR4 Initialization Handshake Interface
   input          dfi_reset_n_in;
   input          init_mr_done_in;
   output         dfi_reset_n_ref;
   output         init_mr_done_out;
   // Ports for Manually exported pins
   input          Reset_async;
   input  [2:0]   acsm_ADME;
   input          acsm_CRE1;
   input          acsm_CRE2;
   input  [5:0]   acsm_FCA1;
   input  [5:0]   acsm_FCA2;
   input  [5:0]   acsm_FRA1;
   input  [5:0]   acsm_FRA2;
   input  [1:0]   acsm_MCS;
   input          acsm_MCSW;
   input          acsm_PDE;
   input          acsm_RET;
   input          acsm_RREN1;
   input          acsm_RREN2;
   input  [2:0]   bc_ADME;
   input          bc_CRE1;
   input          bc_CRE2;
   input  [3:0]   bc_FCA1;
   input  [3:0]   bc_FCA2;
   input  [4:0]   bc_FRA1;
   input  [4:0]   bc_FRA2;
   input  [1:0]   bc_MCS;
   input          bc_MCSW;
   input          bc_PDE;
   input          bc_RET;
   input          bc_RREN1;
   input          bc_RREN2;
   input  [2:0]   dccm_ADME;
   input          dccm_CRE1;
   input          dccm_CRE2;
   input  [4:0]   dccm_FCA1;
   input  [4:0]   dccm_FCA2;
   input  [6:0]   dccm_FRA1;
   input  [6:0]   dccm_FRA2;
   input  [1:0]   dccm_MCS;
   input          dccm_MCSW;
   input          dccm_PDE;
   input          dccm_RET;
   input          dccm_RREN1;
   input          dccm_RREN2;
   input  [2:0]   gs_ADME;
   input          gs_CRE1;
   input          gs_CRE2;
   input  [1:0]   gs_FCA1;
   input  [1:0]   gs_FCA2;
   input  [5:0]   gs_FRA1;
   input  [5:0]   gs_FRA2;
   input  [1:0]   gs_MCS;
   input          gs_MCSW;
   input          gs_PDE;
   input          gs_RET;
   input          gs_RREN1;
   input          gs_RREN2;
   input  [2:0]   iccm_ADME;
   input          iccm_CRE1;
   input          iccm_CRE2;
   input  [5:0]   iccm_FCA1;
   input  [5:0]   iccm_FCA2;
   input  [6:0]   iccm_FRA1;
   input  [6:0]   iccm_FRA2;
   input  [1:0]   iccm_MCS;
   input          iccm_MCSW;
   input          iccm_PDE;
   input          iccm_RET;
   input          iccm_RREN1;
   input          iccm_RREN2;
   input  [31:0]  paddr;
   input          penable;
   input  [2:0]   pie_ADME;
   input          pie_CRE1;
   input          pie_CRE2;
   input  [4:0]   pie_FCA1;
   input  [4:0]   pie_FCA2;
   input  [5:0]   pie_FRA1;
   input  [5:0]   pie_FRA2;
   input  [1:0]   pie_MCS;
   input          pie_MCSW;
   input          pie_PDE;
   input          pie_RET;
   input          pie_RREN1;
   input          pie_RREN2;
   input  [2:0]   pprot;
   input  [2:0]   pprot_pin;
   input          psel;
   input  [3:0]   pstrb;
   input  [31:0]  pwdata;
   input          pwrite;
   input  [5:0]   scan_shift_i;
   input  [2:0]   wdata_ADME;
   input          wdata_CRE1;
   input          wdata_CRE2;
   input  [4:0]   wdata_FCA1;
   input  [4:0]   wdata_FCA2;
   input  [4:0]   wdata_FRA1;
   input  [4:0]   wdata_FRA2;
   input          wdata_KCS;
   input  [1:0]   wdata_MCSRD;
   input  [1:0]   wdata_MCSWR;
   input          wdata_PDE;
   input          wdata_RET;
   input          wdata_RREN1;
   input          wdata_RREN2;
   output         acsm_PRN;
   output         bc_PRN;
   output         dccm_PRN;
   output         gs_PRN;
   output         iccm_PRN;
   output         pie_PRN;
   output [31:0]  prdata;
   output [3:0]   prdata_par;
   output         pready;
   output         pslverr;
   output         wdata_PRN;
   // Ports for Misc
   output [5:0]   PhyInt_fault;
   output [15:0]  PhyInt_n;
   output         dwc_lpddr5xphy_pll_lock;
   output         dwc_lpddr5xphy_pmu_busy;
   // Ports for Mode Register Read/Write
   output [31:0]  hif_mrr_data;
   output         hif_mrr_data_valid;
   // Ports for PLL Clock
   input          PllBypClk;
   input          PllRefClk;
   // Ports for Per-bank refresh Bank number
   output [5:0]   hif_refresh_req_bank;
   // Ports for Performance Logging Signals
   output [2:0]   perf_bank;
   output [1:0]   perf_bg;
   output         perf_dfi_rd_data_cycles;
   output         perf_dfi_wr_data_cycles;
   output         perf_hif_hi_pri_rd;
   output         perf_hif_rd;
   output         perf_hif_rd_or_wr;
   output         perf_hif_rmw;
   output         perf_hif_wr;
   output         perf_hpr_req_with_nocredit;
   output         perf_hpr_xact_when_critical;
   output         perf_ie_blk_hazard;
   output         perf_lpr_req_with_nocredit;
   output         perf_lpr_xact_when_critical;
   output         perf_op_is_activate;
   output         perf_op_is_cas;
   output         perf_op_is_cas_wck_sus;
   output         perf_op_is_cas_ws;
   output         perf_op_is_cas_ws_off;
   output         perf_op_is_crit_ref;
   output         perf_op_is_dqsosc_mpc;
   output         perf_op_is_dqsosc_mrr;
   output         perf_op_is_enter_dsm;
   output [1:0]   perf_op_is_enter_powerdown;
   output [1:0]   perf_op_is_enter_selfref;
   output         perf_op_is_load_mode;
   output         perf_op_is_mwr;
   output         perf_op_is_precharge;
   output         perf_op_is_rd;
   output         perf_op_is_rd_activate;
   output         perf_op_is_rd_or_wr;
   output         perf_op_is_refresh;
   output         perf_op_is_rfm;
   output         perf_op_is_spec_ref;
   output         perf_op_is_tcr_mrr;
   output         perf_op_is_wr;
   output         perf_op_is_zqlatch;
   output         perf_op_is_zqstart;
   output         perf_precharge_for_other;
   output         perf_precharge_for_rdwr;
   output [0:0]   perf_rank;
   output         perf_raw_hazard;
   output         perf_rdwr_transitions;
   output [1:0]   perf_selfref_mode;
   output         perf_visible_window_limit_reached_rd;
   output         perf_visible_window_limit_reached_wr;
   output         perf_war_hazard;
   output         perf_waw_hazard;
   output         perf_wr_xact_when_critical;
   output         perf_write_combine;
   output         perf_write_combine_noecc;
   output         perf_write_combine_wrecc;
   // Ports for Port Arbiter
   input  [1:0]   pa_rmask;
   input  [0:0]   pa_wmask;
   // Ports for Power and Ground
   output         VIO_TIEHI;
   // Ports for Register Visibility Control
   input          dis_regs_ecc_syndrome;
   // Ports for Reset
   input          Reset;
   // Ports for Scan
   input          scan_DlyTestClk;
   input          scan_asst_mode;
   input          scan_clk;
   input          scan_mode;
   input          scan_occ_bypass;
   input          scan_occ_reset;
   input          scan_shift_async;
   input          scan_shift_cg;
   input  [1367:0] scan_si;
   output [1367:0] scan_so;
   // Ports for TDR
   input          DdrPhyCsrCmdTdrCaptureEn;
   input          DdrPhyCsrCmdTdrShiftEn;
   input          DdrPhyCsrCmdTdrUpdateEn;
   input          DdrPhyCsrRdDataTdrCaptureEn;
   input          DdrPhyCsrRdDataTdrShiftEn;
   input          DdrPhyCsrRdDataTdrUpdateEn;
   input          TDRCLK;
   input          WRSTN;
   input          WSI;
   output         DdrPhyCsrCmdTdr_Tdo;
   output         DdrPhyCsrRdDataTdr_Tdo;
   // Ports for Test
   input          BurnIn;
   input          Iddq_mode;
   output [1:0]   dwc_lpddr5xphy_dto;

/*
   wire [10:0]  acsm_data_addr;
   wire         acsm_data_ce;
   wire         acsm_data_clk;
   wire [71:0]  acsm_data_din;
   wire [71:0]  acsm_data_dout;
   wire         acsm_data_we;
   wire [11:4]  bc_addr0;
   wire [11:4]  bc_addr1;
   wire [63:0]  bc_din0;
   wire [63:0]  bc_din1;
   wire [63:0]  bc_dout0;
   wire [63:0]  bc_dout1;
   wire         bc_me0;
   wire         bc_me1;
   wire         bc_ram0_clk;
   wire         bc_ram1_clk;
   wire         bc_we0;
   wire         bc_we1;
   wire [63:0]  bc_wem0;
   wire [63:0]  bc_wem1;
   wire         clk_dccm_bank0_hi;
   wire         clk_dccm_bank0_lo;
   wire         clk_dccm_bank1_hi;
   wire         clk_dccm_bank1_lo;
   wire [12:0]  dccm_bank0_addr_hi;
   wire [12:0]  dccm_bank0_addr_lo;
   wire         dccm_bank0_cs_hi;
   wire         dccm_bank0_cs_lo;
   wire [77:0]  dccm_bank0_din;
   wire [77:0]  dccm_bank0_dout;
   wire         dccm_bank0_we_hi;
   wire         dccm_bank0_we_lo;
   wire [9:0]   dccm_bank0_wem;
   wire [12:0]  dccm_bank1_addr_hi;
   wire [12:0]  dccm_bank1_addr_lo;
   wire         dccm_bank1_cs_hi;
   wire         dccm_bank1_cs_lo;
   wire [77:0]  dccm_bank1_din;
   wire [77:0]  dccm_bank1_dout;
   wire         dccm_bank1_we_hi;
   wire         dccm_bank1_we_lo;
   wire [9:0]   dccm_bank1_wem;
*/
   wire [3:0]   dfi0_wrdata_ecc_P0;
   wire [3:0]   dfi0_wrdata_ecc_P1;
   wire [3:0]   dfi0_wrdata_ecc_P2;
   wire [3:0]   dfi0_wrdata_ecc_P3;
   wire [3:0]   dfi1_wrdata_ecc_P0;
   wire [3:0]   dfi1_wrdata_ecc_P1;
   wire [3:0]   dfi1_wrdata_ecc_P2;
   wire [3:0]   dfi1_wrdata_ecc_P3;
   wire [7:0]   dwc_lpddr5xphy0_snoop_en_P0;
   wire [7:0]   dwc_lpddr5xphy0_snoop_en_P1;
   wire [7:0]   dwc_lpddr5xphy0_snoop_en_P2;
   wire [7:0]   dwc_lpddr5xphy0_snoop_en_P3;
   wire         dwc_lpddr5xphy0_snoop_osc_running;
   wire [7:0]   dwc_lpddr5xphy1_snoop_en_P0;
   wire [7:0]   dwc_lpddr5xphy1_snoop_en_P1;
   wire [7:0]   dwc_lpddr5xphy1_snoop_en_P2;
   wire [7:0]   dwc_lpddr5xphy1_snoop_en_P3;
   wire         dwc_lpddr5xphy1_snoop_osc_running;
  //  wire [13:4]  gs_addr0;
  //  wire [13:4]  gs_addr1;
  //  wire [7:0]   gs_din0;
  //  wire [7:0]   gs_din1;
  //  wire [7:0]   gs_dout0;
  //  wire [7:0]   gs_dout1;
  //  wire         gs_me0;
  //  wire         gs_me1;
  //  wire         gs_ram0_clk;
  //  wire         gs_ram1_clk;
  //  wire         gs_we0;
  //  wire         gs_we1;
  //  wire [7:0]   gs_wem0;
  //  wire [7:0]   gs_wem1;
   wire [23:0]  i_DWC_apb_decoder_ddrctl0_paddr;
   wire         i_DWC_apb_decoder_ddrctl0_penable;
   wire         i_DWC_apb_decoder_ddrctl0_psel;
   wire [31:0]  i_DWC_apb_decoder_ddrctl0_pwdata;
   wire         i_DWC_apb_decoder_ddrctl0_pwrite;
   wire [31:0]  i_DWC_apb_decoder_ddrphy_paddr;
   wire         i_DWC_apb_decoder_ddrphy_penable;
   wire [2:0]   i_DWC_apb_decoder_ddrphy_pprot;
   wire [2:0]   i_DWC_apb_decoder_ddrphy_pprot_pin;
   wire         i_DWC_apb_decoder_ddrphy_psel;
   wire [3:0]   i_DWC_apb_decoder_ddrphy_pstrb;
   wire [31:0]  i_DWC_apb_decoder_ddrphy_pwdata;
   wire         i_DWC_apb_decoder_ddrphy_pwrite;
   wire         i_DWC_ddr_ss_clk_blk_Reset_async_o;
   wire [1:0]   i_DWC_ddr_ss_clk_blk_bsm_clk;
   wire         i_DWC_ddr_ss_clk_blk_core_ddrc_core_clk_arb;
   wire         i_DWC_ddr_ss_clk_blk_core_ddrc_core_clk_te;
   wire [5:0]   i_DWC_ddr_ss_clk_blk_scan_shift_o;
   wire [31:0]  i_DWC_lpddr5x_phy_PRDATA_APB;
   wire [3:0]   i_DWC_lpddr5x_phy_PRDATA_PAR_APB;
   wire         i_DWC_lpddr5x_phy_PREADY_APB;
   wire         i_DWC_lpddr5x_phy_PSLVERR_APB;
   wire [0:0]   i_DWC_lpddr5x_phy_dfi0_ctrlupd_ack;
   wire [0:0]   i_DWC_lpddr5x_phy_dfi0_init_complete;
   wire [0:0]   i_DWC_lpddr5x_phy_dfi0_lp_ctrl_ack;
   wire [0:0]   i_DWC_lpddr5x_phy_dfi0_lp_data_ack;
   wire [31:0]  i_DWC_lpddr5x_phy_dfi0_rddata_W0;
   wire [31:0]  i_DWC_lpddr5x_phy_dfi0_rddata_W1;
   wire [31:0]  i_DWC_lpddr5x_phy_dfi0_rddata_W2;
   wire [31:0]  i_DWC_lpddr5x_phy_dfi0_rddata_W3;
   wire [3:0]   i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W0;
   wire [3:0]   i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W1;
   wire [3:0]   i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W2;
   wire [3:0]   i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W3;
   wire [1:0]   i_DWC_lpddr5x_phy_dfi0_rddata_valid_W0;
   wire [1:0]   i_DWC_lpddr5x_phy_dfi0_rddata_valid_W1;
   wire [1:0]   i_DWC_lpddr5x_phy_dfi0_rddata_valid_W2;
   wire [1:0]   i_DWC_lpddr5x_phy_dfi0_rddata_valid_W3;
   wire [0:0]   i_DWC_lpddr5x_phy_dfi1_ctrlupd_ack;
   wire [0:0]   i_DWC_lpddr5x_phy_dfi1_init_complete;
   wire [0:0]   i_DWC_lpddr5x_phy_dfi1_lp_ctrl_ack;
   wire [0:0]   i_DWC_lpddr5x_phy_dfi1_lp_data_ack;
   wire [31:0]  i_DWC_lpddr5x_phy_dfi1_rddata_W0;
   wire [31:0]  i_DWC_lpddr5x_phy_dfi1_rddata_W1;
   wire [31:0]  i_DWC_lpddr5x_phy_dfi1_rddata_W2;
   wire [31:0]  i_DWC_lpddr5x_phy_dfi1_rddata_W3;
   wire [3:0]   i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W0;
   wire [3:0]   i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W1;
   wire [3:0]   i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W2;
   wire [3:0]   i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W3;
   wire [1:0]   i_DWC_lpddr5x_phy_dfi1_rddata_valid_W0;
   wire [1:0]   i_DWC_lpddr5x_phy_dfi1_rddata_valid_W1;
   wire [1:0]   i_DWC_lpddr5x_phy_dfi1_rddata_valid_W2;
   wire [1:0]   i_DWC_lpddr5x_phy_dfi1_rddata_valid_W3;
   wire [255:0] i_DWC_uddrctl_mem_wrap_wdata_data_dout;
   wire [1:0]   i_uddrctl_bsm_clk_en;
   wire         i_uddrctl_clk_te_en;
   wire         i_uddrctl_core_clk_arb_en;
   wire [13:0]  i_uddrctl_dfi0_address_P0;
   wire [5:0]   i_uddrctl_dfi0_address_P1;
   wire [5:0]   i_uddrctl_dfi0_address_P2;
   wire [5:0]   i_uddrctl_dfi0_address_P3;
   wire [1:0]   i_uddrctl_dfi0_cke_P0;
   wire [1:0]   i_uddrctl_dfi0_cke_P1;
   wire [1:0]   i_uddrctl_dfi0_cke_P2;
   wire [1:0]   i_uddrctl_dfi0_cke_P3;
   wire [1:0]   i_uddrctl_dfi0_cs_P0;
   wire [1:0]   i_uddrctl_dfi0_cs_P1;
   wire [1:0]   i_uddrctl_dfi0_cs_P2;
   wire [1:0]   i_uddrctl_dfi0_cs_P3;
   wire         i_uddrctl_dfi0_ctrlupd_req;
   wire [1:0]   i_uddrctl_dfi0_ctrlupd_type;
   wire [0:0]   i_uddrctl_dfi0_dram_clk_disable_P0;
   wire [0:0]   i_uddrctl_dfi0_dram_clk_disable_P1;
   wire [0:0]   i_uddrctl_dfi0_dram_clk_disable_P2;
   wire [0:0]   i_uddrctl_dfi0_dram_clk_disable_P3;
   wire [1:0]   i_uddrctl_dfi0_freq_fsp;
   wire [1:0]   i_uddrctl_dfi0_freq_ratio;
   wire [4:0]   i_uddrctl_dfi0_frequency;
   wire         i_uddrctl_dfi0_init_start;
   wire         i_uddrctl_dfi0_lp_ctrl_req;
   wire [4:0]   i_uddrctl_dfi0_lp_ctrl_wakeup;
   wire         i_uddrctl_dfi0_lp_data_req;
   wire [4:0]   i_uddrctl_dfi0_lp_data_wakeup;
   wire [3:0]   i_uddrctl_dfi0_rddata_cs_P0;
   wire [3:0]   i_uddrctl_dfi0_rddata_cs_P1;
   wire [3:0]   i_uddrctl_dfi0_rddata_cs_P2;
   wire [3:0]   i_uddrctl_dfi0_rddata_cs_P3;
   wire [1:0]   i_uddrctl_dfi0_rddata_en_P0;
   wire [1:0]   i_uddrctl_dfi0_rddata_en_P1;
   wire [1:0]   i_uddrctl_dfi0_rddata_en_P2;
   wire [1:0]   i_uddrctl_dfi0_rddata_en_P3;
   wire [1:0]   i_uddrctl_dfi0_wck_cs_P0;
   wire [1:0]   i_uddrctl_dfi0_wck_cs_P1;
   wire [1:0]   i_uddrctl_dfi0_wck_cs_P2;
   wire [1:0]   i_uddrctl_dfi0_wck_cs_P3;
   wire [1:0]   i_uddrctl_dfi0_wck_en_P0;
   wire [1:0]   i_uddrctl_dfi0_wck_en_P1;
   wire [1:0]   i_uddrctl_dfi0_wck_en_P2;
   wire [1:0]   i_uddrctl_dfi0_wck_en_P3;
   wire [1:0]   i_uddrctl_dfi0_wck_toggle_P0;
   wire [1:0]   i_uddrctl_dfi0_wck_toggle_P1;
   wire [1:0]   i_uddrctl_dfi0_wck_toggle_P2;
   wire [1:0]   i_uddrctl_dfi0_wck_toggle_P3;
   wire [31:0]  i_uddrctl_dfi0_wrdata_P0;
   wire [31:0]  i_uddrctl_dfi0_wrdata_P1;
   wire [31:0]  i_uddrctl_dfi0_wrdata_P2;
   wire [31:0]  i_uddrctl_dfi0_wrdata_P3;
   wire [3:0]   i_uddrctl_dfi0_wrdata_cs_P0;
   wire [3:0]   i_uddrctl_dfi0_wrdata_cs_P1;
   wire [3:0]   i_uddrctl_dfi0_wrdata_cs_P2;
   wire [3:0]   i_uddrctl_dfi0_wrdata_cs_P3;
   wire [1:0]   i_uddrctl_dfi0_wrdata_en_P0;
   wire [1:0]   i_uddrctl_dfi0_wrdata_en_P1;
   wire [1:0]   i_uddrctl_dfi0_wrdata_en_P2;
   wire [1:0]   i_uddrctl_dfi0_wrdata_en_P3;
   wire [3:0]   i_uddrctl_dfi0_wrdata_mask_P0;
   wire [3:0]   i_uddrctl_dfi0_wrdata_mask_P1;
   wire [3:0]   i_uddrctl_dfi0_wrdata_mask_P2;
   wire [3:0]   i_uddrctl_dfi0_wrdata_mask_P3;
   wire [13:0]  i_uddrctl_dfi1_address_P0;
   wire [5:0]   i_uddrctl_dfi1_address_P1;
   wire [5:0]   i_uddrctl_dfi1_address_P2;
   wire [5:0]   i_uddrctl_dfi1_address_P3;
   wire [1:0]   i_uddrctl_dfi1_cke_P0;
   wire [1:0]   i_uddrctl_dfi1_cke_P1;
   wire [1:0]   i_uddrctl_dfi1_cke_P2;
   wire [1:0]   i_uddrctl_dfi1_cke_P3;
   wire [1:0]   i_uddrctl_dfi1_cs_P0;
   wire [1:0]   i_uddrctl_dfi1_cs_P1;
   wire [1:0]   i_uddrctl_dfi1_cs_P2;
   wire [1:0]   i_uddrctl_dfi1_cs_P3;
   wire         i_uddrctl_dfi1_ctrlupd_req;
   wire [1:0]   i_uddrctl_dfi1_ctrlupd_type;
   wire [0:0]   i_uddrctl_dfi1_dram_clk_disable_P0;
   wire [0:0]   i_uddrctl_dfi1_dram_clk_disable_P1;
   wire [0:0]   i_uddrctl_dfi1_dram_clk_disable_P2;
   wire [0:0]   i_uddrctl_dfi1_dram_clk_disable_P3;
   wire [1:0]   i_uddrctl_dfi1_freq_fsp;
   wire [1:0]   i_uddrctl_dfi1_freq_ratio;
   wire [4:0]   i_uddrctl_dfi1_frequency;
   wire         i_uddrctl_dfi1_init_start;
   wire         i_uddrctl_dfi1_lp_ctrl_req;
   wire [4:0]   i_uddrctl_dfi1_lp_ctrl_wakeup;
   wire         i_uddrctl_dfi1_lp_data_req;
   wire [4:0]   i_uddrctl_dfi1_lp_data_wakeup;
   wire [3:0]   i_uddrctl_dfi1_rddata_cs_P0;
   wire [3:0]   i_uddrctl_dfi1_rddata_cs_P1;
   wire [3:0]   i_uddrctl_dfi1_rddata_cs_P2;
   wire [3:0]   i_uddrctl_dfi1_rddata_cs_P3;
   wire [1:0]   i_uddrctl_dfi1_rddata_en_P0;
   wire [1:0]   i_uddrctl_dfi1_rddata_en_P1;
   wire [1:0]   i_uddrctl_dfi1_rddata_en_P2;
   wire [1:0]   i_uddrctl_dfi1_rddata_en_P3;
   wire [1:0]   i_uddrctl_dfi1_wck_cs_P0;
   wire [1:0]   i_uddrctl_dfi1_wck_cs_P1;
   wire [1:0]   i_uddrctl_dfi1_wck_cs_P2;
   wire [1:0]   i_uddrctl_dfi1_wck_cs_P3;
   wire [1:0]   i_uddrctl_dfi1_wck_en_P0;
   wire [1:0]   i_uddrctl_dfi1_wck_en_P1;
   wire [1:0]   i_uddrctl_dfi1_wck_en_P2;
   wire [1:0]   i_uddrctl_dfi1_wck_en_P3;
   wire [1:0]   i_uddrctl_dfi1_wck_toggle_P0;
   wire [1:0]   i_uddrctl_dfi1_wck_toggle_P1;
   wire [1:0]   i_uddrctl_dfi1_wck_toggle_P2;
   wire [1:0]   i_uddrctl_dfi1_wck_toggle_P3;
   wire [31:0]  i_uddrctl_dfi1_wrdata_P0;
   wire [31:0]  i_uddrctl_dfi1_wrdata_P1;
   wire [31:0]  i_uddrctl_dfi1_wrdata_P2;
   wire [31:0]  i_uddrctl_dfi1_wrdata_P3;
   wire [3:0]   i_uddrctl_dfi1_wrdata_cs_P0;
   wire [3:0]   i_uddrctl_dfi1_wrdata_cs_P1;
   wire [3:0]   i_uddrctl_dfi1_wrdata_cs_P2;
   wire [3:0]   i_uddrctl_dfi1_wrdata_cs_P3;
   wire [1:0]   i_uddrctl_dfi1_wrdata_en_P0;
   wire [1:0]   i_uddrctl_dfi1_wrdata_en_P1;
   wire [1:0]   i_uddrctl_dfi1_wrdata_en_P2;
   wire [1:0]   i_uddrctl_dfi1_wrdata_en_P3;
   wire [3:0]   i_uddrctl_dfi1_wrdata_mask_P0;
   wire [3:0]   i_uddrctl_dfi1_wrdata_mask_P1;
   wire [3:0]   i_uddrctl_dfi1_wrdata_mask_P2;
   wire [3:0]   i_uddrctl_dfi1_wrdata_mask_P3;
   wire [0:0]   i_uddrctl_dfi_reset_n;
   wire [31:0]  i_uddrctl_prdata;
   wire         i_uddrctl_pready;
   wire         i_uddrctl_pslverr;
   wire [255:0] i_uddrctl_wdataram_din;
   wire [31:0]  i_uddrctl_wdataram_mask;
   wire [6:0]   i_uddrctl_wdataram_raddr;
   wire         i_uddrctl_wdataram_re;
   wire [6:0]   i_uddrctl_wdataram_waddr;
   wire         i_uddrctl_wdataram_wr;
  //  wire         iccm0_bank0_clk;
  //  wire         iccm0_bank1_clk;
  //  wire [16:4]  iccm0_data_addr0;
  //  wire [16:4]  iccm0_data_addr1;
  //  wire         iccm0_data_cen0;
  //  wire         iccm0_data_cen1;
  //  wire [77:0]  iccm0_data_din0;
  //  wire [77:0]  iccm0_data_din1;
  //  wire [77:0]  iccm0_data_dout0;
  //  wire [77:0]  iccm0_data_dout1;
  //  wire [9:0]   iccm0_data_wem0;
  //  wire [9:0]   iccm0_data_wem1;
  //  wire         iccm0_data_wen0;
  //  wire         iccm0_data_wen1;
  //  wire [11:0]  pie_data_addr;
  //  wire         pie_data_ce;
  //  wire         pie_data_clk;
  //  wire [55:0]  pie_data_din;
  //  wire [55:0]  pie_data_dout;
  //  wire         pie_data_we;

   DWC_apb_decoder
      #(.pSS_APB_AW(32),
        .pSS_APB_DW(32),
        .pDDRCTL_APB_AW(24),
        .pDDRCTL_APB_DW(32),
        .pDDRPHY_APB_AW(32),
        .pDDRPHY_APB_DW(32),
        .pCSR_APB_AW(24),
        .pCSR_APB_DW(32)) i_DWC_apb_decoder
      (.pclk              (pclk),
       .presetn           (presetn),
       .paddr             (paddr),
       .pwdata            (pwdata),
       .pwrite            (pwrite),
       .psel              (psel),
       .penable           (penable),
       .pready            (pready),
       .prdata            (prdata),
       .pslverr           (pslverr),
       .pstrb             (pstrb),
       .pprot             (pprot),
       .pprot_pin         (pprot_pin),
       .prdata_par        (prdata_par),
       .ddrctl0_paddr     (i_DWC_apb_decoder_ddrctl0_paddr),
       .ddrctl0_pwdata    (i_DWC_apb_decoder_ddrctl0_pwdata),
       .ddrctl0_pwrite    (i_DWC_apb_decoder_ddrctl0_pwrite),
       .ddrctl0_psel      (i_DWC_apb_decoder_ddrctl0_psel),
       .ddrctl0_penable   (i_DWC_apb_decoder_ddrctl0_penable),
       .ddrctl0_pready    (i_uddrctl_pready),
       .ddrctl0_prdata    (i_uddrctl_prdata),
       .ddrctl0_pslverr   (i_uddrctl_pslverr),
       .ddrphy_paddr      (i_DWC_apb_decoder_ddrphy_paddr),
       .ddrphy_pwdata     (i_DWC_apb_decoder_ddrphy_pwdata),
       .ddrphy_pwrite     (i_DWC_apb_decoder_ddrphy_pwrite),
       .ddrphy_psel       (i_DWC_apb_decoder_ddrphy_psel),
       .ddrphy_penable    (i_DWC_apb_decoder_ddrphy_penable),
       .ddrphy_pstrb      (i_DWC_apb_decoder_ddrphy_pstrb),
       .ddrphy_pslverr    (i_DWC_lpddr5x_phy_PSLVERR_APB),
       .ddrphy_pready     (i_DWC_lpddr5x_phy_PREADY_APB),
       .ddrphy_prdata     (i_DWC_lpddr5x_phy_PRDATA_APB),
       .ddrphy_pprot      (i_DWC_apb_decoder_ddrphy_pprot),
       .ddrphy_pprot_pin  (i_DWC_apb_decoder_ddrphy_pprot_pin),
       .ddrphy_prdata_par (i_DWC_lpddr5x_phy_PRDATA_PAR_APB));

   DWC_ddr_ss_clk_blk i_DWC_ddr_ss_clk_blk
      (.Reset                  (Reset),
       .Reset_async            (Reset_async),
       .clk_te_en              (i_uddrctl_clk_te_en),
       .bsm_clk_en             (i_uddrctl_bsm_clk_en),
       .core_clk_arb_en        (i_uddrctl_core_clk_arb_en),
       .scan_shift_i           (scan_shift_i),
       .core_ddrc_core_clk_te  (i_DWC_ddr_ss_clk_blk_core_ddrc_core_clk_te),
       .bsm_clk                (i_DWC_ddr_ss_clk_blk_bsm_clk),
       .core_ddrc_core_clk_arb (i_DWC_ddr_ss_clk_blk_core_ddrc_core_clk_arb),
       .scan_shift_o           (i_DWC_ddr_ss_clk_blk_scan_shift_o),
       .Reset_async_o          (i_DWC_ddr_ss_clk_blk_Reset_async_o),
       .core_ddrc_core_clk     (core_ddrc_core_clk),
       .scanmode               (scan_mode));
   /*
   No PHY sram mems required for veloce
   DWC_ddrphy_mem_wrap i_DWC_ddrphy_mem_wrap
      (.acsm_data_clk      (acsm_data_clk),
       .acsm_data_dout     (acsm_data_dout),
       .acsm_data_din      (acsm_data_din),
       .acsm_data_addr     (acsm_data_addr),
       .acsm_data_ce       (acsm_data_ce),
       .acsm_data_we       (acsm_data_we),
       .acsm_PRN           (acsm_PRN),
       .acsm_MCS           (acsm_MCS),
       .acsm_MCSW          (acsm_MCSW),
       .acsm_PDE           (acsm_PDE),
       .acsm_RET           (acsm_RET),
       .acsm_ADME          (acsm_ADME),
       .acsm_CRE1          (acsm_CRE1),
       .acsm_CRE2          (acsm_CRE2),
       .acsm_FCA1          (acsm_FCA1),
       .acsm_FCA2          (acsm_FCA2),
       .acsm_RREN1         (acsm_RREN1),
       .acsm_RREN2         (acsm_RREN2),
       .acsm_FRA1          (acsm_FRA1),
       .acsm_FRA2          (acsm_FRA2),
       .iccm0_bank0_clk    (iccm0_bank0_clk),
       .iccm0_data_dout0   (iccm0_data_dout0),
       .iccm0_data_din0    (iccm0_data_din0),
       .iccm0_data_addr0   (iccm0_data_addr0),
       .iccm0_data_cen0    (iccm0_data_cen0),
       .iccm0_data_wen0    (iccm0_data_wen0),
       .iccm0_data_wem0    (iccm0_data_wem0),
       .iccm0_bank1_clk    (iccm0_bank1_clk),
       .iccm0_data_dout1   (iccm0_data_dout1),
       .iccm0_data_din1    (iccm0_data_din1),
       .iccm0_data_addr1   (iccm0_data_addr1),
       .iccm0_data_cen1    (iccm0_data_cen1),
       .iccm0_data_wen1    (iccm0_data_wen1),
       .iccm0_data_wem1    (iccm0_data_wem1),
       .iccm_PRN           (iccm_PRN),
       .iccm_MCS           (iccm_MCS),
       .iccm_MCSW          (iccm_MCSW),
       .iccm_PDE           (iccm_PDE),
       .iccm_RET           (iccm_RET),
       .iccm_ADME          (iccm_ADME),
       .iccm_CRE1          (iccm_CRE1),
       .iccm_CRE2          (iccm_CRE2),
       .iccm_FCA1          (iccm_FCA1),
       .iccm_FCA2          (iccm_FCA2),
       .iccm_RREN1         (iccm_RREN1),
       .iccm_RREN2         (iccm_RREN2),
       .iccm_FRA1          (iccm_FRA1),
       .iccm_FRA2          (iccm_FRA2),
       .clk_dccm_bank0_lo  (clk_dccm_bank0_lo),
       .clk_dccm_bank0_hi  (clk_dccm_bank0_hi),
       .dccm_bank0_cs_lo   (dccm_bank0_cs_lo),
       .dccm_bank0_cs_hi   (dccm_bank0_cs_hi),
       .dccm_bank0_addr_lo (dccm_bank0_addr_lo),
       .dccm_bank0_addr_hi (dccm_bank0_addr_hi),
       .dccm_bank0_we_lo   (dccm_bank0_we_lo),
       .dccm_bank0_we_hi   (dccm_bank0_we_hi),
       .dccm_bank0_wem     (dccm_bank0_wem),
       .dccm_bank0_din     (dccm_bank0_din),
       .dccm_bank0_dout    (dccm_bank0_dout),
       .clk_dccm_bank1_lo  (clk_dccm_bank1_lo),
       .clk_dccm_bank1_hi  (clk_dccm_bank1_hi),
       .dccm_bank1_cs_lo   (dccm_bank1_cs_lo),
       .dccm_bank1_cs_hi   (dccm_bank1_cs_hi),
       .dccm_bank1_addr_lo (dccm_bank1_addr_lo),
       .dccm_bank1_addr_hi (dccm_bank1_addr_hi),
       .dccm_bank1_we_lo   (dccm_bank1_we_lo),
       .dccm_bank1_we_hi   (dccm_bank1_we_hi),
       .dccm_bank1_wem     (dccm_bank1_wem),
       .dccm_bank1_din     (dccm_bank1_din),
       .dccm_bank1_dout    (dccm_bank1_dout),
       .dccm_PRN           (dccm_PRN),
       .dccm_MCS           (dccm_MCS),
       .dccm_MCSW          (dccm_MCSW),
       .dccm_PDE           (dccm_PDE),
       .dccm_RET           (dccm_RET),
       .dccm_ADME          (dccm_ADME),
       .dccm_CRE1          (dccm_CRE1),
       .dccm_CRE2          (dccm_CRE2),
       .dccm_FCA1          (dccm_FCA1),
       .dccm_FCA2          (dccm_FCA2),
       .dccm_RREN1         (dccm_RREN1),
       .dccm_RREN2         (dccm_RREN2),
       .dccm_FRA1          (dccm_FRA1),
       .dccm_FRA2          (dccm_FRA2),
       .bc_ram0_clk        (bc_ram0_clk),
       .bc_din0            (bc_din0),
       .bc_addr0           (bc_addr0),
       .bc_me0             (bc_me0),
       .bc_we0             (bc_we0),
       .bc_wem0            (bc_wem0),
       .bc_dout0           (bc_dout0),
       .bc_ram1_clk        (bc_ram1_clk),
       .bc_din1            (bc_din1),
       .bc_addr1           (bc_addr1),
       .bc_me1             (bc_me1),
       .bc_we1             (bc_we1),
       .bc_wem1            (bc_wem1),
       .bc_dout1           (bc_dout1),
       .bc_PRN             (bc_PRN),
       .bc_MCS             (bc_MCS),
       .bc_MCSW            (bc_MCSW),
       .bc_PDE             (bc_PDE),
       .bc_RET             (bc_RET),
       .bc_ADME            (bc_ADME),
       .bc_CRE1            (bc_CRE1),
       .bc_CRE2            (bc_CRE2),
       .bc_FCA1            (bc_FCA1),
       .bc_FCA2            (bc_FCA2),
       .bc_RREN1           (bc_RREN1),
       .bc_RREN2           (bc_RREN2),
       .bc_FRA1            (bc_FRA1),
       .bc_FRA2            (bc_FRA2),
       .gs_ram0_clk        (gs_ram0_clk),
       .gs_din0            (gs_din0),
       .gs_addr0           (gs_addr0),
       .gs_me0             (gs_me0),
       .gs_we0             (gs_we0),
       .gs_wem0            (gs_wem0),
       .gs_dout0           (gs_dout0),
       .gs_PRN             (gs_PRN),
       .gs_MCS             (gs_MCS),
       .gs_MCSW            (gs_MCSW),
       .gs_PDE             (gs_PDE),
       .gs_RET             (gs_RET),
       .gs_ADME            (gs_ADME),
       .gs_CRE1            (gs_CRE1),
       .gs_CRE2            (gs_CRE2),
       .gs_FCA1            (gs_FCA1),
       .gs_FCA2            (gs_FCA2),
       .gs_RREN1           (gs_RREN1),
       .gs_RREN2           (gs_RREN2),
       .gs_FRA1            (gs_FRA1),
       .gs_FRA2            (gs_FRA2),
       .gs_ram1_clk        (gs_ram1_clk),
       .gs_din1            (gs_din1),
       .gs_addr1           (gs_addr1),
       .gs_me1             (gs_me1),
       .gs_we1             (gs_we1),
       .gs_wem1            (gs_wem1),
       .gs_dout1           (gs_dout1),
       .pie_PRN            (pie_PRN),
       .pie_MCS            (pie_MCS),
       .pie_MCSW           (pie_MCSW),
       .pie_PDE            (pie_PDE),
       .pie_RET            (pie_RET),
       .pie_ADME           (pie_ADME),
       .pie_CRE1           (pie_CRE1),
       .pie_CRE2           (pie_CRE2),
       .pie_FCA1           (pie_FCA1),
       .pie_FCA2           (pie_FCA2),
       .pie_RREN1          (pie_RREN1),
       .pie_RREN2          (pie_RREN2),
       .pie_FRA1           (pie_FRA1),
       .pie_FRA2           (pie_FRA2),
       .pie_data_clk       (pie_data_clk),
       .pie_data_din       (pie_data_din),
       .pie_data_addr      (pie_data_addr),
       .pie_data_ce        (pie_data_ce),
       .pie_data_we        (pie_data_we),
       .pie_data_dout      (pie_data_dout));
  */
   DWC_uddrctl_mem_wrap i_DWC_uddrctl_mem_wrap
      (.wdata_PRN        (wdata_PRN),
       .wdata_MCSRD      (wdata_MCSRD),
       .wdata_MCSWR      (wdata_MCSWR),
       .wdata_PDE        (wdata_PDE),
       .wdata_RET        (wdata_RET),
       .wdata_KCS        (wdata_KCS),
       .wdata_ADME       (wdata_ADME),
       .wdata_CRE1       (wdata_CRE1),
       .wdata_CRE2       (wdata_CRE2),
       .wdata_FCA1       (wdata_FCA1),
       .wdata_FCA2       (wdata_FCA2),
       .wdata_RREN1      (wdata_RREN1),
       .wdata_RREN2      (wdata_RREN2),
       .wdata_FRA1       (wdata_FRA1),
       .wdata_FRA2       (wdata_FRA2),
       .sram_clk         (core_ddrc_core_clk),
       .wdata_data_we    (i_uddrctl_wdataram_wr),
       .wdata_data_re    (i_uddrctl_wdataram_re),
       .wdata_data_wem   (i_uddrctl_wdataram_mask),
       .wdata_data_raddr (i_uddrctl_wdataram_raddr),
       .wdata_data_waddr (i_uddrctl_wdataram_waddr),
       .wdata_data_din   (i_uddrctl_wdataram_din),
       .wdata_data_dout  (i_DWC_uddrctl_mem_wrap_wdata_data_dout));

   DWC_ddrctl i_uddrctl
      (.core_ddrc_core_clk                   (core_ddrc_core_clk),
       .core_ddrc_core_clk_apbrw             (core_ddrc_core_clk_apbrw),
       .core_ddrc_rstn                       (core_ddrc_rstn),
       .core_ddrc_core_clk_te                (i_DWC_ddr_ss_clk_blk_core_ddrc_core_clk_te),
       .clk_te_en                            (i_uddrctl_clk_te_en),
       .bsm_clk                              (i_DWC_ddr_ss_clk_blk_bsm_clk),
       .bsm_clk_en                           (i_uddrctl_bsm_clk_en),
       .core_ddrc_core_clk_arb               (i_DWC_ddr_ss_clk_blk_core_ddrc_core_clk_arb),
       .core_clk_arb_en                      (i_uddrctl_core_clk_arb_en),
       .aresetn_0                            (aresetn_0),
       .aclk_0                               (aclk_0),
       .awid_0                               (awid_0),
       .awaddr_0                             (awaddr_0),
       .awlen_0                              (awlen_0),
       .awsize_0                             (awsize_0),
       .awburst_0                            (awburst_0),
       .awlock_0                             (awlock_0),
       .awcache_0                            (awcache_0),
       .awprot_0                             (awprot_0),
       .awvalid_0                            (awvalid_0),
       .awready_0                            (awready_0),
       .awqos_0                              (awqos_0),
       .awurgent_0                           (awurgent_0),
       .awpoison_0                           (awpoison_0),
       .awpoison_intr_0                      (awpoison_intr_0),
       .awregion_0                           (awregion_0),
       .waq_wcount_0                         (waq_wcount_0),
       .waq_pop_0                            (waq_pop_0),
       .waq_push_0                           (waq_push_0),
       .waq_split_0                          (waq_split_0),
       .awautopre_0                          (awautopre_0),
       .wdata_0                              (wdata_0),
       .wstrb_0                              (wstrb_0),
       .wlast_0                              (wlast_0),
       .wvalid_0                             (wvalid_0),
       .wready_0                             (wready_0),
       .bid_0                                (bid_0),
       .bresp_0                              (bresp_0),
       .bvalid_0                             (bvalid_0),
       .bready_0                             (bready_0),
       .arid_0                               (arid_0),
       .araddr_0                             (araddr_0),
       .arlen_0                              (arlen_0),
       .arsize_0                             (arsize_0),
       .arburst_0                            (arburst_0),
       .arlock_0                             (arlock_0),
       .arcache_0                            (arcache_0),
       .arprot_0                             (arprot_0),
       .arvalid_0                            (arvalid_0),
       .arready_0                            (arready_0),
       .arqos_0                              (arqos_0),
       .arpoison_0                           (arpoison_0),
       .arpoison_intr_0                      (arpoison_intr_0),
       .arregion_0                           (arregion_0),
       .arurgentb_0                          (arurgentb_0),
       .arurgentr_0                          (arurgentr_0),
       .raqb_wcount_0                        (raqb_wcount_0),
       .raqr_wcount_0                        (raqr_wcount_0),
       .raqb_pop_0                           (raqb_pop_0),
       .raqb_push_0                          (raqb_push_0),
       .raqr_pop_0                           (raqr_pop_0),
       .raqr_push_0                          (raqr_push_0),
       .raq_split_0                          (raq_split_0),
       .arautopre_0                          (arautopre_0),
       .rid_0                                (rid_0),
       .rdata_0                              (rdata_0),
       .rresp_0                              (rresp_0),
       .rlast_0                              (rlast_0),
       .rvalid_0                             (rvalid_0),
       .rready_0                             (rready_0),
       .csysreq_0                            (csysreq_0),
       .csysack_0                            (csysack_0),
       .cactive_0                            (cactive_0),
       .wdataram_din                         (i_uddrctl_wdataram_din),
       .wdataram_dout                        (i_DWC_uddrctl_mem_wrap_wdata_data_dout),
       .wdataram_mask                        (i_uddrctl_wdataram_mask),
       .wdataram_wr                          (i_uddrctl_wdataram_wr),
       .wdataram_waddr                       (i_uddrctl_wdataram_waddr),
       .wdataram_re                          (i_uddrctl_wdataram_re),
       .wdataram_raddr                       (i_uddrctl_wdataram_raddr),
       .hif_mrr_data                         (hif_mrr_data),
       .hif_mrr_data_valid                   (hif_mrr_data_valid),
       .csysreq_ddrc                         (csysreq_ddrc),
       .csysmode_ddrc                        (csysmode_ddrc),
       .csysfrequency_ddrc                   (csysfrequency_ddrc),
       .csysdiscamdrain_ddrc                 (csysdiscamdrain_ddrc),
       .csysfsp_ddrc                         (csysfsp_ddrc),
       .csysack_ddrc                         (csysack_ddrc),
       .cactive_ddrc                         (cactive_ddrc),
       .stat_ddrc_reg_selfref_type           (stat_ddrc_reg_selfref_type),
       .dbg_dfi_ie_cmd_type                  (dbg_dfi_ie_cmd_type),
       .perf_hif_rd_or_wr                    (perf_hif_rd_or_wr),
       .perf_hif_wr                          (perf_hif_wr),
       .perf_hif_rd                          (perf_hif_rd),
       .perf_hif_rmw                         (perf_hif_rmw),
       .perf_hif_hi_pri_rd                   (perf_hif_hi_pri_rd),
       .perf_dfi_wr_data_cycles              (perf_dfi_wr_data_cycles),
       .perf_dfi_rd_data_cycles              (perf_dfi_rd_data_cycles),
       .perf_hpr_xact_when_critical          (perf_hpr_xact_when_critical),
       .perf_lpr_xact_when_critical          (perf_lpr_xact_when_critical),
       .perf_wr_xact_when_critical           (perf_wr_xact_when_critical),
       .perf_op_is_activate                  (perf_op_is_activate),
       .perf_op_is_rd_or_wr                  (perf_op_is_rd_or_wr),
       .perf_op_is_rd_activate               (perf_op_is_rd_activate),
       .perf_op_is_rd                        (perf_op_is_rd),
       .perf_op_is_wr                        (perf_op_is_wr),
       .perf_op_is_mwr                       (perf_op_is_mwr),
       .perf_op_is_cas                       (perf_op_is_cas),
       .perf_op_is_cas_ws                    (perf_op_is_cas_ws),
       .perf_op_is_cas_ws_off                (perf_op_is_cas_ws_off),
       .perf_op_is_cas_wck_sus               (perf_op_is_cas_wck_sus),
       .perf_op_is_enter_dsm                 (perf_op_is_enter_dsm),
       .perf_op_is_rfm                       (perf_op_is_rfm),
       .perf_op_is_precharge                 (perf_op_is_precharge),
       .perf_precharge_for_rdwr              (perf_precharge_for_rdwr),
       .perf_precharge_for_other             (perf_precharge_for_other),
       .perf_rdwr_transitions                (perf_rdwr_transitions),
       .perf_write_combine                   (perf_write_combine),
       .perf_write_combine_noecc             (perf_write_combine_noecc),
       .perf_write_combine_wrecc             (perf_write_combine_wrecc),
       .perf_war_hazard                      (perf_war_hazard),
       .perf_raw_hazard                      (perf_raw_hazard),
       .perf_waw_hazard                      (perf_waw_hazard),
       .perf_ie_blk_hazard                   (perf_ie_blk_hazard),
       .perf_op_is_enter_selfref             (perf_op_is_enter_selfref),
       .perf_op_is_enter_powerdown           (perf_op_is_enter_powerdown),
       .perf_selfref_mode                    (perf_selfref_mode),
       .perf_op_is_refresh                   (perf_op_is_refresh),
       .perf_op_is_crit_ref                  (perf_op_is_crit_ref),
       .perf_op_is_spec_ref                  (perf_op_is_spec_ref),
       .perf_op_is_load_mode                 (perf_op_is_load_mode),
       .perf_rank                            (perf_rank),
       .perf_bank                            (perf_bank),
       .perf_bg                              (perf_bg),
       .perf_hpr_req_with_nocredit           (perf_hpr_req_with_nocredit),
       .perf_lpr_req_with_nocredit           (perf_lpr_req_with_nocredit),
       .perf_visible_window_limit_reached_rd (perf_visible_window_limit_reached_rd),
       .perf_visible_window_limit_reached_wr (perf_visible_window_limit_reached_wr),
       .perf_op_is_dqsosc_mpc                (perf_op_is_dqsosc_mpc),
       .perf_op_is_dqsosc_mrr                (perf_op_is_dqsosc_mrr),
       .perf_op_is_tcr_mrr                   (perf_op_is_tcr_mrr),
       .perf_op_is_zqstart                   (perf_op_is_zqstart),
       .perf_op_is_zqlatch                   (perf_op_is_zqlatch),
       .lpr_credit_cnt                       (lpr_credit_cnt),
       .hpr_credit_cnt                       (hpr_credit_cnt),
       .wr_credit_cnt                        (wr_credit_cnt),
       .wrecc_credit_cnt                     (wrecc_credit_cnt),
       .pa_rmask                             (pa_rmask),
       .pa_wmask                             (pa_wmask),
       .sbr_clk                              (sbr_clk),
       .sbr_resetn                           (sbr_resetn),
       .sbr_done_intr                        (sbr_done_intr),
       .dfi0_address_P0                      (i_uddrctl_dfi0_address_P0),
       .dfi0_address_P1                      (i_uddrctl_dfi0_address_P1),
       .dfi0_address_P2                      (i_uddrctl_dfi0_address_P2),
       .dfi0_address_P3                      (i_uddrctl_dfi0_address_P3),
       .dfi0_cke_P0                          (i_uddrctl_dfi0_cke_P0),
       .dfi0_cke_P1                          (i_uddrctl_dfi0_cke_P1),
       .dfi0_cke_P2                          (i_uddrctl_dfi0_cke_P2),
       .dfi0_cke_P3                          (i_uddrctl_dfi0_cke_P3),
       .dfi0_cs_P0                           (i_uddrctl_dfi0_cs_P0),
       .dfi0_cs_P1                           (i_uddrctl_dfi0_cs_P1),
       .dfi0_cs_P2                           (i_uddrctl_dfi0_cs_P2),
       .dfi0_cs_P3                           (i_uddrctl_dfi0_cs_P3),
       .dfi0_dram_clk_disable_P0             (i_uddrctl_dfi0_dram_clk_disable_P0),
       .dfi0_dram_clk_disable_P1             (i_uddrctl_dfi0_dram_clk_disable_P1),
       .dfi0_dram_clk_disable_P2             (i_uddrctl_dfi0_dram_clk_disable_P2),
       .dfi0_dram_clk_disable_P3             (i_uddrctl_dfi0_dram_clk_disable_P3),
       .dfi1_address_P0                      (i_uddrctl_dfi1_address_P0),
       .dfi1_address_P1                      (i_uddrctl_dfi1_address_P1),
       .dfi1_address_P2                      (i_uddrctl_dfi1_address_P2),
       .dfi1_address_P3                      (i_uddrctl_dfi1_address_P3),
       .dfi1_cke_P0                          (i_uddrctl_dfi1_cke_P0),
       .dfi1_cke_P1                          (i_uddrctl_dfi1_cke_P1),
       .dfi1_cke_P2                          (i_uddrctl_dfi1_cke_P2),
       .dfi1_cke_P3                          (i_uddrctl_dfi1_cke_P3),
       .dfi1_cs_P0                           (i_uddrctl_dfi1_cs_P0),
       .dfi1_cs_P1                           (i_uddrctl_dfi1_cs_P1),
       .dfi1_cs_P2                           (i_uddrctl_dfi1_cs_P2),
       .dfi1_cs_P3                           (i_uddrctl_dfi1_cs_P3),
       .dfi1_dram_clk_disable_P0             (i_uddrctl_dfi1_dram_clk_disable_P0),
       .dfi1_dram_clk_disable_P1             (i_uddrctl_dfi1_dram_clk_disable_P1),
       .dfi1_dram_clk_disable_P2             (i_uddrctl_dfi1_dram_clk_disable_P2),
       .dfi1_dram_clk_disable_P3             (i_uddrctl_dfi1_dram_clk_disable_P3),
       .dfi_reset_n                          (i_uddrctl_dfi_reset_n),
       .dfi0_wrdata_P0                       (i_uddrctl_dfi0_wrdata_P0),
       .dfi0_wrdata_P1                       (i_uddrctl_dfi0_wrdata_P1),
       .dfi0_wrdata_P2                       (i_uddrctl_dfi0_wrdata_P2),
       .dfi0_wrdata_P3                       (i_uddrctl_dfi0_wrdata_P3),
       .dfi0_wrdata_en_P0                    (i_uddrctl_dfi0_wrdata_en_P0),
       .dfi0_wrdata_en_P1                    (i_uddrctl_dfi0_wrdata_en_P1),
       .dfi0_wrdata_en_P2                    (i_uddrctl_dfi0_wrdata_en_P2),
       .dfi0_wrdata_en_P3                    (i_uddrctl_dfi0_wrdata_en_P3),
       .dfi0_wrdata_mask_P0                  (i_uddrctl_dfi0_wrdata_mask_P0),
       .dfi0_wrdata_mask_P1                  (i_uddrctl_dfi0_wrdata_mask_P1),
       .dfi0_wrdata_mask_P2                  (i_uddrctl_dfi0_wrdata_mask_P2),
       .dfi0_wrdata_mask_P3                  (i_uddrctl_dfi0_wrdata_mask_P3),
       .dfi0_wrdata_cs_P0                    (i_uddrctl_dfi0_wrdata_cs_P0),
       .dfi0_wrdata_cs_P1                    (i_uddrctl_dfi0_wrdata_cs_P1),
       .dfi0_wrdata_cs_P2                    (i_uddrctl_dfi0_wrdata_cs_P2),
       .dfi0_wrdata_cs_P3                    (i_uddrctl_dfi0_wrdata_cs_P3),
       .dfi1_wrdata_P0                       (i_uddrctl_dfi1_wrdata_P0),
       .dfi1_wrdata_P1                       (i_uddrctl_dfi1_wrdata_P1),
       .dfi1_wrdata_P2                       (i_uddrctl_dfi1_wrdata_P2),
       .dfi1_wrdata_P3                       (i_uddrctl_dfi1_wrdata_P3),
       .dfi1_wrdata_en_P0                    (i_uddrctl_dfi1_wrdata_en_P0),
       .dfi1_wrdata_en_P1                    (i_uddrctl_dfi1_wrdata_en_P1),
       .dfi1_wrdata_en_P2                    (i_uddrctl_dfi1_wrdata_en_P2),
       .dfi1_wrdata_en_P3                    (i_uddrctl_dfi1_wrdata_en_P3),
       .dfi1_wrdata_mask_P0                  (i_uddrctl_dfi1_wrdata_mask_P0),
       .dfi1_wrdata_mask_P1                  (i_uddrctl_dfi1_wrdata_mask_P1),
       .dfi1_wrdata_mask_P2                  (i_uddrctl_dfi1_wrdata_mask_P2),
       .dfi1_wrdata_mask_P3                  (i_uddrctl_dfi1_wrdata_mask_P3),
       .dfi1_wrdata_cs_P0                    (i_uddrctl_dfi1_wrdata_cs_P0),
       .dfi1_wrdata_cs_P1                    (i_uddrctl_dfi1_wrdata_cs_P1),
       .dfi1_wrdata_cs_P2                    (i_uddrctl_dfi1_wrdata_cs_P2),
       .dfi1_wrdata_cs_P3                    (i_uddrctl_dfi1_wrdata_cs_P3),
       .dfi0_rddata_W0                       (i_DWC_lpddr5x_phy_dfi0_rddata_W0),
       .dfi0_rddata_W1                       (i_DWC_lpddr5x_phy_dfi0_rddata_W1),
       .dfi0_rddata_W2                       (i_DWC_lpddr5x_phy_dfi0_rddata_W2),
       .dfi0_rddata_W3                       (i_DWC_lpddr5x_phy_dfi0_rddata_W3),
       .dfi0_rddata_cs_P0                    (i_uddrctl_dfi0_rddata_cs_P0),
       .dfi0_rddata_cs_P1                    (i_uddrctl_dfi0_rddata_cs_P1),
       .dfi0_rddata_cs_P2                    (i_uddrctl_dfi0_rddata_cs_P2),
       .dfi0_rddata_cs_P3                    (i_uddrctl_dfi0_rddata_cs_P3),
       .dfi0_rddata_dbi_W0                   (i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W0),
       .dfi0_rddata_dbi_W1                   (i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W1),
       .dfi0_rddata_dbi_W2                   (i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W2),
       .dfi0_rddata_dbi_W3                   (i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W3),
       .dfi0_rddata_en_P0                    (i_uddrctl_dfi0_rddata_en_P0),
       .dfi0_rddata_en_P1                    (i_uddrctl_dfi0_rddata_en_P1),
       .dfi0_rddata_en_P2                    (i_uddrctl_dfi0_rddata_en_P2),
       .dfi0_rddata_en_P3                    (i_uddrctl_dfi0_rddata_en_P3),
       .dfi0_rddata_valid_W0                 (i_DWC_lpddr5x_phy_dfi0_rddata_valid_W0),
       .dfi0_rddata_valid_W1                 (i_DWC_lpddr5x_phy_dfi0_rddata_valid_W1),
       .dfi0_rddata_valid_W2                 (i_DWC_lpddr5x_phy_dfi0_rddata_valid_W2),
       .dfi0_rddata_valid_W3                 (i_DWC_lpddr5x_phy_dfi0_rddata_valid_W3),
       .dfi1_rddata_W0                       (i_DWC_lpddr5x_phy_dfi1_rddata_W0),
       .dfi1_rddata_W1                       (i_DWC_lpddr5x_phy_dfi1_rddata_W1),
       .dfi1_rddata_W2                       (i_DWC_lpddr5x_phy_dfi1_rddata_W2),
       .dfi1_rddata_W3                       (i_DWC_lpddr5x_phy_dfi1_rddata_W3),
       .dfi1_rddata_cs_P0                    (i_uddrctl_dfi1_rddata_cs_P0),
       .dfi1_rddata_cs_P1                    (i_uddrctl_dfi1_rddata_cs_P1),
       .dfi1_rddata_cs_P2                    (i_uddrctl_dfi1_rddata_cs_P2),
       .dfi1_rddata_cs_P3                    (i_uddrctl_dfi1_rddata_cs_P3),
       .dfi1_rddata_dbi_W0                   (i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W0),
       .dfi1_rddata_dbi_W1                   (i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W1),
       .dfi1_rddata_dbi_W2                   (i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W2),
       .dfi1_rddata_dbi_W3                   (i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W3),
       .dfi1_rddata_en_P0                    (i_uddrctl_dfi1_rddata_en_P0),
       .dfi1_rddata_en_P1                    (i_uddrctl_dfi1_rddata_en_P1),
       .dfi1_rddata_en_P2                    (i_uddrctl_dfi1_rddata_en_P2),
       .dfi1_rddata_en_P3                    (i_uddrctl_dfi1_rddata_en_P3),
       .dfi1_rddata_valid_W0                 (i_DWC_lpddr5x_phy_dfi1_rddata_valid_W0),
       .dfi1_rddata_valid_W1                 (i_DWC_lpddr5x_phy_dfi1_rddata_valid_W1),
       .dfi1_rddata_valid_W2                 (i_DWC_lpddr5x_phy_dfi1_rddata_valid_W2),
       .dfi1_rddata_valid_W3                 (i_DWC_lpddr5x_phy_dfi1_rddata_valid_W3),
       .dfi0_ctrlupd_req                     (i_uddrctl_dfi0_ctrlupd_req),
       .dfi0_ctrlupd_ack                     (i_DWC_lpddr5x_phy_dfi0_ctrlupd_ack),
       .dfi0_ctrlupd_type                    (i_uddrctl_dfi0_ctrlupd_type),
       .dfi0_phyupd_req                      ('0),
       .dfi0_phyupd_type                     ('0),
       .dfi0_phyupd_ack                      (),           // PHY UPD not used in veloce phy
       .dfi1_ctrlupd_req                     (i_uddrctl_dfi1_ctrlupd_req),
       .dfi1_ctrlupd_ack                     (i_DWC_lpddr5x_phy_dfi1_ctrlupd_ack),
       .dfi1_ctrlupd_type                    (i_uddrctl_dfi1_ctrlupd_type),
       .dfi1_phyupd_req                      ('0),
       .dfi1_phyupd_type                     ('0),
       .dfi1_phyupd_ack                      (),          // PHY UPD not used in veloce phy
       .dfi0_freq_ratio                      (i_uddrctl_dfi0_freq_ratio),
       .dfi0_init_complete                   (i_DWC_lpddr5x_phy_dfi0_init_complete),
       .dfi0_init_start                      (i_uddrctl_dfi0_init_start),
       .dfi0_frequency                       (i_uddrctl_dfi0_frequency),
       .dfi0_freq_fsp                        (i_uddrctl_dfi0_freq_fsp),
       .dfi1_freq_ratio                      (i_uddrctl_dfi1_freq_ratio),
       .dfi1_init_complete                   (i_DWC_lpddr5x_phy_dfi1_init_complete),
       .dfi1_init_start                      (i_uddrctl_dfi1_init_start),
       .dfi1_frequency                       (i_uddrctl_dfi1_frequency),
       .dfi1_freq_fsp                        (i_uddrctl_dfi1_freq_fsp),
       // Veloce PHY does not have DFI PHY master interface, tying off
       .dfi0_phymstr_req                     ('0),
       .dfi0_phymstr_cs_state                ('0),
       .dfi0_phymstr_state_sel               ('0),
       .dfi0_phymstr_type                    ('0),
       .dfi0_phymstr_ack                     (),
       .dfi1_phymstr_req                     ('0),
       .dfi1_phymstr_cs_state                ('0),
       .dfi1_phymstr_state_sel               ('0),
       .dfi1_phymstr_type                    ('0),
       .dfi1_phymstr_ack                     (),
       .dfi0_lp_ctrl_req                     (i_uddrctl_dfi0_lp_ctrl_req),
       .dfi0_lp_ctrl_ack                     (i_DWC_lpddr5x_phy_dfi0_lp_ctrl_ack),
       .dfi0_lp_ctrl_wakeup                  (i_uddrctl_dfi0_lp_ctrl_wakeup),
       .dfi0_lp_data_req                     (i_uddrctl_dfi0_lp_data_req),
       .dfi0_lp_data_ack                     (i_DWC_lpddr5x_phy_dfi0_lp_data_ack),
       .dfi0_lp_data_wakeup                  (i_uddrctl_dfi0_lp_data_wakeup),
       .dfi1_lp_ctrl_req                     (i_uddrctl_dfi1_lp_ctrl_req),
       .dfi1_lp_ctrl_ack                     (i_DWC_lpddr5x_phy_dfi1_lp_ctrl_ack),
       .dfi1_lp_ctrl_wakeup                  (i_uddrctl_dfi1_lp_ctrl_wakeup),
       .dfi1_lp_data_req                     (i_uddrctl_dfi1_lp_data_req),
       .dfi1_lp_data_ack                     (i_DWC_lpddr5x_phy_dfi1_lp_data_ack),
       .dfi1_lp_data_wakeup                  (i_uddrctl_dfi1_lp_data_wakeup),
       .dfi0_wck_cs_P0                       (i_uddrctl_dfi0_wck_cs_P0),
       .dfi0_wck_cs_P1                       (i_uddrctl_dfi0_wck_cs_P1),
       .dfi0_wck_cs_P2                       (i_uddrctl_dfi0_wck_cs_P2),
       .dfi0_wck_cs_P3                       (i_uddrctl_dfi0_wck_cs_P3),
       .dfi0_wck_en_P0                       (i_uddrctl_dfi0_wck_en_P0),
       .dfi0_wck_en_P1                       (i_uddrctl_dfi0_wck_en_P1),
       .dfi0_wck_en_P2                       (i_uddrctl_dfi0_wck_en_P2),
       .dfi0_wck_en_P3                       (i_uddrctl_dfi0_wck_en_P3),
       .dfi0_wck_toggle_P0                   (i_uddrctl_dfi0_wck_toggle_P0),
       .dfi0_wck_toggle_P1                   (i_uddrctl_dfi0_wck_toggle_P1),
       .dfi0_wck_toggle_P2                   (i_uddrctl_dfi0_wck_toggle_P2),
       .dfi0_wck_toggle_P3                   (i_uddrctl_dfi0_wck_toggle_P3),
       .dfi1_wck_cs_P0                       (i_uddrctl_dfi1_wck_cs_P0),
       .dfi1_wck_cs_P1                       (i_uddrctl_dfi1_wck_cs_P1),
       .dfi1_wck_cs_P2                       (i_uddrctl_dfi1_wck_cs_P2),
       .dfi1_wck_cs_P3                       (i_uddrctl_dfi1_wck_cs_P3),
       .dfi1_wck_en_P0                       (i_uddrctl_dfi1_wck_en_P0),
       .dfi1_wck_en_P1                       (i_uddrctl_dfi1_wck_en_P1),
       .dfi1_wck_en_P2                       (i_uddrctl_dfi1_wck_en_P2),
       .dfi1_wck_en_P3                       (i_uddrctl_dfi1_wck_en_P3),
       .dfi1_wck_toggle_P0                   (i_uddrctl_dfi1_wck_toggle_P0),
       .dfi1_wck_toggle_P1                   (i_uddrctl_dfi1_wck_toggle_P1),
       .dfi1_wck_toggle_P2                   (i_uddrctl_dfi1_wck_toggle_P2),
       .dfi1_wck_toggle_P3                   (i_uddrctl_dfi1_wck_toggle_P3),
       .dwc_lpddr5xphy0_snoop_en_P0          (dwc_lpddr5xphy0_snoop_en_P0),
       .dwc_lpddr5xphy0_snoop_en_P1          (dwc_lpddr5xphy0_snoop_en_P1),
       .dwc_lpddr5xphy0_snoop_en_P2          (dwc_lpddr5xphy0_snoop_en_P2),
       .dwc_lpddr5xphy0_snoop_en_P3          (dwc_lpddr5xphy0_snoop_en_P3),
       .dwc_lpddr5xphy0_snoop_osc_running    (dwc_lpddr5xphy0_snoop_osc_running),
       .dwc_lpddr5xphy1_snoop_en_P0          (dwc_lpddr5xphy1_snoop_en_P0),
       .dwc_lpddr5xphy1_snoop_en_P1          (dwc_lpddr5xphy1_snoop_en_P1),
       .dwc_lpddr5xphy1_snoop_en_P2          (dwc_lpddr5xphy1_snoop_en_P2),
       .dwc_lpddr5xphy1_snoop_en_P3          (dwc_lpddr5xphy1_snoop_en_P3),
       .dwc_lpddr5xphy1_snoop_osc_running    (dwc_lpddr5xphy1_snoop_osc_running),
       .dfi_reset_n_in                       (dfi_reset_n_in),
       .dfi_reset_n_ref                      (dfi_reset_n_ref),
       .init_mr_done_in                      (init_mr_done_in),
       .init_mr_done_out                     (init_mr_done_out),
       .dis_regs_ecc_syndrome                (dis_regs_ecc_syndrome),
       .ecc_corrected_err_intr               (ecc_corrected_err_intr),
       .ecc_corrected_err_intr_fault         (ecc_corrected_err_intr_fault),
       .ecc_uncorrected_err_intr             (ecc_uncorrected_err_intr),
       .ecc_uncorrected_err_intr_fault       (ecc_uncorrected_err_intr_fault),
       .ecc_ap_err_intr                      (ecc_ap_err_intr),
       .ecc_ap_err_intr_fault                (ecc_ap_err_intr_fault),
       .rd_linkecc_uncorr_err_intr           (rd_linkecc_uncorr_err_intr),
       .rd_linkecc_uncorr_err_intr_fault     (rd_linkecc_uncorr_err_intr_fault),
       .rd_linkecc_corr_err_intr             (rd_linkecc_corr_err_intr),
       .rd_linkecc_corr_err_intr_fault       (rd_linkecc_corr_err_intr_fault),
       .pclk                                 (pclk),
       .pclk_apbrw                           (pclk_apbrw),
       .presetn                              (presetn),
       .paddr                                (i_DWC_apb_decoder_ddrctl0_paddr),
       .pwdata                               (i_DWC_apb_decoder_ddrctl0_pwdata),
       .pwrite                               (i_DWC_apb_decoder_ddrctl0_pwrite),
       .psel                                 (i_DWC_apb_decoder_ddrctl0_psel),
       .penable                              (i_DWC_apb_decoder_ddrctl0_penable),
       .pready                               (i_uddrctl_pready),
       .prdata                               (i_uddrctl_prdata),
       .pslverr                              (i_uddrctl_pslverr),
       .hif_refresh_req_bank                 (hif_refresh_req_bank),
       .derate_temp_limit_intr               (derate_temp_limit_intr),
       .derate_temp_limit_intr_fault         (derate_temp_limit_intr_fault),
       .dfi0_wrdata_ecc_P0                   (dfi0_wrdata_ecc_P0),
       .dfi0_wrdata_ecc_P1                   (dfi0_wrdata_ecc_P1),
       .dfi0_wrdata_ecc_P2                   (dfi0_wrdata_ecc_P2),
       .dfi0_wrdata_ecc_P3                   (dfi0_wrdata_ecc_P3),
       .dfi1_wrdata_ecc_P0                   (dfi1_wrdata_ecc_P0),
       .dfi1_wrdata_ecc_P1                   (dfi1_wrdata_ecc_P1),
       .dfi1_wrdata_ecc_P2                   (dfi1_wrdata_ecc_P2),
       .dfi1_wrdata_ecc_P3                   (dfi1_wrdata_ecc_P3));






    // DFI_to_PHY
    parameter RESET_PERIOD              = 50;
    parameter AXI_DATA_WIDTH            = 512;
    parameter INT_MEM_ADD_SIZE          = 24;
    parameter DFI_CHIP_SELECT_WIDTH     =  4'd2 ; // Chip Select width
    parameter DQ_SIZE                   =  'd16  ;
    parameter N_DDR_PER_RANK            =  1    ;
    parameter DFI_DATA_ENABLE_WIDTH     =   'd2 ; // Read/Write Data Enable width
    // Timing parameters
    parameter T_DRAM_CLK_DISABLE        =      2;
    parameter T_DRAM_CLK_ENABLE         =      2;
    parameter T_INIT_COMPLETE           =      1;
    parameter T_INIT_START              =      1;
    parameter SM_RL_OFFSET              =      4'd0;
    parameter SM_WL_OFFSET              =      4'd0 ;
    parameter T_CTRL_DELAY              =      1 ;
    parameter T_CTRLUPD_DELAY           =      2 ;
    parameter T_CTRLUPD_MIN             =      4 ;
    parameter T_CTRLUPD_MAX             =      11;
    parameter T_CTRLUPD_WIDTH           =      6 ;
    parameter T_LP_DELAY                =      12;
    parameter T_LP_RESP                 =      12;
    parameter DFI_LP_VERSION            =      1'b0 ;
    parameter DFI_LP_THRESHOLD          =      6'd32;
    parameter SM_DBI_APPLY_MRR          =      0;
    parameter INIT_START_FIRST          =      1;
    parameter INIT_COMPLETE_DELAY       =      4;
    parameter PHY_DBI_MODE              =      0;
    parameter Dynamic_latency_offset    =      0;
    parameter DFI_DATA_BIT_ENABLE       =      {256{1'b1}};
    parameter DENSITY                   =      8;

    logic dfi_clk;
    assign dfi_clk = core_ddrc_core_clk;
    reg lpddr5_wck;

    wire [31:0] dfi_tphy_wrlat, dfi_tphy_wrdata, dfi_tphy_rddata_en, dfi_tphy_rdlat;
    assign dfi_tphy_wrlat = 'd10;
    assign dfi_tphy_wrdata = 'd2;
    assign dfi_tphy_rddata_en = 'd4;
    assign dfi_tphy_rdlat = 'd2;

    lpddr5_dfi_phy #(
      .DFI_CHIP_SELECT_WIDTH  (DFI_CHIP_SELECT_WIDTH),
      .DQ_SIZE                (DQ_SIZE),
      .N_DDR_PER_RANK         (N_DDR_PER_RANK),
      .DFI_DATA_ENABLE_WIDTH  (DFI_DATA_ENABLE_WIDTH),
      .T_DRAM_CLK_DISABLE     (T_DRAM_CLK_DISABLE),
      .T_DRAM_CLK_ENABLE      (T_DRAM_CLK_ENABLE),
      .T_INIT_COMPLETE        (T_INIT_COMPLETE),
      .T_INIT_START           (T_INIT_START),
      .RL_OFFSET              (SM_RL_OFFSET),
      .WL_OFFSET              (SM_WL_OFFSET),
      .T_CTRL_DELAY           (T_CTRL_DELAY),
      .T_CTRLUPD_DELAY        (T_CTRLUPD_DELAY),
      .T_CTRLUPD_MIN          (T_CTRLUPD_MIN),
      .T_CTRLUPD_MAX          (T_CTRLUPD_MAX),
      .T_CTRLUPD_WIDTH        (T_CTRLUPD_WIDTH),
      .T_LP_DELAY             (T_LP_DELAY),
      .T_LP_RESP              (T_LP_RESP),
      .DFI_LP_VERSION         (DFI_LP_VERSION),
      .DFI_LP_THRESHOLD       (DFI_LP_THRESHOLD),
      .INIT_START_FIRST       (INIT_START_FIRST),
      .INIT_COMPLETE_DELAY    (INIT_COMPLETE_DELAY),
      .PHY_DBI_MODE           (PHY_DBI_MODE),
      .Dynamic_latency_offset (Dynamic_latency_offset),
      .DBI_APPLY_MRR          (SM_DBI_APPLY_MRR),
      .RDLAT_MODE             (1),
      .DFI_DATA_BIT_ENABLE    (DFI_DATA_BIT_ENABLE),
      .DENSITY                (DENSITY) // = 32Gb or 4GB
    ) dfi0_lpddr5 (
      .dfi_clk              (dfi_clk),
      .lpddr5_wck           (lpddr5_wck),
      .reset_n              (~Reset),
      .t_phy_wrlat          (dfi_tphy_wrlat),
      .t_phy_wrdata         (dfi_tphy_wrdata),
      .t_rddata_en          (dfi_tphy_rddata_en),
      .t_phy_rdlat          (dfi_tphy_rdlat),
      .dfi_address_p0       (i_uddrctl_dfi0_address_P0), // TODO: figure out what to do with i_uddrctl_dfi1_address_P1 i_uddrctl_dfi1_address_P2 i_uddrctl_dfi1_address_P3 as the veloce DFIPHY does not provide ports for these
      .dfi_cs_p0            (i_uddrctl_dfi0_cs_P0), // SNPS has also P1-P3, but by the looks of the databook these are always the same as P0, so this should be fine.
      .dfi_dram_clk_disable ({i_uddrctl_dfi0_dram_clk_disable_P0, i_uddrctl_dfi0_dram_clk_disable_P1}), // SNPS CTRL provides 4 bits (one per phase), veloce PHY takes 1 bit per devices (dual rank -> 2 devices). By the looks of the datasheet, all P0-3 ctrl signals are actually the same signal, just using 0 and 1 for now.
      .dfi_reset_n_p0       ({2{i_uddrctl_dfi_reset_n}}), //SNPS has only one dfi_reset_n signal for all ranks and channels. broadcasting for rank here.
      .dfi_wrdata_p0        (i_uddrctl_dfi0_wrdata_P0),
      .dfi_wrdata_p1        (i_uddrctl_dfi0_wrdata_P1),
      .dfi_wrdata_p2        (i_uddrctl_dfi0_wrdata_P2),
      .dfi_wrdata_p3        (i_uddrctl_dfi0_wrdata_P3),
      .dfi_wrdata_en_p0     (i_uddrctl_dfi0_wrdata_en_P0),
      .dfi_wrdata_en_p1     (i_uddrctl_dfi0_wrdata_en_P1),
      .dfi_wrdata_en_p2     (i_uddrctl_dfi0_wrdata_en_P2),
      .dfi_wrdata_en_p3     (i_uddrctl_dfi0_wrdata_en_P3),
      .dfi_wrdata_cs_p0     ({|i_uddrctl_dfi0_wrdata_cs_P0[3:2],|i_uddrctl_dfi0_wrdata_cs_P0[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_wrdata_cs_p1     ({|i_uddrctl_dfi0_wrdata_cs_P1[3:2],|i_uddrctl_dfi0_wrdata_cs_P1[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_wrdata_cs_p2     ({|i_uddrctl_dfi0_wrdata_cs_P2[3:2],|i_uddrctl_dfi0_wrdata_cs_P2[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_wrdata_cs_p3     ({|i_uddrctl_dfi0_wrdata_cs_P3[3:2],|i_uddrctl_dfi0_wrdata_cs_P3[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_wrdata_mask_p0   (i_uddrctl_dfi0_wrdata_mask_P0),
      .dfi_wrdata_mask_p1   (i_uddrctl_dfi0_wrdata_mask_P1),
      .dfi_wrdata_mask_p2   (i_uddrctl_dfi0_wrdata_mask_P2),
      .dfi_wrdata_mask_p3   (i_uddrctl_dfi0_wrdata_mask_P3),
      .dfi_rddata_en_p0     (i_uddrctl_dfi0_rddata_en_P0),
      .dfi_rddata_en_p1     (i_uddrctl_dfi0_rddata_en_P1),
      .dfi_rddata_en_p2     (i_uddrctl_dfi0_rddata_en_P2),
      .dfi_rddata_en_p3     (i_uddrctl_dfi0_rddata_en_P3),
      .dfi_rddata_cs_p0     ({|i_uddrctl_dfi0_rddata_cs_P0[3:2],|i_uddrctl_dfi0_rddata_cs_P0[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_rddata_cs_p1     ({|i_uddrctl_dfi0_rddata_cs_P1[3:2],|i_uddrctl_dfi0_rddata_cs_P1[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_rddata_cs_p2     ({|i_uddrctl_dfi0_rddata_cs_P2[3:2],|i_uddrctl_dfi0_rddata_cs_P2[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_rddata_cs_p3     ({|i_uddrctl_dfi0_rddata_cs_P3[3:2],|i_uddrctl_dfi0_rddata_cs_P3[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_freq_fsp         (i_uddrctl_dfi0_freq_fsp),
      .dfi_freq_ratio       (i_uddrctl_dfi0_freq_ratio),
      .dfi_init_start       (i_uddrctl_dfi0_init_start),
      .dfi_lp_ctrl_req      (i_uddrctl_dfi0_lp_ctrl_req),
      .dfi_lp_ctrl_wakeup   ({1'b0,i_uddrctl_dfi0_lp_ctrl_wakeup}), // SNPS ctrl provides only 5b, Veloce PHY needs 6.
      .dfi_lp_data_req      (i_uddrctl_dfi0_lp_data_req),
      .dfi_lp_data_wakeup   ({1'b0, i_uddrctl_dfi0_lp_data_wakeup}),
      .dfi_ctrlupd_req      (i_uddrctl_dfi0_ctrlupd_req),
      .dfi_wck_cs_p0        ({i_uddrctl_dfi0_wck_cs_P0[1], i_uddrctl_dfi0_wck_cs_P0[0], i_uddrctl_dfi0_wck_cs_P0[1:0]}),
      .dfi_wck_cs_p1        ({i_uddrctl_dfi0_wck_cs_P1[1], i_uddrctl_dfi0_wck_cs_P1[0], i_uddrctl_dfi0_wck_cs_P1[1:0]}),
      .dfi_wck_cs_p2        ({i_uddrctl_dfi0_wck_cs_P2[1], i_uddrctl_dfi0_wck_cs_P2[0], i_uddrctl_dfi0_wck_cs_P2[1:0]}),
      .dfi_wck_cs_p3        ({i_uddrctl_dfi0_wck_cs_P3[1], i_uddrctl_dfi0_wck_cs_P3[0], i_uddrctl_dfi0_wck_cs_P3[1:0]}),
      .dfi_wck_en_p0        (i_uddrctl_dfi0_wck_en_P0),
      .dfi_wck_en_p1        (i_uddrctl_dfi0_wck_en_P1),
      .dfi_wck_en_p2        (i_uddrctl_dfi0_wck_en_P2),
      .dfi_wck_en_p3        (i_uddrctl_dfi0_wck_en_P3),
      .dfi_wck_toggle_p0    ({i_uddrctl_dfi0_wck_toggle_P0[1], i_uddrctl_dfi0_wck_toggle_P0[0], i_uddrctl_dfi0_wck_toggle_P0[1:0]}),
      .dfi_wck_toggle_p1    ({i_uddrctl_dfi0_wck_toggle_P1[1], i_uddrctl_dfi0_wck_toggle_P1[0], i_uddrctl_dfi0_wck_toggle_P1[1:0]}),
      .dfi_wck_toggle_p2    ({i_uddrctl_dfi0_wck_toggle_P2[1], i_uddrctl_dfi0_wck_toggle_P2[0], i_uddrctl_dfi0_wck_toggle_P2[1:0]}),
      .dfi_wck_toggle_p3    ({i_uddrctl_dfi0_wck_toggle_P3[1], i_uddrctl_dfi0_wck_toggle_P3[0], i_uddrctl_dfi0_wck_toggle_P3[1:0]}),
      .dfi_rddata_w0        (i_DWC_lpddr5x_phy_dfi0_rddata_W0),
      .dfi_rddata_w1        (i_DWC_lpddr5x_phy_dfi0_rddata_W1),
      .dfi_rddata_w2        (i_DWC_lpddr5x_phy_dfi0_rddata_W2),
      .dfi_rddata_w3        (i_DWC_lpddr5x_phy_dfi0_rddata_W3),
      .dfi_rddata_dbi_w0    (i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W0),
      .dfi_rddata_dbi_w1    (i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W1),
      .dfi_rddata_dbi_w2    (i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W2),
      .dfi_rddata_dbi_w3    (i_DWC_lpddr5x_phy_dfi0_rddata_dbi_W3),
      .dfi_rddata_dnv_w0    (), // not used by SNPS ctrl
      .dfi_rddata_dnv_w1    (), // not used by SNPS ctrl
      .dfi_rddata_dnv_w2    (), // not used by SNPS ctrl
      .dfi_rddata_dnv_w3    (), // not used by SNPS ctrl
      .dfi_rddata_valid_w0  (i_DWC_lpddr5x_phy_dfi0_rddata_valid_W0),
      .dfi_rddata_valid_w1  (i_DWC_lpddr5x_phy_dfi0_rddata_valid_W1),
      .dfi_rddata_valid_w2  (i_DWC_lpddr5x_phy_dfi0_rddata_valid_W2),
      .dfi_rddata_valid_w3  (i_DWC_lpddr5x_phy_dfi0_rddata_valid_W3),
      .dfi_init_complete    (i_DWC_lpddr5x_phy_dfi0_init_complete),
      .dfi_ctrlupd_ack      (i_DWC_lpddr5x_phy_dfi0_ctrlupd_ack),
      .dfi_lp_ctrl_ack      (i_DWC_lpddr5x_phy_dfi0_lp_ctrl_ack),
      .dfi_lp_data_ack      (i_DWC_lpddr5x_phy_dfi0_lp_data_ack),
      .dfi_error            (), // SNPS ctrl does not use this.
      .dfi_error_info       () // SNPS ctrl does not use this.
    );

    lpddr5_dfi_phy #(
      .DFI_CHIP_SELECT_WIDTH  (DFI_CHIP_SELECT_WIDTH),
      .DQ_SIZE                (DQ_SIZE),
      .N_DDR_PER_RANK         (N_DDR_PER_RANK),
      .DFI_DATA_ENABLE_WIDTH  (DFI_DATA_ENABLE_WIDTH),
      .T_DRAM_CLK_DISABLE     (T_DRAM_CLK_DISABLE),
      .T_DRAM_CLK_ENABLE      (T_DRAM_CLK_ENABLE),
      .T_INIT_COMPLETE        (T_INIT_COMPLETE),
      .T_INIT_START           (T_INIT_START),
      .RL_OFFSET              (SM_RL_OFFSET),
      .WL_OFFSET              (SM_WL_OFFSET),
      .T_CTRL_DELAY           (T_CTRL_DELAY),
      .T_CTRLUPD_DELAY        (T_CTRLUPD_DELAY),
      .T_CTRLUPD_MIN          (T_CTRLUPD_MIN),
      .T_CTRLUPD_MAX          (T_CTRLUPD_MAX),
      .T_CTRLUPD_WIDTH        (T_CTRLUPD_WIDTH),
      .T_LP_DELAY             (T_LP_DELAY),
      .T_LP_RESP              (T_LP_RESP),
      .DFI_LP_VERSION         (DFI_LP_VERSION),
      .DFI_LP_THRESHOLD       (DFI_LP_THRESHOLD),
      .INIT_START_FIRST       (INIT_START_FIRST),
      .INIT_COMPLETE_DELAY    (INIT_COMPLETE_DELAY),
      .PHY_DBI_MODE           (PHY_DBI_MODE),
      .Dynamic_latency_offset (Dynamic_latency_offset),
      .DBI_APPLY_MRR          (SM_DBI_APPLY_MRR),
      .RDLAT_MODE             (1),
      .DFI_DATA_BIT_ENABLE    (DFI_DATA_BIT_ENABLE),
      .DENSITY                (DENSITY) // = 32Gb or 4GB
    ) dfi1_lpddr5 (
      .dfi_clk              (dfi_clk),
      .lpddr5_wck           (lpddr5_wck),
      .reset_n              (~Reset),
      .t_phy_wrlat          (dfi_tphy_wrlat),
      .t_phy_wrdata         (dfi_tphy_wrdata),
      .t_rddata_en          (dfi_tphy_rddata_en),
      .t_phy_rdlat          (dfi_tphy_rdlat),
      .dfi_address_p0       (i_uddrctl_dfi1_address_P0), // TODO: figure out what to do with i_uddrctl_dfi1_address_P1 i_uddrctl_dfi1_address_P2 i_uddrctl_dfi1_address_P3 as the veloce DFIPHY does not provide ports for these
      .dfi_cs_p0            (i_uddrctl_dfi1_cs_P0),
      .dfi_dram_clk_disable ({i_uddrctl_dfi1_dram_clk_disable_P0, i_uddrctl_dfi1_dram_clk_disable_P1}), // SNPS CTRL provides 4 bits (one per phase), veloce PHY takes 1 bit per devices (dual rank -> 2 devices). By the looks of the datasheet, all P0-3 ctrl signals are actually the same signal, just using 0 and 1 for now.,
      .dfi_reset_n_p0       ({2{i_uddrctl_dfi_reset_n}}),
      .dfi_wrdata_p0        (i_uddrctl_dfi1_wrdata_P0),
      .dfi_wrdata_p1        (i_uddrctl_dfi1_wrdata_P1),
      .dfi_wrdata_p2        (i_uddrctl_dfi1_wrdata_P2),
      .dfi_wrdata_p3        (i_uddrctl_dfi1_wrdata_P3),
      .dfi_wrdata_en_p0     (i_uddrctl_dfi1_wrdata_en_P0),
      .dfi_wrdata_en_p1     (i_uddrctl_dfi1_wrdata_en_P1),
      .dfi_wrdata_en_p2     (i_uddrctl_dfi1_wrdata_en_P2),
      .dfi_wrdata_en_p3     (i_uddrctl_dfi1_wrdata_en_P3),
      .dfi_wrdata_cs_p0     ({|i_uddrctl_dfi1_wrdata_cs_P0[3:2],|i_uddrctl_dfi1_wrdata_cs_P0[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_wrdata_cs_p1     ({|i_uddrctl_dfi1_wrdata_cs_P1[3:2],|i_uddrctl_dfi1_wrdata_cs_P1[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_wrdata_cs_p2     ({|i_uddrctl_dfi1_wrdata_cs_P2[3:2],|i_uddrctl_dfi1_wrdata_cs_P2[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_wrdata_cs_p3     ({|i_uddrctl_dfi1_wrdata_cs_P3[3:2],|i_uddrctl_dfi1_wrdata_cs_P3[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_wrdata_mask_p0   (i_uddrctl_dfi1_wrdata_mask_P0),
      .dfi_wrdata_mask_p1   (i_uddrctl_dfi1_wrdata_mask_P1),
      .dfi_wrdata_mask_p2   (i_uddrctl_dfi1_wrdata_mask_P2),
      .dfi_wrdata_mask_p3   (i_uddrctl_dfi1_wrdata_mask_P3),
      .dfi_rddata_en_p0     (i_uddrctl_dfi1_rddata_en_P0),
      .dfi_rddata_en_p1     (i_uddrctl_dfi1_rddata_en_P1),
      .dfi_rddata_en_p2     (i_uddrctl_dfi1_rddata_en_P2),
      .dfi_rddata_en_p3     (i_uddrctl_dfi1_rddata_en_P3),
      .dfi_rddata_cs_p0     ({|i_uddrctl_dfi1_rddata_cs_P0[3:2],|i_uddrctl_dfi1_rddata_cs_P0[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_rddata_cs_p1     ({|i_uddrctl_dfi1_rddata_cs_P1[3:2],|i_uddrctl_dfi1_rddata_cs_P1[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_rddata_cs_p2     ({|i_uddrctl_dfi1_rddata_cs_P2[3:2],|i_uddrctl_dfi1_rddata_cs_P2[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_rddata_cs_p3     ({|i_uddrctl_dfi1_rddata_cs_P3[3:2],|i_uddrctl_dfi1_rddata_cs_P3[1:0]}), // SNPS CTRL allows half buswidth operation and has 4b for this signal, Veloce PHY only has 2b for this signal, oring together the impact of the buswidth
      .dfi_freq_fsp         (i_uddrctl_dfi1_freq_fsp),
      .dfi_freq_ratio       (i_uddrctl_dfi1_freq_ratio),
      // .dfi_frequency     (i_uddrctl_dfi1_frequency),
      .dfi_init_start       (i_uddrctl_dfi1_init_start),
      .dfi_lp_ctrl_req      (i_uddrctl_dfi1_lp_ctrl_req),
      .dfi_lp_ctrl_wakeup   ({1'b0,i_uddrctl_dfi1_lp_ctrl_wakeup}), // SNPS ctrl provides only 5b, Veloce PHY needs 6.
      .dfi_lp_data_req      (i_uddrctl_dfi1_lp_data_req),
      .dfi_lp_data_wakeup   ({1'b0, i_uddrctl_dfi1_lp_data_wakeup}),
      .dfi_ctrlupd_req      (i_uddrctl_dfi1_ctrlupd_req),
      .dfi_wck_cs_p0        ({i_uddrctl_dfi1_wck_cs_P0[1], i_uddrctl_dfi1_wck_cs_P0[0], i_uddrctl_dfi1_wck_cs_P0[1:0]}),
      .dfi_wck_cs_p1        ({i_uddrctl_dfi1_wck_cs_P1[1], i_uddrctl_dfi1_wck_cs_P1[0], i_uddrctl_dfi1_wck_cs_P1[1:0]}),
      .dfi_wck_cs_p2        ({i_uddrctl_dfi1_wck_cs_P2[1], i_uddrctl_dfi1_wck_cs_P2[0], i_uddrctl_dfi1_wck_cs_P2[1:0]}),
      .dfi_wck_cs_p3        ({i_uddrctl_dfi1_wck_cs_P3[1], i_uddrctl_dfi1_wck_cs_P3[0], i_uddrctl_dfi1_wck_cs_P3[1:0]}),
      .dfi_wck_en_p0        (i_uddrctl_dfi1_wck_en_P0),
      .dfi_wck_en_p1        (i_uddrctl_dfi1_wck_en_P1),
      .dfi_wck_en_p2        (i_uddrctl_dfi1_wck_en_P2),
      .dfi_wck_en_p3        (i_uddrctl_dfi1_wck_en_P3),
      .dfi_wck_toggle_p0    ({i_uddrctl_dfi1_wck_toggle_P0[1], i_uddrctl_dfi1_wck_toggle_P0[0], i_uddrctl_dfi1_wck_toggle_P0[1:0]}),
      .dfi_wck_toggle_p1    ({i_uddrctl_dfi1_wck_toggle_P1[1], i_uddrctl_dfi1_wck_toggle_P1[0], i_uddrctl_dfi1_wck_toggle_P1[1:0]}),
      .dfi_wck_toggle_p2    ({i_uddrctl_dfi1_wck_toggle_P2[1], i_uddrctl_dfi1_wck_toggle_P2[0], i_uddrctl_dfi1_wck_toggle_P2[1:0]}),
      .dfi_wck_toggle_p3    ({i_uddrctl_dfi1_wck_toggle_P3[1], i_uddrctl_dfi1_wck_toggle_P3[0], i_uddrctl_dfi1_wck_toggle_P3[1:0]}),
      .dfi_rddata_w0        (i_DWC_lpddr5x_phy_dfi1_rddata_W0),
      .dfi_rddata_w1        (i_DWC_lpddr5x_phy_dfi1_rddata_W1),
      .dfi_rddata_w2        (i_DWC_lpddr5x_phy_dfi1_rddata_W2),
      .dfi_rddata_w3        (i_DWC_lpddr5x_phy_dfi1_rddata_W3),
      .dfi_rddata_dbi_w0    (i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W0),
      .dfi_rddata_dbi_w1    (i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W1),
      .dfi_rddata_dbi_w2    (i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W2),
      .dfi_rddata_dbi_w3    (i_DWC_lpddr5x_phy_dfi1_rddata_dbi_W3),
      .dfi_rddata_dnv_w0    (), // not used by SNPS ctrl
      .dfi_rddata_dnv_w1    (), // not used by SNPS ctrl
      .dfi_rddata_dnv_w2    (), // not used by SNPS ctrl
      .dfi_rddata_dnv_w3    (), // not used by SNPS ctrl
      .dfi_rddata_valid_w0  (i_DWC_lpddr5x_phy_dfi1_rddata_valid_W0),
      .dfi_rddata_valid_w1  (i_DWC_lpddr5x_phy_dfi1_rddata_valid_W1),
      .dfi_rddata_valid_w2  (i_DWC_lpddr5x_phy_dfi1_rddata_valid_W2),
      .dfi_rddata_valid_w3  (i_DWC_lpddr5x_phy_dfi1_rddata_valid_W3),
      .dfi_init_complete    (i_DWC_lpddr5x_phy_dfi1_init_complete),
      .dfi_ctrlupd_ack      (i_DWC_lpddr5x_phy_dfi1_ctrlupd_ack),
      .dfi_lp_ctrl_ack      (i_DWC_lpddr5x_phy_dfi1_lp_ctrl_ack),
      .dfi_lp_data_ack      (i_DWC_lpddr5x_phy_dfi1_lp_data_ack),
      .dfi_error            (), // SNPS ctrl does not use this.
      .dfi_error_info       () // SNPS ctrl does not use this.
    );

    // Signals normally driven by SNPS PHY but not available on veloce PHY
    assign PhyInt_fault = '0;
    assign PhyInt_n = '0;
    assign dwc_lpddr5xphy_pll_lock = '0;
    assign dwc_lpddr5xphy_pmu_busy = '0;
    assign scan_so = '0;
    assign i_DWC_lpddr5x_phy_PREADY_APB = '0;
    assign i_DWC_lpddr5x_phy_PRDATA_APB = '0;
    assign i_DWC_lpddr5x_phy_PRDATA_PAR_APB = '0;
    assign i_DWC_lpddr5x_phy_PSLVERR_APB = '0;
    assign dwc_lpddr5xphy_dto = '0;
    assign DdrPhyCsrCmdTdr_Tdo = '0;
    assign DdrPhyCsrRdDataTdr_Tdo = '0;
    assign RxBypassDataPad_A = '0;
    assign RxBypassDataPad_B0_D0 = '0;
    assign RxBypassDataPad_B0_D1 = '0;
    assign RxBypassDataPad_B0_D10 = '0;
    assign RxBypassDataPad_B0_D11 = '0;
    assign RxBypassDataPad_B0_D12 = '0;
    assign RxBypassDataPad_B0_D2 = '0;
    assign RxBypassDataPad_B0_D3 = '0;
    assign RxBypassDataPad_B0_D4 = '0;
    assign RxBypassDataPad_B0_D5 = '0;
    assign RxBypassDataPad_B0_D6 = '0;
    assign RxBypassDataPad_B0_D7 = '0;
    assign RxBypassDataPad_B0_D8 = '0;
    assign RxBypassDataPad_B0_D9 = '0;
    assign RxBypassDataPad_B1_D0 = '0;
    assign RxBypassDataPad_B1_D1 = '0;
    assign RxBypassDataPad_B1_D10 = '0;
    assign RxBypassDataPad_B1_D11 = '0;
    assign RxBypassDataPad_B1_D12 = '0;
    assign RxBypassDataPad_B1_D2 = '0;
    assign RxBypassDataPad_B1_D3 = '0;
    assign RxBypassDataPad_B1_D4 = '0;
    assign RxBypassDataPad_B1_D5 = '0;
    assign RxBypassDataPad_B1_D6 = '0;
    assign RxBypassDataPad_B1_D7 = '0;
    assign RxBypassDataPad_B1_D8 = '0;
    assign RxBypassDataPad_B1_D9 = '0;
    assign RxBypassDataPad_B2_D0 = '0;
    assign RxBypassDataPad_B2_D1 = '0;
    assign RxBypassDataPad_B2_D10 = '0;
    assign RxBypassDataPad_B2_D11 = '0;
    assign RxBypassDataPad_B2_D12 = '0;
    assign RxBypassDataPad_B2_D2 = '0;
    assign RxBypassDataPad_B2_D3 = '0;
    assign RxBypassDataPad_B2_D4 = '0;
    assign RxBypassDataPad_B2_D5 = '0;
    assign RxBypassDataPad_B2_D6 = '0;
    assign RxBypassDataPad_B2_D7 = '0;
    assign RxBypassDataPad_B2_D8 = '0;
    assign RxBypassDataPad_B2_D9 = '0;
    assign RxBypassDataPad_B3_D0 = '0;
    assign RxBypassDataPad_B3_D1 = '0;
    assign RxBypassDataPad_B3_D10 = '0;
    assign RxBypassDataPad_B3_D11 = '0;
    assign RxBypassDataPad_B3_D12 = '0;
    assign RxBypassDataPad_B3_D2 = '0;
    assign RxBypassDataPad_B3_D3 = '0;
    assign RxBypassDataPad_B3_D4 = '0;
    assign RxBypassDataPad_B3_D5 = '0;
    assign RxBypassDataPad_B3_D6 = '0;
    assign RxBypassDataPad_B3_D7 = '0;
    assign RxBypassDataPad_B3_D8 = '0;
    assign RxBypassDataPad_B3_D9 = '0;
    assign RxBypassDataPad_CK0_C = '0;
    assign RxBypassDataPad_CK0_T = '0;
    assign RxBypassDataPad_CK1_C = '0;
    assign RxBypassDataPad_CK1_T = '0;
    assign RxBypassDataPad_MEMRESET_L = '0;
    assign RxBypassDataRcv_A0 = '0;
    assign RxBypassDataRcv_A1 = '0;
    assign RxBypassDataRcv_A10 = '0;
    assign RxBypassDataRcv_A11 = '0;
    assign RxBypassDataRcv_A12 = '0;
    assign RxBypassDataRcv_A13 = '0;
    assign RxBypassDataRcv_A14 = '0;
    assign RxBypassDataRcv_A15 = '0;
    assign RxBypassDataRcv_A16 = '0;
    assign RxBypassDataRcv_A17 = '0;
    assign RxBypassDataRcv_A18 = '0;
    assign RxBypassDataRcv_A19 = '0;
    assign RxBypassDataRcv_A2 = '0;
    assign RxBypassDataRcv_A3 = '0;
    assign RxBypassDataRcv_A4 = '0;
    assign RxBypassDataRcv_A5 = '0;
    assign RxBypassDataRcv_A6 = '0;
    assign RxBypassDataRcv_A7 = '0;
    assign RxBypassDataRcv_A8 = '0;
    assign RxBypassDataRcv_A9 = '0;
    assign RxBypassDataRcv_B0_D0 = '0;
    assign RxBypassDataRcv_B0_D1 = '0;
    assign RxBypassDataRcv_B0_D10 = '0;
    assign RxBypassDataRcv_B0_D11 = '0;
    assign RxBypassDataRcv_B0_D12 = '0;
    assign RxBypassDataRcv_B0_D2 = '0;
    assign RxBypassDataRcv_B0_D3 = '0;
    assign RxBypassDataRcv_B0_D4 = '0;
    assign RxBypassDataRcv_B0_D5 = '0;
    assign RxBypassDataRcv_B0_D6 = '0;
    assign RxBypassDataRcv_B0_D7 = '0;
    assign RxBypassDataRcv_B0_D8 = '0;
    assign RxBypassDataRcv_B0_D9 = '0;
    assign RxBypassDataRcv_B1_D0 = '0;
    assign RxBypassDataRcv_B1_D1 = '0;
    assign RxBypassDataRcv_B1_D10 = '0;
    assign RxBypassDataRcv_B1_D11 = '0;
    assign RxBypassDataRcv_B1_D12 = '0;
    assign RxBypassDataRcv_B1_D2 = '0;
    assign RxBypassDataRcv_B1_D3 = '0;
    assign RxBypassDataRcv_B1_D4 = '0;
    assign RxBypassDataRcv_B1_D5 = '0;
    assign RxBypassDataRcv_B1_D6 = '0;
    assign RxBypassDataRcv_B1_D7 = '0;
    assign RxBypassDataRcv_B1_D8 = '0;
    assign RxBypassDataRcv_B1_D9 = '0;
    assign RxBypassDataRcv_B2_D0 = '0;
    assign RxBypassDataRcv_B2_D1 = '0;
    assign RxBypassDataRcv_B2_D10 = '0;
    assign RxBypassDataRcv_B2_D11 = '0;
    assign RxBypassDataRcv_B2_D12 = '0;
    assign RxBypassDataRcv_B2_D2 = '0;
    assign RxBypassDataRcv_B2_D3 = '0;
    assign RxBypassDataRcv_B2_D4 = '0;
    assign RxBypassDataRcv_B2_D5 = '0;
    assign RxBypassDataRcv_B2_D6 = '0;
    assign RxBypassDataRcv_B2_D7 = '0;
    assign RxBypassDataRcv_B2_D8 = '0;
    assign RxBypassDataRcv_B2_D9 = '0;
    assign RxBypassDataRcv_B3_D0 = '0;
    assign RxBypassDataRcv_B3_D1 = '0;
    assign RxBypassDataRcv_B3_D10 = '0;
    assign RxBypassDataRcv_B3_D11 = '0;
    assign RxBypassDataRcv_B3_D12 = '0;
    assign RxBypassDataRcv_B3_D2 = '0;
    assign RxBypassDataRcv_B3_D3 = '0;
    assign RxBypassDataRcv_B3_D4 = '0;
    assign RxBypassDataRcv_B3_D5 = '0;
    assign RxBypassDataRcv_B3_D6 = '0;
    assign RxBypassDataRcv_B3_D7 = '0;
    assign RxBypassDataRcv_B3_D8 = '0;
    assign RxBypassDataRcv_B3_D9 = '0;
    assign RxBypassDataRcv_CK0_C = '0;
    assign RxBypassDataRcv_CK0_T = '0;
    assign RxBypassDataRcv_CK1_C = '0;
    assign RxBypassDataRcv_CK1_T = '0;

    // We don't use the bump pads since the veloce phy hides the DRAM devices within itself.
    assign BP_A = '0;
    assign BP_ATO = '0;
    assign BP_ATO_PLL = '0;
    assign BP_B0_D = '0;
    assign BP_B1_D = '0;
    assign BP_B2_D = '0;
    assign BP_B3_D = '0;
    assign BP_CK0_C = '0;
    assign BP_CK0_T = '0;
    assign BP_CK1_C = '0;
    assign BP_CK1_T = '0;
    assign BP_ZN = '0;
    assign BP_MEMRESET_L = '0;
    assign VIO_TIEHI = '1;


endmodule
