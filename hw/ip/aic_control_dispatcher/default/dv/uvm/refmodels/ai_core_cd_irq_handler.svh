`ifndef AI_CORE_CD_REF_MODEL_SV
`define AI_CORE_CD_REF_MODEL_SV


`uvm_analysis_imp_decl (_DP_CMD)

class ai_core_cd_irq_handler extends uvm_component;
  `uvm_component_utils(ai_core_cd_irq_handler)

  ai_core_cd_irq_handler_cfg m_cfg;

  // AI Core DWPU RAL Model
  //DWPU_RAL regmodel;
  ai_core_cd_mem_manager mem_manager_p;

  int local_tokens[];
  int global_tokens[];

  //bit[31:0] base_addr = DWPU_CSR_ST_ADDR;
  //token_agent_seq_item  tok_cons_q [$];
  //token_agent_seq_item  tok_prod_q [$];

  semaphore fill_counter[];
  int endpoint_stored_cmd_len_daq[][$]; //used to track cmd lengths sent to each endp so we can decrement fill counter on done signal

  //uvm_analysis_port#(token_agent_seq_item) ap_tok_out;
  
  //uvm_tlm_analysis_fifo#(token_agent_seq_item) taf_mon_tok;
  //uvm_tlm_analysis_fifo#(token_agent_seq_item) taf_mdl_tok;

  uvm_analysis_port#(token_agent_seq_item) local_token_exp_ap[];
  uvm_analysis_port#(token_agent_seq_item) global_token_exp_ap[];




  /** Variable to inform if the input data stream Watchdog was triggered (watchdog do not exist on design, is to help on the test control) */

  
  //verbosity options
  uvm_verbosity tok_dbg_verbosity = UVM_DEBUG;
  typedef uvm_enum_wrapper#(uvm_verbosity) verbosity_wrapper;

  function new(string name ="", uvm_component parent = null);
    super.new(name,parent);
    //analysis_imp_dp_commands = new("analysis_imp_dp_commands", this);
    
  endfunction

  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);

    if (!uvm_config_db#(ai_core_cd_irq_handler_cfg)::get(this, "", "m_cfg", m_cfg))
      `uvm_fatal("REF_MODEL_BUILD_PHASE", "Unable to find environment configuration object in the uvm_config_db");

    //output data generated by ref_model

    //input data fifos
    //taf_mon_tok = new("taf_mon_tok", this);

    //get reference model config
    
    local_tokens = new[m_cfg.local_token_line_num];
    global_tokens = new[m_cfg.global_token_line_num];
    `uvm_info("REF_MODEL",$sformatf("local_tokens @SOT: %0p",local_tokens),UVM_LOW)
    `uvm_info("REF_MODEL",$sformatf("global_tokens @SOT: %0p",global_tokens),UVM_LOW)

    local_token_exp_ap = new[m_cfg.local_token_line_num];
    foreach (local_token_exp_ap[i])
      local_token_exp_ap[i] = new($sformatf("local_token_exp_ap[%0d]",i),this);
      
    global_token_exp_ap = new[m_cfg.global_token_line_num];
    foreach (global_token_exp_ap[i])
      global_token_exp_ap[i] = new($sformatf("global_token_exp_ap[%0d]",i),this);
       
    fill_counter = new[m_cfg.fill_counter_num];
    foreach (fill_counter[i])
      fill_counter[i] = new(0);

    endpoint_stored_cmd_len_daq = new[m_cfg.fill_counter_num];

    // DP command Model
    //dp_cmd_model = ai_core_dp_cmd_gen_uvm_pkg::ai_core_dp_cmd_gen_model#(aic_dp_cmd_gen_pkg::dummy_dp_command_t)::type_id::create("dp_cmd_model", this);
    //ap_to_dp_cmd_model = new("ap_to_dp_cmd_model",this);
  endfunction : build_phase
  
  virtual function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    uvm_config_db#(uvm_verbosity)::get(this, "", "tok_dbg_verbosity", tok_dbg_verbosity);
    
    // Connect this analysis port to model analysis export
    //this.ap_to_dp_cmd_model.connect(dp_cmd_model.analysis_export);

    // Connect Scoreboards
    //dp_cmd_model.command_ap.connect(this.analysis_imp_dp_commands);
  endfunction : connect_phase

  virtual task run_phase(uvm_phase phase);
    token_agent_seq_item tok_mon_item;
    
    super.run_phase(phase);
    
    //forever begin
    //  taf_mon_tok.get(tok_mon_item);
    //  `uvm_info("AICD REF MODEL", $sformatf("Received Token item: \n%s", tok_mon_item.sprint()), UVM_LOW)
    //end

  endtask : run_phase


  function void reset();
    `uvm_info("ai_cd_model", "Resetting model", UVM_HIGH)
    
    //tok_cons_q.delete();
    //tok_prod_q.delete();

    //reset regmodel
    //regmodel.reset();
  endfunction


  virtual function void check_phase(uvm_phase phase);
    check_token_number_eot();
  endfunction : check_phase

  function void check_token_number_eot();
    foreach (local_tokens[i]) begin
      if (local_tokens[i] != 0) begin
        `uvm_error("REF_MODEL",$sformatf("LOCAL Token[%0d]=%0d @EOT",i,local_tokens[i]))
      end
    end
    foreach (global_tokens[i]) begin
      if (global_tokens[i] != 0) begin
        `uvm_error("REF_MODEL",$sformatf("GLOBAL Token[%0d]=%0d @EOT",i,global_tokens[i]))
      end
    end
  endfunction : check_token_number_eot

  //function bit get_irq_en(string p_irq_name);
  //  bit [63:0] data_from_reg;
  //  /** update variables that come from the register configuration */
  //  //update IRQ_EN
  //  data_from_reg = regmodel.irq_en.get();
  //  `uvm_info("dwpu_mdl", $sformatf("get_irq_en : Data value from IRQ_EN: 0x%0x", data_from_reg), UVM_HIGH)
  //  update_irq_en(data_from_reg);
//
  //  foreach (irq_en[str]) begin
  //    `uvm_info("dwpu_mdl", $sformatf("get_irq_en : irq_en[%s]: 0x%0d", str, irq_en[str]), UVM_HIGH)
  //  end
//
  //  return irq_en[p_irq_name];
  //endfunction : get_irq_en
  //
  //function bit set_irq_en(bit [AIC_LT_AXI_DATA_WIDTH-1:0] a_data);
  //  regmodel.irq_en.set(.value(a_data));
  //  `uvm_info("dwpu_mdl", $sformatf("set_irq_en : Data value from IRQ_EN: 0x%0x", a_data), UVM_HIGH)
  //  update_irq_en(a_data);
//
  //  foreach (irq_en[str]) begin
  //    `uvm_info("dwpu_mdl", $sformatf("set_irq_en : irq_en[%s]: 0x%0d", str, irq_en[str]), UVM_HIGH)
  //  end
  //endfunction : set_irq_en
endclass
`endif
