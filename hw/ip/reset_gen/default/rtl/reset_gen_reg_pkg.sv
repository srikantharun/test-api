// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

`ifndef LOWRISC_RESET_GEN_PKG
`define LOWRISC_RESET_GEN_PKG

package reset_gen_reg_pkg;

  typedef struct packed {
    logic [31:0] paddr;
    logic  pwrite;
    logic [31:0] pwdata;
    logic psel;
    logic [2:0] pprot;
    logic penable;
    logic [3:0] pstrb;
  } apb_h2d_t;

  typedef struct packed {
    logic pslverr;
    logic [31:0] prdata;
    logic pready;
  } apb_d2h_t;


  // Address widths within the block
  parameter int BlockAw = 16;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
    } rst_src_mask;
    struct packed {
      logic [11:0] q;
    } rst_stretch;
  } reset_gen_reg2hw_rst_cfg_hw_rst_reg_t;

  typedef struct packed {
    logic        q;
  } reset_gen_reg2hw_rst_sw_hw_rst_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
    } rst_src_mask;
    struct packed {
      logic [11:0] q;
    } rst_stretch;
  } reset_gen_reg2hw_rst_cfg_dmi_rst_reg_t;

  typedef struct packed {
    logic        q;
  } reset_gen_reg2hw_rst_sw_dmi_rst_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
    } rst_src_mask;
    struct packed {
      logic [11:0] q;
    } rst_stretch;
  } reset_gen_reg2hw_rst_cfg_bus_rst_asyn_reg_t;

  typedef struct packed {
    logic        q;
  } reset_gen_reg2hw_rst_sw_bus_rst_asyn_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
    } rst_src_mask;
    struct packed {
      logic [11:0] q;
    } rst_stretch;
  } reset_gen_reg2hw_rst_cfg_sys_core_rst_reg_t;

  typedef struct packed {
    logic        q;
  } reset_gen_reg2hw_rst_sw_sys_core_rst_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
    } rst_src_mask;
    struct packed {
      logic [11:0] q;
    } rst_stretch;
  } reset_gen_reg2hw_rst_cfg_ai_core_rst_reg_t;

  typedef struct packed {
    logic        q;
  } reset_gen_reg2hw_rst_sw_ai_core_rst_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
    } rst_src_mask;
    struct packed {
      logic [11:0] q;
    } rst_stretch;
  } reset_gen_reg2hw_rst_cfg_pcie_rst_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } reset_gen_reg2hw_rst_sw_pcie_rst_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
    } rst_src_mask;
    struct packed {
      logic [11:0] q;
    } rst_stretch;
  } reset_gen_reg2hw_rst_cfg_ddr_rst_reg_t;

  typedef struct packed {
    logic [5:0]  q;
  } reset_gen_reg2hw_rst_sw_ddr_rst_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } reset_gen_reg2hw_dbnc_timer_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        qe;
  } reset_gen_reg2hw_dbnc_timer_pcie_btn_rst_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } reset_gen_hw2reg_dbnc_timer_reg_t;

  typedef struct packed {
    logic [31:0] d;
  } reset_gen_hw2reg_dbnc_timer_pcie_btn_rst_reg_t;

  // Register -> HW type
  typedef struct packed {
    reset_gen_reg2hw_rst_cfg_hw_rst_reg_t rst_cfg_hw_rst; // [184:170]
    reset_gen_reg2hw_rst_sw_hw_rst_reg_t rst_sw_hw_rst; // [169:169]
    reset_gen_reg2hw_rst_cfg_dmi_rst_reg_t rst_cfg_dmi_rst; // [168:154]
    reset_gen_reg2hw_rst_sw_dmi_rst_reg_t rst_sw_dmi_rst; // [153:153]
    reset_gen_reg2hw_rst_cfg_bus_rst_asyn_reg_t rst_cfg_bus_rst_asyn; // [152:138]
    reset_gen_reg2hw_rst_sw_bus_rst_asyn_reg_t rst_sw_bus_rst_asyn; // [137:137]
    reset_gen_reg2hw_rst_cfg_sys_core_rst_reg_t rst_cfg_sys_core_rst; // [136:122]
    reset_gen_reg2hw_rst_sw_sys_core_rst_reg_t rst_sw_sys_core_rst; // [121:121]
    reset_gen_reg2hw_rst_cfg_ai_core_rst_reg_t rst_cfg_ai_core_rst; // [120:106]
    reset_gen_reg2hw_rst_sw_ai_core_rst_reg_t rst_sw_ai_core_rst; // [105:105]
    reset_gen_reg2hw_rst_cfg_pcie_rst_reg_t rst_cfg_pcie_rst; // [104:90]
    reset_gen_reg2hw_rst_sw_pcie_rst_reg_t rst_sw_pcie_rst; // [89:87]
    reset_gen_reg2hw_rst_cfg_ddr_rst_reg_t rst_cfg_ddr_rst; // [86:72]
    reset_gen_reg2hw_rst_sw_ddr_rst_reg_t rst_sw_ddr_rst; // [71:66]
    reset_gen_reg2hw_dbnc_timer_reg_t dbnc_timer; // [65:33]
    reset_gen_reg2hw_dbnc_timer_pcie_btn_rst_reg_t dbnc_timer_pcie_btn_rst; // [32:0]
  } reset_gen_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    reset_gen_hw2reg_dbnc_timer_reg_t dbnc_timer; // [63:32]
    reset_gen_hw2reg_dbnc_timer_pcie_btn_rst_reg_t dbnc_timer_pcie_btn_rst; // [31:0]
  } reset_gen_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] RESET_GEN_RST_CFG_HW_RST_OFFSET = 16'h 0;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_SW_HW_RST_OFFSET = 16'h 4;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_CFG_DMI_RST_OFFSET = 16'h 8;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_SW_DMI_RST_OFFSET = 16'h c;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_CFG_BUS_RST_ASYN_OFFSET = 16'h 10;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_SW_BUS_RST_ASYN_OFFSET = 16'h 14;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_CFG_SYS_CORE_RST_OFFSET = 16'h 18;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_SW_SYS_CORE_RST_OFFSET = 16'h 1c;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_CFG_AI_CORE_RST_OFFSET = 16'h 20;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_SW_AI_CORE_RST_OFFSET = 16'h 24;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_CFG_PCIE_RST_OFFSET = 16'h 28;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_SW_PCIE_RST_OFFSET = 16'h 2c;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_CFG_DDR_RST_OFFSET = 16'h 30;
  parameter logic [BlockAw-1:0] RESET_GEN_RST_SW_DDR_RST_OFFSET = 16'h 34;
  parameter logic [BlockAw-1:0] RESET_GEN_DBNC_TIMER_OFFSET = 16'h 38;
  parameter logic [BlockAw-1:0] RESET_GEN_DBNC_TIMER_PCIE_BTN_RST_OFFSET = 16'h 3c;

  // Reset values for hwext registers and their fields
  parameter logic [31:0] RESET_GEN_DBNC_TIMER_RESVAL = 32'h 14;
  parameter logic [31:0] RESET_GEN_DBNC_TIMER_DBNC_TIMER_VAL_RESVAL = 32'h 14;
  parameter logic [31:0] RESET_GEN_DBNC_TIMER_PCIE_BTN_RST_RESVAL = 32'h 14;
  parameter logic [31:0] RESET_GEN_DBNC_TIMER_PCIE_BTN_RST_DBNC_TIMER_PCIE_BTN_VAL_RESVAL = 32'h 14;

  // Register index
  typedef enum int {
    RESET_GEN_RST_CFG_HW_RST,
    RESET_GEN_RST_SW_HW_RST,
    RESET_GEN_RST_CFG_DMI_RST,
    RESET_GEN_RST_SW_DMI_RST,
    RESET_GEN_RST_CFG_BUS_RST_ASYN,
    RESET_GEN_RST_SW_BUS_RST_ASYN,
    RESET_GEN_RST_CFG_SYS_CORE_RST,
    RESET_GEN_RST_SW_SYS_CORE_RST,
    RESET_GEN_RST_CFG_AI_CORE_RST,
    RESET_GEN_RST_SW_AI_CORE_RST,
    RESET_GEN_RST_CFG_PCIE_RST,
    RESET_GEN_RST_SW_PCIE_RST,
    RESET_GEN_RST_CFG_DDR_RST,
    RESET_GEN_RST_SW_DDR_RST,
    RESET_GEN_DBNC_TIMER,
    RESET_GEN_DBNC_TIMER_PCIE_BTN_RST
  } reset_gen_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] RESET_GEN_WR_BYTES [16] = '{
    4'b 1111, // index[ 0] RESET_GEN_RST_CFG_HW_RST
    4'b 0001, // index[ 1] RESET_GEN_RST_SW_HW_RST
    4'b 1111, // index[ 2] RESET_GEN_RST_CFG_DMI_RST
    4'b 0001, // index[ 3] RESET_GEN_RST_SW_DMI_RST
    4'b 1111, // index[ 4] RESET_GEN_RST_CFG_BUS_RST_ASYN
    4'b 0001, // index[ 5] RESET_GEN_RST_SW_BUS_RST_ASYN
    4'b 1111, // index[ 6] RESET_GEN_RST_CFG_SYS_CORE_RST
    4'b 0001, // index[ 7] RESET_GEN_RST_SW_SYS_CORE_RST
    4'b 1111, // index[ 8] RESET_GEN_RST_CFG_AI_CORE_RST
    4'b 0001, // index[ 9] RESET_GEN_RST_SW_AI_CORE_RST
    4'b 1111, // index[10] RESET_GEN_RST_CFG_PCIE_RST
    4'b 0001, // index[11] RESET_GEN_RST_SW_PCIE_RST
    4'b 1111, // index[12] RESET_GEN_RST_CFG_DDR_RST
    4'b 0001, // index[13] RESET_GEN_RST_SW_DDR_RST
    4'b 1111, // index[14] RESET_GEN_DBNC_TIMER
    4'b 1111  // index[15] RESET_GEN_DBNC_TIMER_PCIE_BTN_RST
  };

  // Register information to check illegal reads
  parameter logic RESET_GEN_REG_READABLE [16] = '{
    1'b 1, // index[ 0] RESET_GEN_RST_CFG_HW_RST
    1'b 1, // index[ 1] RESET_GEN_RST_SW_HW_RST
    1'b 1, // index[ 2] RESET_GEN_RST_CFG_DMI_RST
    1'b 1, // index[ 3] RESET_GEN_RST_SW_DMI_RST
    1'b 1, // index[ 4] RESET_GEN_RST_CFG_BUS_RST_ASYN
    1'b 1, // index[ 5] RESET_GEN_RST_SW_BUS_RST_ASYN
    1'b 1, // index[ 6] RESET_GEN_RST_CFG_SYS_CORE_RST
    1'b 1, // index[ 7] RESET_GEN_RST_SW_SYS_CORE_RST
    1'b 1, // index[ 8] RESET_GEN_RST_CFG_AI_CORE_RST
    1'b 1, // index[ 9] RESET_GEN_RST_SW_AI_CORE_RST
    1'b 1, // index[10] RESET_GEN_RST_CFG_PCIE_RST
    1'b 1, // index[11] RESET_GEN_RST_SW_PCIE_RST
    1'b 1, // index[12] RESET_GEN_RST_CFG_DDR_RST
    1'b 1, // index[13] RESET_GEN_RST_SW_DDR_RST
    1'b 1, // index[14] RESET_GEN_DBNC_TIMER
    1'b 1  // index[15] RESET_GEN_DBNC_TIMER_PCIE_BTN_RST
  };

endpackage

`endif
