// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`ifndef LOWRISC_RESET_GEN_REG_TOP
`define LOWRISC_RESET_GEN_REG_TOP

//synopsys translate_off
`ifdef ASSERTIONS_ON
  `include "prim_assert.sv"
`endif
//synopsys translate_on

module reset_gen_reg_top #(
  parameter int unsigned StageNum = 3
) (
  input  logic clk_i,
  input  logic rst_ni,
  input  reset_gen_reg_pkg::apb_h2d_t apb_i,
  output reset_gen_reg_pkg::apb_d2h_t apb_o,
  // To HW
  output reset_gen_reg_pkg::reset_gen_reg2hw_t reg2hw, // Write
  input  reset_gen_reg_pkg::reset_gen_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import reset_gen_reg_pkg::* ;

  localparam int AW = 16;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_rd_addr;
  logic [AW-1:0]  reg_wr_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_rd_error;
  logic           reg_wr_error;
  logic           reg_error;

  logic          wr_addrmiss, wr_err;
  logic          rd_addrmiss, rd_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  reset_gen_reg_pkg::apb_h2d_t apb_reg_h2d;
  reset_gen_reg_pkg::apb_d2h_t apb_reg_d2h;


  assign apb_reg_h2d = apb_i;
  assign apb_o   = apb_reg_d2h;


  // Translate from APB to register interface.
  typedef enum {
    SETUP, ACCESS
  } state_e;
  state_e state_d, state_q;

  assign reg_rd_addr = apb_reg_h2d.paddr;
  assign reg_wr_addr = apb_reg_h2d.paddr;
  assign reg_wdata = apb_reg_h2d.pwdata;
  assign reg_be = apb_reg_h2d.pstrb;

  assign apb_reg_d2h.prdata = reg_rdata;
  assign apb_reg_d2h.pslverr = reg_error;

  always_comb begin
      state_d = state_q;
      apb_reg_d2h.pready = 1'b0;
      reg_re = 1'b0;
      reg_we = 1'b0;

      unique case (state_q)
        SETUP: begin
          if (apb_reg_h2d.psel) state_d = ACCESS;
        end
        ACCESS: begin
          reg_re = !apb_reg_h2d.pwrite;
          reg_we = apb_reg_h2d.pwrite;
          apb_reg_d2h.pready = !reg_busy;
          if (apb_reg_d2h.pready) state_d = SETUP;
        end
        default:;
      endcase
  end

  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) state_q <= SETUP;
    else state_q <= state_d;
  end

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_rd_error = (devmode_i & rd_addrmiss) | rd_err;
  assign reg_wr_error = (devmode_i & wr_addrmiss) | wr_err;
  assign reg_error = reg_wr_error | reg_rd_error;
  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic rst_cfg_hw_rst_we;
  logic [2:0] rst_cfg_hw_rst_rst_src_mask_qs;
  logic [2:0] rst_cfg_hw_rst_rst_src_mask_wd;
  logic [11:0] rst_cfg_hw_rst_rst_stretch_qs;
  logic [11:0] rst_cfg_hw_rst_rst_stretch_wd;
  logic rst_sw_hw_rst_we;
  logic rst_sw_hw_rst_qs;
  logic rst_sw_hw_rst_wd;
  logic rst_cfg_dmi_rst_we;
  logic [2:0] rst_cfg_dmi_rst_rst_src_mask_qs;
  logic [2:0] rst_cfg_dmi_rst_rst_src_mask_wd;
  logic [11:0] rst_cfg_dmi_rst_rst_stretch_qs;
  logic [11:0] rst_cfg_dmi_rst_rst_stretch_wd;
  logic rst_sw_dmi_rst_we;
  logic rst_sw_dmi_rst_qs;
  logic rst_sw_dmi_rst_wd;
  logic rst_cfg_bus_rst_asyn_we;
  logic [2:0] rst_cfg_bus_rst_asyn_rst_src_mask_qs;
  logic [2:0] rst_cfg_bus_rst_asyn_rst_src_mask_wd;
  logic [11:0] rst_cfg_bus_rst_asyn_rst_stretch_qs;
  logic [11:0] rst_cfg_bus_rst_asyn_rst_stretch_wd;
  logic rst_sw_bus_rst_asyn_we;
  logic rst_sw_bus_rst_asyn_qs;
  logic rst_sw_bus_rst_asyn_wd;
  logic rst_cfg_sys_core_rst_we;
  logic [2:0] rst_cfg_sys_core_rst_rst_src_mask_qs;
  logic [2:0] rst_cfg_sys_core_rst_rst_src_mask_wd;
  logic [11:0] rst_cfg_sys_core_rst_rst_stretch_qs;
  logic [11:0] rst_cfg_sys_core_rst_rst_stretch_wd;
  logic rst_sw_sys_core_rst_we;
  logic rst_sw_sys_core_rst_qs;
  logic rst_sw_sys_core_rst_wd;
  logic rst_cfg_ai_core_rst_we;
  logic [2:0] rst_cfg_ai_core_rst_rst_src_mask_qs;
  logic [2:0] rst_cfg_ai_core_rst_rst_src_mask_wd;
  logic [11:0] rst_cfg_ai_core_rst_rst_stretch_qs;
  logic [11:0] rst_cfg_ai_core_rst_rst_stretch_wd;
  logic rst_sw_ai_core_rst_we;
  logic rst_sw_ai_core_rst_qs;
  logic rst_sw_ai_core_rst_wd;
  logic rst_cfg_pcie_rst_we;
  logic [2:0] rst_cfg_pcie_rst_rst_src_mask_qs;
  logic [2:0] rst_cfg_pcie_rst_rst_src_mask_wd;
  logic [11:0] rst_cfg_pcie_rst_rst_stretch_qs;
  logic [11:0] rst_cfg_pcie_rst_rst_stretch_wd;
  logic rst_sw_pcie_rst_we;
  logic [2:0] rst_sw_pcie_rst_qs;
  logic [2:0] rst_sw_pcie_rst_wd;
  logic rst_cfg_ddr_rst_we;
  logic [2:0] rst_cfg_ddr_rst_rst_src_mask_qs;
  logic [2:0] rst_cfg_ddr_rst_rst_src_mask_wd;
  logic [11:0] rst_cfg_ddr_rst_rst_stretch_qs;
  logic [11:0] rst_cfg_ddr_rst_rst_stretch_wd;
  logic rst_sw_ddr_rst_we;
  logic [5:0] rst_sw_ddr_rst_qs;
  logic [5:0] rst_sw_ddr_rst_wd;
  logic dbnc_timer_re;
  logic dbnc_timer_we;
  logic [31:0] dbnc_timer_qs;
  logic [31:0] dbnc_timer_wd;
  logic dbnc_timer_pcie_btn_rst_re;
  logic dbnc_timer_pcie_btn_rst_we;
  logic [31:0] dbnc_timer_pcie_btn_rst_qs;
  logic [31:0] dbnc_timer_pcie_btn_rst_wd;

  // Register instances
  // R[rst_cfg_hw_rst]: V(False)
  //   F[rst_src_mask]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h7)
  ) u_rst_cfg_hw_rst_rst_src_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_hw_rst_we),
    .wd     (rst_cfg_hw_rst_rst_src_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_hw_rst.rst_src_mask.q),

    // to register interface (read)
    .qs     (rst_cfg_hw_rst_rst_src_mask_qs)
  );

  //   F[rst_stretch]: 27:16
  prim_subreg #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'ha)
  ) u_rst_cfg_hw_rst_rst_stretch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_hw_rst_we),
    .wd     (rst_cfg_hw_rst_rst_stretch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_hw_rst.rst_stretch.q),

    // to register interface (read)
    .qs     (rst_cfg_hw_rst_rst_stretch_qs)
  );


  // R[rst_sw_hw_rst]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_rst_sw_hw_rst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_sw_hw_rst_we),
    .wd     (rst_sw_hw_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_sw_hw_rst.q),

    // to register interface (read)
    .qs     (rst_sw_hw_rst_qs)
  );


  // R[rst_cfg_dmi_rst]: V(False)
  //   F[rst_src_mask]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h7)
  ) u_rst_cfg_dmi_rst_rst_src_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_dmi_rst_we),
    .wd     (rst_cfg_dmi_rst_rst_src_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_dmi_rst.rst_src_mask.q),

    // to register interface (read)
    .qs     (rst_cfg_dmi_rst_rst_src_mask_qs)
  );

  //   F[rst_stretch]: 27:16
  prim_subreg #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'ha)
  ) u_rst_cfg_dmi_rst_rst_stretch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_dmi_rst_we),
    .wd     (rst_cfg_dmi_rst_rst_stretch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_dmi_rst.rst_stretch.q),

    // to register interface (read)
    .qs     (rst_cfg_dmi_rst_rst_stretch_qs)
  );


  // R[rst_sw_dmi_rst]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_rst_sw_dmi_rst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_sw_dmi_rst_we),
    .wd     (rst_sw_dmi_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_sw_dmi_rst.q),

    // to register interface (read)
    .qs     (rst_sw_dmi_rst_qs)
  );


  // R[rst_cfg_bus_rst_asyn]: V(False)
  //   F[rst_src_mask]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h7)
  ) u_rst_cfg_bus_rst_asyn_rst_src_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_bus_rst_asyn_we),
    .wd     (rst_cfg_bus_rst_asyn_rst_src_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_bus_rst_asyn.rst_src_mask.q),

    // to register interface (read)
    .qs     (rst_cfg_bus_rst_asyn_rst_src_mask_qs)
  );

  //   F[rst_stretch]: 27:16
  prim_subreg #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'ha)
  ) u_rst_cfg_bus_rst_asyn_rst_stretch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_bus_rst_asyn_we),
    .wd     (rst_cfg_bus_rst_asyn_rst_stretch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_bus_rst_asyn.rst_stretch.q),

    // to register interface (read)
    .qs     (rst_cfg_bus_rst_asyn_rst_stretch_qs)
  );


  // R[rst_sw_bus_rst_asyn]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_rst_sw_bus_rst_asyn (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_sw_bus_rst_asyn_we),
    .wd     (rst_sw_bus_rst_asyn_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_sw_bus_rst_asyn.q),

    // to register interface (read)
    .qs     (rst_sw_bus_rst_asyn_qs)
  );


  // R[rst_cfg_sys_core_rst]: V(False)
  //   F[rst_src_mask]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h7)
  ) u_rst_cfg_sys_core_rst_rst_src_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_sys_core_rst_we),
    .wd     (rst_cfg_sys_core_rst_rst_src_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_sys_core_rst.rst_src_mask.q),

    // to register interface (read)
    .qs     (rst_cfg_sys_core_rst_rst_src_mask_qs)
  );

  //   F[rst_stretch]: 27:16
  prim_subreg #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'ha)
  ) u_rst_cfg_sys_core_rst_rst_stretch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_sys_core_rst_we),
    .wd     (rst_cfg_sys_core_rst_rst_stretch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_sys_core_rst.rst_stretch.q),

    // to register interface (read)
    .qs     (rst_cfg_sys_core_rst_rst_stretch_qs)
  );


  // R[rst_sw_sys_core_rst]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_rst_sw_sys_core_rst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_sw_sys_core_rst_we),
    .wd     (rst_sw_sys_core_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_sw_sys_core_rst.q),

    // to register interface (read)
    .qs     (rst_sw_sys_core_rst_qs)
  );


  // R[rst_cfg_ai_core_rst]: V(False)
  //   F[rst_src_mask]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h7)
  ) u_rst_cfg_ai_core_rst_rst_src_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_ai_core_rst_we),
    .wd     (rst_cfg_ai_core_rst_rst_src_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_ai_core_rst.rst_src_mask.q),

    // to register interface (read)
    .qs     (rst_cfg_ai_core_rst_rst_src_mask_qs)
  );

  //   F[rst_stretch]: 27:16
  prim_subreg #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'ha)
  ) u_rst_cfg_ai_core_rst_rst_stretch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_ai_core_rst_we),
    .wd     (rst_cfg_ai_core_rst_rst_stretch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_ai_core_rst.rst_stretch.q),

    // to register interface (read)
    .qs     (rst_cfg_ai_core_rst_rst_stretch_qs)
  );


  // R[rst_sw_ai_core_rst]: V(False)
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1)
  ) u_rst_sw_ai_core_rst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_sw_ai_core_rst_we),
    .wd     (rst_sw_ai_core_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_sw_ai_core_rst.q),

    // to register interface (read)
    .qs     (rst_sw_ai_core_rst_qs)
  );


  // R[rst_cfg_pcie_rst]: V(False)
  //   F[rst_src_mask]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h7)
  ) u_rst_cfg_pcie_rst_rst_src_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_pcie_rst_we),
    .wd     (rst_cfg_pcie_rst_rst_src_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_pcie_rst.rst_src_mask.q),

    // to register interface (read)
    .qs     (rst_cfg_pcie_rst_rst_src_mask_qs)
  );

  //   F[rst_stretch]: 27:16
  prim_subreg #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'h0)
  ) u_rst_cfg_pcie_rst_rst_stretch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_pcie_rst_we),
    .wd     (rst_cfg_pcie_rst_rst_stretch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_pcie_rst.rst_stretch.q),

    // to register interface (read)
    .qs     (rst_cfg_pcie_rst_rst_stretch_qs)
  );


  // R[rst_sw_pcie_rst]: V(False)
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h0)
  ) u_rst_sw_pcie_rst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_sw_pcie_rst_we),
    .wd     (rst_sw_pcie_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_sw_pcie_rst.q),

    // to register interface (read)
    .qs     (rst_sw_pcie_rst_qs)
  );


  // R[rst_cfg_ddr_rst]: V(False)
  //   F[rst_src_mask]: 2:0
  prim_subreg #(
    .DW      (3),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (3'h7)
  ) u_rst_cfg_ddr_rst_rst_src_mask (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_ddr_rst_we),
    .wd     (rst_cfg_ddr_rst_rst_src_mask_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_ddr_rst.rst_src_mask.q),

    // to register interface (read)
    .qs     (rst_cfg_ddr_rst_rst_src_mask_qs)
  );

  //   F[rst_stretch]: 27:16
  prim_subreg #(
    .DW      (12),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (12'h0)
  ) u_rst_cfg_ddr_rst_rst_stretch (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_cfg_ddr_rst_we),
    .wd     (rst_cfg_ddr_rst_rst_stretch_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_cfg_ddr_rst.rst_stretch.q),

    // to register interface (read)
    .qs     (rst_cfg_ddr_rst_rst_stretch_qs)
  );


  // R[rst_sw_ddr_rst]: V(False)
  prim_subreg #(
    .DW      (6),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (6'h0)
  ) u_rst_sw_ddr_rst (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (rst_sw_ddr_rst_we),
    .wd     (rst_sw_ddr_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    // spyglass disable_block W287b
    .qe     (),
    // spyglass enable_block W287b
    .q      (reg2hw.rst_sw_ddr_rst.q),

    // to register interface (read)
    .qs     (rst_sw_ddr_rst_qs)
  );


  // R[dbnc_timer]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_dbnc_timer (
    .re     (dbnc_timer_re),
    .we     (dbnc_timer_we),
    .wd     (dbnc_timer_wd),
    .d      (hw2reg.dbnc_timer.d),
    // spyglass disable_block W287b
    .qre    (),
    // spyglass enable_block W287b
    .qe     (reg2hw.dbnc_timer.qe),
    .q      (reg2hw.dbnc_timer.q),
    .qs     (dbnc_timer_qs)
  );


  // R[dbnc_timer_pcie_btn_rst]: V(True)
  prim_subreg_ext #(
    .DW    (32)
  ) u_dbnc_timer_pcie_btn_rst (
    .re     (dbnc_timer_pcie_btn_rst_re),
    .we     (dbnc_timer_pcie_btn_rst_we),
    .wd     (dbnc_timer_pcie_btn_rst_wd),
    .d      (hw2reg.dbnc_timer_pcie_btn_rst.d),
    // spyglass disable_block W287b
    .qre    (),
    // spyglass enable_block W287b
    .qe     (reg2hw.dbnc_timer_pcie_btn_rst.qe),
    .q      (reg2hw.dbnc_timer_pcie_btn_rst.q),
    .qs     (dbnc_timer_pcie_btn_rst_qs)
  );



  logic [15:0] rd_addr_hit;
  always_comb begin
    rd_addr_hit = '0;
    // spyglass disable_block W415a
    rd_addr_hit[ 0] = (reg_rd_addr == RESET_GEN_RST_CFG_HW_RST_OFFSET);
    rd_addr_hit[ 1] = (reg_rd_addr == RESET_GEN_RST_SW_HW_RST_OFFSET);
    rd_addr_hit[ 2] = (reg_rd_addr == RESET_GEN_RST_CFG_DMI_RST_OFFSET);
    rd_addr_hit[ 3] = (reg_rd_addr == RESET_GEN_RST_SW_DMI_RST_OFFSET);
    rd_addr_hit[ 4] = (reg_rd_addr == RESET_GEN_RST_CFG_BUS_RST_ASYN_OFFSET);
    rd_addr_hit[ 5] = (reg_rd_addr == RESET_GEN_RST_SW_BUS_RST_ASYN_OFFSET);
    rd_addr_hit[ 6] = (reg_rd_addr == RESET_GEN_RST_CFG_SYS_CORE_RST_OFFSET);
    rd_addr_hit[ 7] = (reg_rd_addr == RESET_GEN_RST_SW_SYS_CORE_RST_OFFSET);
    rd_addr_hit[ 8] = (reg_rd_addr == RESET_GEN_RST_CFG_AI_CORE_RST_OFFSET);
    rd_addr_hit[ 9] = (reg_rd_addr == RESET_GEN_RST_SW_AI_CORE_RST_OFFSET);
    rd_addr_hit[10] = (reg_rd_addr == RESET_GEN_RST_CFG_PCIE_RST_OFFSET);
    rd_addr_hit[11] = (reg_rd_addr == RESET_GEN_RST_SW_PCIE_RST_OFFSET);
    rd_addr_hit[12] = (reg_rd_addr == RESET_GEN_RST_CFG_DDR_RST_OFFSET);
    rd_addr_hit[13] = (reg_rd_addr == RESET_GEN_RST_SW_DDR_RST_OFFSET);
    rd_addr_hit[14] = (reg_rd_addr == RESET_GEN_DBNC_TIMER_OFFSET);
    rd_addr_hit[15] = (reg_rd_addr == RESET_GEN_DBNC_TIMER_PCIE_BTN_RST_OFFSET);
    // spyglass enable_block W415a
  end

  logic [15:0] wr_addr_hit;
  always_comb begin
    wr_addr_hit = '0;
    // spyglass disable_block W415a
    wr_addr_hit[ 0] = (reg_wr_addr == RESET_GEN_RST_CFG_HW_RST_OFFSET);
    wr_addr_hit[ 1] = (reg_wr_addr == RESET_GEN_RST_SW_HW_RST_OFFSET);
    wr_addr_hit[ 2] = (reg_wr_addr == RESET_GEN_RST_CFG_DMI_RST_OFFSET);
    wr_addr_hit[ 3] = (reg_wr_addr == RESET_GEN_RST_SW_DMI_RST_OFFSET);
    wr_addr_hit[ 4] = (reg_wr_addr == RESET_GEN_RST_CFG_BUS_RST_ASYN_OFFSET);
    wr_addr_hit[ 5] = (reg_wr_addr == RESET_GEN_RST_SW_BUS_RST_ASYN_OFFSET);
    wr_addr_hit[ 6] = (reg_wr_addr == RESET_GEN_RST_CFG_SYS_CORE_RST_OFFSET);
    wr_addr_hit[ 7] = (reg_wr_addr == RESET_GEN_RST_SW_SYS_CORE_RST_OFFSET);
    wr_addr_hit[ 8] = (reg_wr_addr == RESET_GEN_RST_CFG_AI_CORE_RST_OFFSET);
    wr_addr_hit[ 9] = (reg_wr_addr == RESET_GEN_RST_SW_AI_CORE_RST_OFFSET);
    wr_addr_hit[10] = (reg_wr_addr == RESET_GEN_RST_CFG_PCIE_RST_OFFSET);
    wr_addr_hit[11] = (reg_wr_addr == RESET_GEN_RST_SW_PCIE_RST_OFFSET);
    wr_addr_hit[12] = (reg_wr_addr == RESET_GEN_RST_CFG_DDR_RST_OFFSET);
    wr_addr_hit[13] = (reg_wr_addr == RESET_GEN_RST_SW_DDR_RST_OFFSET);
    wr_addr_hit[14] = (reg_wr_addr == RESET_GEN_DBNC_TIMER_OFFSET);
    wr_addr_hit[15] = (reg_wr_addr == RESET_GEN_DBNC_TIMER_PCIE_BTN_RST_OFFSET);
    // spyglass enable_block W415a
  end

  assign rd_addrmiss = (reg_re) ? ~|rd_addr_hit : 1'b0 ;
  assign wr_addrmiss = (reg_we) ? ~|wr_addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((wr_addr_hit[ 0] & (~|(RESET_GEN_WR_BYTES[ 0] & reg_be))) |
               (wr_addr_hit[ 1] & (~|(RESET_GEN_WR_BYTES[ 1] & reg_be))) |
               (wr_addr_hit[ 2] & (~|(RESET_GEN_WR_BYTES[ 2] & reg_be))) |
               (wr_addr_hit[ 3] & (~|(RESET_GEN_WR_BYTES[ 3] & reg_be))) |
               (wr_addr_hit[ 4] & (~|(RESET_GEN_WR_BYTES[ 4] & reg_be))) |
               (wr_addr_hit[ 5] & (~|(RESET_GEN_WR_BYTES[ 5] & reg_be))) |
               (wr_addr_hit[ 6] & (~|(RESET_GEN_WR_BYTES[ 6] & reg_be))) |
               (wr_addr_hit[ 7] & (~|(RESET_GEN_WR_BYTES[ 7] & reg_be))) |
               (wr_addr_hit[ 8] & (~|(RESET_GEN_WR_BYTES[ 8] & reg_be))) |
               (wr_addr_hit[ 9] & (~|(RESET_GEN_WR_BYTES[ 9] & reg_be))) |
               (wr_addr_hit[10] & (~|(RESET_GEN_WR_BYTES[10] & reg_be))) |
               (wr_addr_hit[11] & (~|(RESET_GEN_WR_BYTES[11] & reg_be))) |
               (wr_addr_hit[12] & (~|(RESET_GEN_WR_BYTES[12] & reg_be))) |
               (wr_addr_hit[13] & (~|(RESET_GEN_WR_BYTES[13] & reg_be))) |
               (wr_addr_hit[14] & (~|(RESET_GEN_WR_BYTES[14] & reg_be))) |
               (wr_addr_hit[15] & (~|(RESET_GEN_WR_BYTES[15] & reg_be)))));
    rd_err = (reg_re &
              ((rd_addr_hit[ 0] & (~RESET_GEN_REG_READABLE[ 0])) |
               (rd_addr_hit[ 1] & (~RESET_GEN_REG_READABLE[ 1])) |
               (rd_addr_hit[ 2] & (~RESET_GEN_REG_READABLE[ 2])) |
               (rd_addr_hit[ 3] & (~RESET_GEN_REG_READABLE[ 3])) |
               (rd_addr_hit[ 4] & (~RESET_GEN_REG_READABLE[ 4])) |
               (rd_addr_hit[ 5] & (~RESET_GEN_REG_READABLE[ 5])) |
               (rd_addr_hit[ 6] & (~RESET_GEN_REG_READABLE[ 6])) |
               (rd_addr_hit[ 7] & (~RESET_GEN_REG_READABLE[ 7])) |
               (rd_addr_hit[ 8] & (~RESET_GEN_REG_READABLE[ 8])) |
               (rd_addr_hit[ 9] & (~RESET_GEN_REG_READABLE[ 9])) |
               (rd_addr_hit[10] & (~RESET_GEN_REG_READABLE[10])) |
               (rd_addr_hit[11] & (~RESET_GEN_REG_READABLE[11])) |
               (rd_addr_hit[12] & (~RESET_GEN_REG_READABLE[12])) |
               (rd_addr_hit[13] & (~RESET_GEN_REG_READABLE[13])) |
               (rd_addr_hit[14] & (~RESET_GEN_REG_READABLE[14])) |
               (rd_addr_hit[15] & (~RESET_GEN_REG_READABLE[15]))));
  end
  assign rst_cfg_hw_rst_we = wr_addr_hit[0] & reg_we & !reg_wr_error;

  assign rst_cfg_hw_rst_rst_src_mask_wd = reg_wdata[2:0];

  assign rst_cfg_hw_rst_rst_stretch_wd = reg_wdata[27:16];
  assign rst_sw_hw_rst_we = wr_addr_hit[1] & reg_we & !reg_wr_error;

  assign rst_sw_hw_rst_wd = reg_wdata[0];
  assign rst_cfg_dmi_rst_we = wr_addr_hit[2] & reg_we & !reg_wr_error;

  assign rst_cfg_dmi_rst_rst_src_mask_wd = reg_wdata[2:0];

  assign rst_cfg_dmi_rst_rst_stretch_wd = reg_wdata[27:16];
  assign rst_sw_dmi_rst_we = wr_addr_hit[3] & reg_we & !reg_wr_error;

  assign rst_sw_dmi_rst_wd = reg_wdata[0];
  assign rst_cfg_bus_rst_asyn_we = wr_addr_hit[4] & reg_we & !reg_wr_error;

  assign rst_cfg_bus_rst_asyn_rst_src_mask_wd = reg_wdata[2:0];

  assign rst_cfg_bus_rst_asyn_rst_stretch_wd = reg_wdata[27:16];
  assign rst_sw_bus_rst_asyn_we = wr_addr_hit[5] & reg_we & !reg_wr_error;

  assign rst_sw_bus_rst_asyn_wd = reg_wdata[0];
  assign rst_cfg_sys_core_rst_we = wr_addr_hit[6] & reg_we & !reg_wr_error;

  assign rst_cfg_sys_core_rst_rst_src_mask_wd = reg_wdata[2:0];

  assign rst_cfg_sys_core_rst_rst_stretch_wd = reg_wdata[27:16];
  assign rst_sw_sys_core_rst_we = wr_addr_hit[7] & reg_we & !reg_wr_error;

  assign rst_sw_sys_core_rst_wd = reg_wdata[0];
  assign rst_cfg_ai_core_rst_we = wr_addr_hit[8] & reg_we & !reg_wr_error;

  assign rst_cfg_ai_core_rst_rst_src_mask_wd = reg_wdata[2:0];

  assign rst_cfg_ai_core_rst_rst_stretch_wd = reg_wdata[27:16];
  assign rst_sw_ai_core_rst_we = wr_addr_hit[9] & reg_we & !reg_wr_error;

  assign rst_sw_ai_core_rst_wd = reg_wdata[0];
  assign rst_cfg_pcie_rst_we = wr_addr_hit[10] & reg_we & !reg_wr_error;

  assign rst_cfg_pcie_rst_rst_src_mask_wd = reg_wdata[2:0];

  assign rst_cfg_pcie_rst_rst_stretch_wd = reg_wdata[27:16];
  assign rst_sw_pcie_rst_we = wr_addr_hit[11] & reg_we & !reg_wr_error;

  assign rst_sw_pcie_rst_wd = reg_wdata[2:0];
  assign rst_cfg_ddr_rst_we = wr_addr_hit[12] & reg_we & !reg_wr_error;

  assign rst_cfg_ddr_rst_rst_src_mask_wd = reg_wdata[2:0];

  assign rst_cfg_ddr_rst_rst_stretch_wd = reg_wdata[27:16];
  assign rst_sw_ddr_rst_we = wr_addr_hit[13] & reg_we & !reg_wr_error;

  assign rst_sw_ddr_rst_wd = reg_wdata[5:0];
  assign dbnc_timer_re = rd_addr_hit[14] & reg_re & !reg_rd_error;
  assign dbnc_timer_we = wr_addr_hit[14] & reg_we & !reg_wr_error;

  assign dbnc_timer_wd = reg_wdata[31:0];
  assign dbnc_timer_pcie_btn_rst_re = rd_addr_hit[15] & reg_re & !reg_rd_error;
  assign dbnc_timer_pcie_btn_rst_we = wr_addr_hit[15] & reg_we & !reg_wr_error;

  assign dbnc_timer_pcie_btn_rst_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      rd_addr_hit[0]: begin
        reg_rdata_next[2:0] = rst_cfg_hw_rst_rst_src_mask_qs;
        reg_rdata_next[27:16] = rst_cfg_hw_rst_rst_stretch_qs;
      end

      rd_addr_hit[1]: begin
        reg_rdata_next[0] = rst_sw_hw_rst_qs;
      end

      rd_addr_hit[2]: begin
        reg_rdata_next[2:0] = rst_cfg_dmi_rst_rst_src_mask_qs;
        reg_rdata_next[27:16] = rst_cfg_dmi_rst_rst_stretch_qs;
      end

      rd_addr_hit[3]: begin
        reg_rdata_next[0] = rst_sw_dmi_rst_qs;
      end

      rd_addr_hit[4]: begin
        reg_rdata_next[2:0] = rst_cfg_bus_rst_asyn_rst_src_mask_qs;
        reg_rdata_next[27:16] = rst_cfg_bus_rst_asyn_rst_stretch_qs;
      end

      rd_addr_hit[5]: begin
        reg_rdata_next[0] = rst_sw_bus_rst_asyn_qs;
      end

      rd_addr_hit[6]: begin
        reg_rdata_next[2:0] = rst_cfg_sys_core_rst_rst_src_mask_qs;
        reg_rdata_next[27:16] = rst_cfg_sys_core_rst_rst_stretch_qs;
      end

      rd_addr_hit[7]: begin
        reg_rdata_next[0] = rst_sw_sys_core_rst_qs;
      end

      rd_addr_hit[8]: begin
        reg_rdata_next[2:0] = rst_cfg_ai_core_rst_rst_src_mask_qs;
        reg_rdata_next[27:16] = rst_cfg_ai_core_rst_rst_stretch_qs;
      end

      rd_addr_hit[9]: begin
        reg_rdata_next[0] = rst_sw_ai_core_rst_qs;
      end

      rd_addr_hit[10]: begin
        reg_rdata_next[2:0] = rst_cfg_pcie_rst_rst_src_mask_qs;
        reg_rdata_next[27:16] = rst_cfg_pcie_rst_rst_stretch_qs;
      end

      rd_addr_hit[11]: begin
        reg_rdata_next[2:0] = rst_sw_pcie_rst_qs;
      end

      rd_addr_hit[12]: begin
        reg_rdata_next[2:0] = rst_cfg_ddr_rst_rst_src_mask_qs;
        reg_rdata_next[27:16] = rst_cfg_ddr_rst_rst_stretch_qs;
      end

      rd_addr_hit[13]: begin
        reg_rdata_next[5:0] = rst_sw_ddr_rst_qs;
      end

      rd_addr_hit[14]: begin
        reg_rdata_next[31:0] = dbnc_timer_qs;
      end

      rd_addr_hit[15]: begin
        reg_rdata_next[31:0] = dbnc_timer_pcie_btn_rst_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  logic reg_busy_sel;
  assign reg_busy = reg_busy_sel | shadow_busy;
  always_comb begin
    reg_busy_sel = '0;
    unique case (1'b1)
      default: begin
        reg_busy_sel  = '0;
      end
    endcase
  end


  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  // spyglass disable_block W528
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;
  // spyglass enable_block W528

//synopsys translate_off
`ifdef ASSERTIONS_ON

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)


  `ASSERT(ren2addrHit, (reg_re) |-> $onehot0(rd_addr_hit), clk_i, !rst_ni)
  `ASSERT(wen2addrHit, (reg_we) |-> $onehot0(wr_addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, apb_reg_h2d.a_valid |-> apb_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

`endif
//synopsys translate_on

endmodule

`endif
