// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0

// UVM Registers auto-generated by `reggen` containing data structure
package token_mgr_csr_ral_pkg;
  // dep packages
  import uvm_pkg::*;
  import dv_base_reg_pkg::*;

  // macro includes
  `include "uvm_macros.svh"

  // Forward declare all register/memory/block classes
  typedef class token_mgr_csr_reg_swep_prod_0;
  typedef class token_mgr_csr_reg_swep_prod_1;
  typedef class token_mgr_csr_reg_swep_cons_0;
  typedef class token_mgr_csr_reg_swep_cons_1;
  typedef class token_mgr_csr_reg_irq_swep_sat_status;
  typedef class token_mgr_csr_reg_irq_swep_sat_en;
  typedef class token_mgr_csr_reg_irq_swep_non_zero_status;
  typedef class token_mgr_csr_reg_irq_swep_non_zero_en;
  typedef class token_mgr_csr_reg_irq_gen_sat_prod_status;
  typedef class token_mgr_csr_reg_irq_gen_sat_prod_en;
  typedef class token_mgr_csr_reg_prod_cnt_m_ifd0;
  typedef class token_mgr_csr_reg_prod_cnt_m_ifd1;
  typedef class token_mgr_csr_reg_prod_cnt_m_ifdw;
  typedef class token_mgr_csr_reg_prod_cnt_m_odr;
  typedef class token_mgr_csr_reg_prod_cnt_d_ifd0;
  typedef class token_mgr_csr_reg_prod_cnt_d_ifd1;
  typedef class token_mgr_csr_reg_prod_cnt_d_odr;
  typedef class token_mgr_csr_reg_prod_cnt_mvm_exe;
  typedef class token_mgr_csr_reg_prod_cnt_mvm_prg;
  typedef class token_mgr_csr_reg_block;

  class token_mgr_csr_reg_swep_prod_0 extends dv_base_reg;
    // fields
    rand dv_base_reg_field m_ifd0;
    rand dv_base_reg_field m_ifd1;
    rand dv_base_reg_field m_ifdw;
    rand dv_base_reg_field m_odr;
    rand dv_base_reg_field d_ifd0;
    rand dv_base_reg_field d_ifd1;
    rand dv_base_reg_field d_odr;

    `uvm_object_utils(token_mgr_csr_reg_swep_prod_0)

    function new(string       name = "token_mgr_csr_reg_swep_prod_0",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      m_ifd0 = (dv_base_reg_field::
                type_id::create("m_ifd0"));
      m_ifd0.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0.set_original_access("RW");

      m_ifd1 = (dv_base_reg_field::
                type_id::create("m_ifd1"));
      m_ifd1.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1.set_original_access("RW");

      m_ifdw = (dv_base_reg_field::
                type_id::create("m_ifdw"));
      m_ifdw.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw.set_original_access("RW");

      m_odr = (dv_base_reg_field::
               type_id::create("m_odr"));
      m_odr.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr.set_original_access("RW");

      d_ifd0 = (dv_base_reg_field::
                type_id::create("d_ifd0"));
      d_ifd0.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0.set_original_access("RW");

      d_ifd1 = (dv_base_reg_field::
                type_id::create("d_ifd1"));
      d_ifd1.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1.set_original_access("RW");

      d_odr = (dv_base_reg_field::
               type_id::create("d_odr"));
      d_odr.configure(
        .parent(this),
        .size(8),
        .lsb_pos(48),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr.set_original_access("RW");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_swep_prod_0

  class token_mgr_csr_reg_swep_prod_1 extends dv_base_reg;
    // fields
    rand dv_base_reg_field mvm_exe;
    rand dv_base_reg_field mvm_prg;
    rand dv_base_reg_field dwpu;
    rand dv_base_reg_field d_dpu;
    rand dv_base_reg_field d_iau;
    rand dv_base_reg_field m_dpu;
    rand dv_base_reg_field m_iau;

    `uvm_object_utils(token_mgr_csr_reg_swep_prod_1)

    function new(string       name = "token_mgr_csr_reg_swep_prod_1",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      mvm_exe = (dv_base_reg_field::
                 type_id::create("mvm_exe"));
      mvm_exe.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      mvm_exe.set_original_access("RW");

      mvm_prg = (dv_base_reg_field::
                 type_id::create("mvm_prg"));
      mvm_prg.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      mvm_prg.set_original_access("RW");

      dwpu = (dv_base_reg_field::
              type_id::create("dwpu"));
      dwpu.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      dwpu.set_original_access("RW");

      d_dpu = (dv_base_reg_field::
               type_id::create("d_dpu"));
      d_dpu.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_dpu.set_original_access("RW");

      d_iau = (dv_base_reg_field::
               type_id::create("d_iau"));
      d_iau.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_iau.set_original_access("RW");

      m_dpu = (dv_base_reg_field::
               type_id::create("m_dpu"));
      m_dpu.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_dpu.set_original_access("RW");

      m_iau = (dv_base_reg_field::
               type_id::create("m_iau"));
      m_iau.configure(
        .parent(this),
        .size(8),
        .lsb_pos(48),
        .access("RW"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_iau.set_original_access("RW");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_swep_prod_1

  class token_mgr_csr_reg_swep_cons_0 extends dv_base_reg;
    // fields
    rand dv_base_reg_field m_ifd0;
    rand dv_base_reg_field m_ifd1;
    rand dv_base_reg_field m_ifdw;
    rand dv_base_reg_field m_odr;
    rand dv_base_reg_field d_ifd0;
    rand dv_base_reg_field d_ifd1;
    rand dv_base_reg_field d_odr;

    `uvm_object_utils(token_mgr_csr_reg_swep_cons_0)

    function new(string       name = "token_mgr_csr_reg_swep_cons_0",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      m_ifd0 = (dv_base_reg_field::
                type_id::create("m_ifd0"));
      m_ifd0.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0.set_original_access("RC");

      m_ifd1 = (dv_base_reg_field::
                type_id::create("m_ifd1"));
      m_ifd1.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1.set_original_access("RC");

      m_ifdw = (dv_base_reg_field::
                type_id::create("m_ifdw"));
      m_ifdw.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw.set_original_access("RC");

      m_odr = (dv_base_reg_field::
               type_id::create("m_odr"));
      m_odr.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr.set_original_access("RC");

      d_ifd0 = (dv_base_reg_field::
                type_id::create("d_ifd0"));
      d_ifd0.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0.set_original_access("RC");

      d_ifd1 = (dv_base_reg_field::
                type_id::create("d_ifd1"));
      d_ifd1.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1.set_original_access("RC");

      d_odr = (dv_base_reg_field::
               type_id::create("d_odr"));
      d_odr.configure(
        .parent(this),
        .size(8),
        .lsb_pos(48),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr.set_original_access("RC");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_swep_cons_0

  class token_mgr_csr_reg_swep_cons_1 extends dv_base_reg;
    // fields
    rand dv_base_reg_field mvm_exe;
    rand dv_base_reg_field mvm_prg;
    rand dv_base_reg_field dwpu;
    rand dv_base_reg_field d_dpu;
    rand dv_base_reg_field d_iau;
    rand dv_base_reg_field m_dpu;
    rand dv_base_reg_field m_iau;

    `uvm_object_utils(token_mgr_csr_reg_swep_cons_1)

    function new(string       name = "token_mgr_csr_reg_swep_cons_1",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      mvm_exe = (dv_base_reg_field::
                 type_id::create("mvm_exe"));
      mvm_exe.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      mvm_exe.set_original_access("RC");

      mvm_prg = (dv_base_reg_field::
                 type_id::create("mvm_prg"));
      mvm_prg.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      mvm_prg.set_original_access("RC");

      dwpu = (dv_base_reg_field::
              type_id::create("dwpu"));
      dwpu.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      dwpu.set_original_access("RC");

      d_dpu = (dv_base_reg_field::
               type_id::create("d_dpu"));
      d_dpu.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_dpu.set_original_access("RC");

      d_iau = (dv_base_reg_field::
               type_id::create("d_iau"));
      d_iau.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_iau.set_original_access("RC");

      m_dpu = (dv_base_reg_field::
               type_id::create("m_dpu"));
      m_dpu.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_dpu.set_original_access("RC");

      m_iau = (dv_base_reg_field::
               type_id::create("m_iau"));
      m_iau.configure(
        .parent(this),
        .size(8),
        .lsb_pos(48),
        .access("RC"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_iau.set_original_access("RC");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_swep_cons_1

  class token_mgr_csr_reg_irq_swep_sat_status extends dv_base_reg;
    // fields
    rand dv_base_reg_field swep_cons_m_ifd0;
    rand dv_base_reg_field swep_cons_m_ifd1;
    rand dv_base_reg_field swep_cons_m_ifdw;
    rand dv_base_reg_field swep_cons_m_odr;
    rand dv_base_reg_field swep_cons_d_ifd0;
    rand dv_base_reg_field swep_cons_d_ifd1;
    rand dv_base_reg_field swep_cons_d_odr;
    rand dv_base_reg_field swep_cons_mvm_exe;
    rand dv_base_reg_field swep_cons_mvm_prg;
    rand dv_base_reg_field swep_cons_dwpu;
    rand dv_base_reg_field swep_cons_d_dpu;
    rand dv_base_reg_field swep_cons_d_iau;
    rand dv_base_reg_field swep_cons_m_dpu;
    rand dv_base_reg_field swep_cons_m_iau;
    rand dv_base_reg_field swep_prod_m_ifd0;
    rand dv_base_reg_field swep_prod_m_ifd1;
    rand dv_base_reg_field swep_prod_m_ifdw;
    rand dv_base_reg_field swep_prod_m_odr;
    rand dv_base_reg_field swep_prod_d_ifd0;
    rand dv_base_reg_field swep_prod_d_ifd1;
    rand dv_base_reg_field swep_prod_d_odr;
    rand dv_base_reg_field swep_prod_mvm_exe;
    rand dv_base_reg_field swep_prod_mvm_prg;
    rand dv_base_reg_field swep_prod_dwpu;
    rand dv_base_reg_field swep_prod_d_dpu;
    rand dv_base_reg_field swep_prod_d_iau;
    rand dv_base_reg_field swep_prod_m_dpu;
    rand dv_base_reg_field swep_prod_m_iau;

    `uvm_object_utils(token_mgr_csr_reg_irq_swep_sat_status)

    function new(string       name = "token_mgr_csr_reg_irq_swep_sat_status",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      swep_cons_m_ifd0 = (dv_base_reg_field::
                          type_id::create("swep_cons_m_ifd0"));
      swep_cons_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_ifd0.set_original_access("W1C");

      swep_cons_m_ifd1 = (dv_base_reg_field::
                          type_id::create("swep_cons_m_ifd1"));
      swep_cons_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(1),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_ifd1.set_original_access("W1C");

      swep_cons_m_ifdw = (dv_base_reg_field::
                          type_id::create("swep_cons_m_ifdw"));
      swep_cons_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(2),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_ifdw.set_original_access("W1C");

      swep_cons_m_odr = (dv_base_reg_field::
                         type_id::create("swep_cons_m_odr"));
      swep_cons_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(3),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_odr.set_original_access("W1C");

      swep_cons_d_ifd0 = (dv_base_reg_field::
                          type_id::create("swep_cons_d_ifd0"));
      swep_cons_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(4),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_ifd0.set_original_access("W1C");

      swep_cons_d_ifd1 = (dv_base_reg_field::
                          type_id::create("swep_cons_d_ifd1"));
      swep_cons_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(5),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_ifd1.set_original_access("W1C");

      swep_cons_d_odr = (dv_base_reg_field::
                         type_id::create("swep_cons_d_odr"));
      swep_cons_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(6),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_odr.set_original_access("W1C");

      swep_cons_mvm_exe = (dv_base_reg_field::
                           type_id::create("swep_cons_mvm_exe"));
      swep_cons_mvm_exe.configure(
        .parent(this),
        .size(1),
        .lsb_pos(7),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_mvm_exe.set_original_access("W1C");

      swep_cons_mvm_prg = (dv_base_reg_field::
                           type_id::create("swep_cons_mvm_prg"));
      swep_cons_mvm_prg.configure(
        .parent(this),
        .size(1),
        .lsb_pos(8),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_mvm_prg.set_original_access("W1C");

      swep_cons_dwpu = (dv_base_reg_field::
                        type_id::create("swep_cons_dwpu"));
      swep_cons_dwpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(9),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_dwpu.set_original_access("W1C");

      swep_cons_d_dpu = (dv_base_reg_field::
                         type_id::create("swep_cons_d_dpu"));
      swep_cons_d_dpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(10),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_dpu.set_original_access("W1C");

      swep_cons_d_iau = (dv_base_reg_field::
                         type_id::create("swep_cons_d_iau"));
      swep_cons_d_iau.configure(
        .parent(this),
        .size(1),
        .lsb_pos(11),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_iau.set_original_access("W1C");

      swep_cons_m_dpu = (dv_base_reg_field::
                         type_id::create("swep_cons_m_dpu"));
      swep_cons_m_dpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(12),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_dpu.set_original_access("W1C");

      swep_cons_m_iau = (dv_base_reg_field::
                         type_id::create("swep_cons_m_iau"));
      swep_cons_m_iau.configure(
        .parent(this),
        .size(1),
        .lsb_pos(13),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_iau.set_original_access("W1C");

      swep_prod_m_ifd0 = (dv_base_reg_field::
                          type_id::create("swep_prod_m_ifd0"));
      swep_prod_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(16),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_m_ifd0.set_original_access("W1C");

      swep_prod_m_ifd1 = (dv_base_reg_field::
                          type_id::create("swep_prod_m_ifd1"));
      swep_prod_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(17),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_m_ifd1.set_original_access("W1C");

      swep_prod_m_ifdw = (dv_base_reg_field::
                          type_id::create("swep_prod_m_ifdw"));
      swep_prod_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(18),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_m_ifdw.set_original_access("W1C");

      swep_prod_m_odr = (dv_base_reg_field::
                         type_id::create("swep_prod_m_odr"));
      swep_prod_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(19),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_m_odr.set_original_access("W1C");

      swep_prod_d_ifd0 = (dv_base_reg_field::
                          type_id::create("swep_prod_d_ifd0"));
      swep_prod_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(20),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_d_ifd0.set_original_access("W1C");

      swep_prod_d_ifd1 = (dv_base_reg_field::
                          type_id::create("swep_prod_d_ifd1"));
      swep_prod_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(21),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_d_ifd1.set_original_access("W1C");

      swep_prod_d_odr = (dv_base_reg_field::
                         type_id::create("swep_prod_d_odr"));
      swep_prod_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(22),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_d_odr.set_original_access("W1C");

      swep_prod_mvm_exe = (dv_base_reg_field::
                           type_id::create("swep_prod_mvm_exe"));
      swep_prod_mvm_exe.configure(
        .parent(this),
        .size(1),
        .lsb_pos(23),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_mvm_exe.set_original_access("W1C");

      swep_prod_mvm_prg = (dv_base_reg_field::
                           type_id::create("swep_prod_mvm_prg"));
      swep_prod_mvm_prg.configure(
        .parent(this),
        .size(1),
        .lsb_pos(24),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_mvm_prg.set_original_access("W1C");

      swep_prod_dwpu = (dv_base_reg_field::
                        type_id::create("swep_prod_dwpu"));
      swep_prod_dwpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(25),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_dwpu.set_original_access("W1C");

      swep_prod_d_dpu = (dv_base_reg_field::
                         type_id::create("swep_prod_d_dpu"));
      swep_prod_d_dpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(26),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_d_dpu.set_original_access("W1C");

      swep_prod_d_iau = (dv_base_reg_field::
                         type_id::create("swep_prod_d_iau"));
      swep_prod_d_iau.configure(
        .parent(this),
        .size(1),
        .lsb_pos(27),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_d_iau.set_original_access("W1C");

      swep_prod_m_dpu = (dv_base_reg_field::
                         type_id::create("swep_prod_m_dpu"));
      swep_prod_m_dpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(28),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_m_dpu.set_original_access("W1C");

      swep_prod_m_iau = (dv_base_reg_field::
                         type_id::create("swep_prod_m_iau"));
      swep_prod_m_iau.configure(
        .parent(this),
        .size(1),
        .lsb_pos(29),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_prod_m_iau.set_original_access("W1C");

    endfunction : build
  endclass : token_mgr_csr_reg_irq_swep_sat_status

  class token_mgr_csr_reg_irq_swep_sat_en extends dv_base_reg;
    // fields
    rand dv_base_reg_field irq_swep_cons_m_ifd0_en;
    rand dv_base_reg_field irq_swep_cons_m_ifd1_en;
    rand dv_base_reg_field irq_swep_cons_m_ifdw_en;
    rand dv_base_reg_field irq_swep_cons_m_odr_en;
    rand dv_base_reg_field irq_swep_cons_d_ifd0_en;
    rand dv_base_reg_field irq_swep_cons_d_ifd1_en;
    rand dv_base_reg_field irq_swep_cons_d_odr_en;
    rand dv_base_reg_field irq_swep_cons_mvm_exe_en;
    rand dv_base_reg_field irq_swep_cons_mvm_prg_en;
    rand dv_base_reg_field irq_swep_cons_dwpu_en;
    rand dv_base_reg_field irq_swep_cons_d_dpu_en;
    rand dv_base_reg_field irq_swep_cons_d_iau_en;
    rand dv_base_reg_field irq_swep_cons_m_dpu_en;
    rand dv_base_reg_field irq_swep_cons_m_iau_en;
    rand dv_base_reg_field irq_swep_prod_m_ifd0_en;
    rand dv_base_reg_field irq_swep_prod_m_ifd1_en;
    rand dv_base_reg_field irq_swep_prod_m_ifdw_en;
    rand dv_base_reg_field irq_swep_prod_m_odr_en;
    rand dv_base_reg_field irq_swep_prod_d_ifd0_en;
    rand dv_base_reg_field irq_swep_prod_d_ifd1_en;
    rand dv_base_reg_field irq_swep_prod_d_odr_en;
    rand dv_base_reg_field irq_swep_prod_mvm_exe_en;
    rand dv_base_reg_field irq_swep_prod_mvm_prg_en;
    rand dv_base_reg_field irq_swep_prod_dwpu_en;
    rand dv_base_reg_field irq_swep_prod_d_dpu_en;
    rand dv_base_reg_field irq_swep_prod_d_iau_en;
    rand dv_base_reg_field irq_swep_prod_m_dpu_en;
    rand dv_base_reg_field irq_swep_prod_m_iau_en;

    `uvm_object_utils(token_mgr_csr_reg_irq_swep_sat_en)

    function new(string       name = "token_mgr_csr_reg_irq_swep_sat_en",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      irq_swep_cons_m_ifd0_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_m_ifd0_en"));
      irq_swep_cons_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_ifd0_en.set_original_access("RW");

      irq_swep_cons_m_ifd1_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_m_ifd1_en"));
      irq_swep_cons_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(1),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_ifd1_en.set_original_access("RW");

      irq_swep_cons_m_ifdw_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_m_ifdw_en"));
      irq_swep_cons_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(2),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_ifdw_en.set_original_access("RW");

      irq_swep_cons_m_odr_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_m_odr_en"));
      irq_swep_cons_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(3),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_odr_en.set_original_access("RW");

      irq_swep_cons_d_ifd0_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_d_ifd0_en"));
      irq_swep_cons_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(4),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_ifd0_en.set_original_access("RW");

      irq_swep_cons_d_ifd1_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_d_ifd1_en"));
      irq_swep_cons_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(5),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_ifd1_en.set_original_access("RW");

      irq_swep_cons_d_odr_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_d_odr_en"));
      irq_swep_cons_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(6),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_odr_en.set_original_access("RW");

      irq_swep_cons_mvm_exe_en = (dv_base_reg_field::
                                  type_id::create("irq_swep_cons_mvm_exe_en"));
      irq_swep_cons_mvm_exe_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(7),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_mvm_exe_en.set_original_access("RW");

      irq_swep_cons_mvm_prg_en = (dv_base_reg_field::
                                  type_id::create("irq_swep_cons_mvm_prg_en"));
      irq_swep_cons_mvm_prg_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(8),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_mvm_prg_en.set_original_access("RW");

      irq_swep_cons_dwpu_en = (dv_base_reg_field::
                               type_id::create("irq_swep_cons_dwpu_en"));
      irq_swep_cons_dwpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(9),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_dwpu_en.set_original_access("RW");

      irq_swep_cons_d_dpu_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_d_dpu_en"));
      irq_swep_cons_d_dpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(10),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_dpu_en.set_original_access("RW");

      irq_swep_cons_d_iau_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_d_iau_en"));
      irq_swep_cons_d_iau_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(11),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_iau_en.set_original_access("RW");

      irq_swep_cons_m_dpu_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_m_dpu_en"));
      irq_swep_cons_m_dpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(12),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_dpu_en.set_original_access("RW");

      irq_swep_cons_m_iau_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_m_iau_en"));
      irq_swep_cons_m_iau_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(13),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_iau_en.set_original_access("RW");

      irq_swep_prod_m_ifd0_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_prod_m_ifd0_en"));
      irq_swep_prod_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(16),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_m_ifd0_en.set_original_access("RW");

      irq_swep_prod_m_ifd1_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_prod_m_ifd1_en"));
      irq_swep_prod_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(17),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_m_ifd1_en.set_original_access("RW");

      irq_swep_prod_m_ifdw_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_prod_m_ifdw_en"));
      irq_swep_prod_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(18),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_m_ifdw_en.set_original_access("RW");

      irq_swep_prod_m_odr_en = (dv_base_reg_field::
                                type_id::create("irq_swep_prod_m_odr_en"));
      irq_swep_prod_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(19),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_m_odr_en.set_original_access("RW");

      irq_swep_prod_d_ifd0_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_prod_d_ifd0_en"));
      irq_swep_prod_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(20),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_d_ifd0_en.set_original_access("RW");

      irq_swep_prod_d_ifd1_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_prod_d_ifd1_en"));
      irq_swep_prod_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(21),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_d_ifd1_en.set_original_access("RW");

      irq_swep_prod_d_odr_en = (dv_base_reg_field::
                                type_id::create("irq_swep_prod_d_odr_en"));
      irq_swep_prod_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(22),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_d_odr_en.set_original_access("RW");

      irq_swep_prod_mvm_exe_en = (dv_base_reg_field::
                                  type_id::create("irq_swep_prod_mvm_exe_en"));
      irq_swep_prod_mvm_exe_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(23),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_mvm_exe_en.set_original_access("RW");

      irq_swep_prod_mvm_prg_en = (dv_base_reg_field::
                                  type_id::create("irq_swep_prod_mvm_prg_en"));
      irq_swep_prod_mvm_prg_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(24),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_mvm_prg_en.set_original_access("RW");

      irq_swep_prod_dwpu_en = (dv_base_reg_field::
                               type_id::create("irq_swep_prod_dwpu_en"));
      irq_swep_prod_dwpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(25),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_dwpu_en.set_original_access("RW");

      irq_swep_prod_d_dpu_en = (dv_base_reg_field::
                                type_id::create("irq_swep_prod_d_dpu_en"));
      irq_swep_prod_d_dpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(26),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_d_dpu_en.set_original_access("RW");

      irq_swep_prod_d_iau_en = (dv_base_reg_field::
                                type_id::create("irq_swep_prod_d_iau_en"));
      irq_swep_prod_d_iau_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(27),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_d_iau_en.set_original_access("RW");

      irq_swep_prod_m_dpu_en = (dv_base_reg_field::
                                type_id::create("irq_swep_prod_m_dpu_en"));
      irq_swep_prod_m_dpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(28),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_m_dpu_en.set_original_access("RW");

      irq_swep_prod_m_iau_en = (dv_base_reg_field::
                                type_id::create("irq_swep_prod_m_iau_en"));
      irq_swep_prod_m_iau_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(29),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_prod_m_iau_en.set_original_access("RW");

    endfunction : build
  endclass : token_mgr_csr_reg_irq_swep_sat_en

  class token_mgr_csr_reg_irq_swep_non_zero_status extends dv_base_reg;
    // fields
    rand dv_base_reg_field swep_cons_m_ifd0;
    rand dv_base_reg_field swep_cons_m_ifd1;
    rand dv_base_reg_field swep_cons_m_ifdw;
    rand dv_base_reg_field swep_cons_m_odr;
    rand dv_base_reg_field swep_cons_d_ifd0;
    rand dv_base_reg_field swep_cons_d_ifd1;
    rand dv_base_reg_field swep_cons_d_odr;
    rand dv_base_reg_field swep_cons_mvm_exe;
    rand dv_base_reg_field swep_cons_mvm_prg;
    rand dv_base_reg_field swep_cons_dwpu;
    rand dv_base_reg_field swep_cons_d_dpu;
    rand dv_base_reg_field swep_cons_d_iau;
    rand dv_base_reg_field swep_cons_m_dpu;
    rand dv_base_reg_field swep_cons_m_iau;

    `uvm_object_utils(token_mgr_csr_reg_irq_swep_non_zero_status)

    function new(string       name = "token_mgr_csr_reg_irq_swep_non_zero_status",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      swep_cons_m_ifd0 = (dv_base_reg_field::
                          type_id::create("swep_cons_m_ifd0"));
      swep_cons_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_ifd0.set_original_access("W1C");

      swep_cons_m_ifd1 = (dv_base_reg_field::
                          type_id::create("swep_cons_m_ifd1"));
      swep_cons_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(1),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_ifd1.set_original_access("W1C");

      swep_cons_m_ifdw = (dv_base_reg_field::
                          type_id::create("swep_cons_m_ifdw"));
      swep_cons_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(2),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_ifdw.set_original_access("W1C");

      swep_cons_m_odr = (dv_base_reg_field::
                         type_id::create("swep_cons_m_odr"));
      swep_cons_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(3),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_odr.set_original_access("W1C");

      swep_cons_d_ifd0 = (dv_base_reg_field::
                          type_id::create("swep_cons_d_ifd0"));
      swep_cons_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(4),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_ifd0.set_original_access("W1C");

      swep_cons_d_ifd1 = (dv_base_reg_field::
                          type_id::create("swep_cons_d_ifd1"));
      swep_cons_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(5),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_ifd1.set_original_access("W1C");

      swep_cons_d_odr = (dv_base_reg_field::
                         type_id::create("swep_cons_d_odr"));
      swep_cons_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(6),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_odr.set_original_access("W1C");

      swep_cons_mvm_exe = (dv_base_reg_field::
                           type_id::create("swep_cons_mvm_exe"));
      swep_cons_mvm_exe.configure(
        .parent(this),
        .size(1),
        .lsb_pos(7),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_mvm_exe.set_original_access("W1C");

      swep_cons_mvm_prg = (dv_base_reg_field::
                           type_id::create("swep_cons_mvm_prg"));
      swep_cons_mvm_prg.configure(
        .parent(this),
        .size(1),
        .lsb_pos(8),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_mvm_prg.set_original_access("W1C");

      swep_cons_dwpu = (dv_base_reg_field::
                        type_id::create("swep_cons_dwpu"));
      swep_cons_dwpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(9),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_dwpu.set_original_access("W1C");

      swep_cons_d_dpu = (dv_base_reg_field::
                         type_id::create("swep_cons_d_dpu"));
      swep_cons_d_dpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(10),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_dpu.set_original_access("W1C");

      swep_cons_d_iau = (dv_base_reg_field::
                         type_id::create("swep_cons_d_iau"));
      swep_cons_d_iau.configure(
        .parent(this),
        .size(1),
        .lsb_pos(11),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_d_iau.set_original_access("W1C");

      swep_cons_m_dpu = (dv_base_reg_field::
                         type_id::create("swep_cons_m_dpu"));
      swep_cons_m_dpu.configure(
        .parent(this),
        .size(1),
        .lsb_pos(12),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_dpu.set_original_access("W1C");

      swep_cons_m_iau = (dv_base_reg_field::
                         type_id::create("swep_cons_m_iau"));
      swep_cons_m_iau.configure(
        .parent(this),
        .size(1),
        .lsb_pos(13),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      swep_cons_m_iau.set_original_access("W1C");

    endfunction : build
  endclass : token_mgr_csr_reg_irq_swep_non_zero_status

  class token_mgr_csr_reg_irq_swep_non_zero_en extends dv_base_reg;
    // fields
    rand dv_base_reg_field irq_swep_cons_m_ifd0_en;
    rand dv_base_reg_field irq_swep_cons_m_ifd1_en;
    rand dv_base_reg_field irq_swep_cons_m_ifdw_en;
    rand dv_base_reg_field irq_swep_cons_m_odr_en;
    rand dv_base_reg_field irq_swep_cons_d_ifd0_en;
    rand dv_base_reg_field irq_swep_cons_d_ifd1_en;
    rand dv_base_reg_field irq_swep_cons_d_odr_en;
    rand dv_base_reg_field irq_swep_cons_mvm_exe_en;
    rand dv_base_reg_field irq_swep_cons_mvm_prg_en;
    rand dv_base_reg_field irq_swep_cons_dwpu_en;
    rand dv_base_reg_field irq_swep_cons_d_dpu_en;
    rand dv_base_reg_field irq_swep_cons_d_iau_en;
    rand dv_base_reg_field irq_swep_cons_m_dpu_en;
    rand dv_base_reg_field irq_swep_cons_m_iau_en;

    `uvm_object_utils(token_mgr_csr_reg_irq_swep_non_zero_en)

    function new(string       name = "token_mgr_csr_reg_irq_swep_non_zero_en",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      irq_swep_cons_m_ifd0_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_m_ifd0_en"));
      irq_swep_cons_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_ifd0_en.set_original_access("RW");

      irq_swep_cons_m_ifd1_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_m_ifd1_en"));
      irq_swep_cons_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(1),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_ifd1_en.set_original_access("RW");

      irq_swep_cons_m_ifdw_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_m_ifdw_en"));
      irq_swep_cons_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(2),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_ifdw_en.set_original_access("RW");

      irq_swep_cons_m_odr_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_m_odr_en"));
      irq_swep_cons_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(3),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_odr_en.set_original_access("RW");

      irq_swep_cons_d_ifd0_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_d_ifd0_en"));
      irq_swep_cons_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(4),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_ifd0_en.set_original_access("RW");

      irq_swep_cons_d_ifd1_en = (dv_base_reg_field::
                                 type_id::create("irq_swep_cons_d_ifd1_en"));
      irq_swep_cons_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(5),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_ifd1_en.set_original_access("RW");

      irq_swep_cons_d_odr_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_d_odr_en"));
      irq_swep_cons_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(6),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_odr_en.set_original_access("RW");

      irq_swep_cons_mvm_exe_en = (dv_base_reg_field::
                                  type_id::create("irq_swep_cons_mvm_exe_en"));
      irq_swep_cons_mvm_exe_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(7),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_mvm_exe_en.set_original_access("RW");

      irq_swep_cons_mvm_prg_en = (dv_base_reg_field::
                                  type_id::create("irq_swep_cons_mvm_prg_en"));
      irq_swep_cons_mvm_prg_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(8),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_mvm_prg_en.set_original_access("RW");

      irq_swep_cons_dwpu_en = (dv_base_reg_field::
                               type_id::create("irq_swep_cons_dwpu_en"));
      irq_swep_cons_dwpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(9),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_dwpu_en.set_original_access("RW");

      irq_swep_cons_d_dpu_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_d_dpu_en"));
      irq_swep_cons_d_dpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(10),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_dpu_en.set_original_access("RW");

      irq_swep_cons_d_iau_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_d_iau_en"));
      irq_swep_cons_d_iau_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(11),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_d_iau_en.set_original_access("RW");

      irq_swep_cons_m_dpu_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_m_dpu_en"));
      irq_swep_cons_m_dpu_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(12),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_dpu_en.set_original_access("RW");

      irq_swep_cons_m_iau_en = (dv_base_reg_field::
                                type_id::create("irq_swep_cons_m_iau_en"));
      irq_swep_cons_m_iau_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(13),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_swep_cons_m_iau_en.set_original_access("RW");

    endfunction : build
  endclass : token_mgr_csr_reg_irq_swep_non_zero_en

  class token_mgr_csr_reg_irq_gen_sat_prod_status extends dv_base_reg;
    // fields
    rand dv_base_reg_field m_ifd0_tok_prod_m_ifd1;
    rand dv_base_reg_field m_ifd0_tok_prod_m_ifdw;
    rand dv_base_reg_field m_ifd0_tok_prod_m_odr;
    rand dv_base_reg_field m_ifd0_tok_prod_d_ifd0;
    rand dv_base_reg_field m_ifd0_tok_prod_d_ifd1;
    rand dv_base_reg_field m_ifd0_tok_prod_d_odr;
    rand dv_base_reg_field m_ifd1_tok_prod_m_ifd0;
    rand dv_base_reg_field m_ifd1_tok_prod_m_ifdw;
    rand dv_base_reg_field m_ifd1_tok_prod_m_odr;
    rand dv_base_reg_field m_ifd1_tok_prod_d_ifd0;
    rand dv_base_reg_field m_ifd1_tok_prod_d_ifd1;
    rand dv_base_reg_field m_ifd1_tok_prod_d_odr;
    rand dv_base_reg_field m_ifdw_tok_prod_m_ifd0;
    rand dv_base_reg_field m_ifdw_tok_prod_m_ifd1;
    rand dv_base_reg_field m_ifdw_tok_prod_m_odr;
    rand dv_base_reg_field m_ifdw_tok_prod_d_ifd0;
    rand dv_base_reg_field m_ifdw_tok_prod_d_ifd1;
    rand dv_base_reg_field m_ifdw_tok_prod_d_odr;
    rand dv_base_reg_field m_odr_tok_prod_m_ifd0;
    rand dv_base_reg_field m_odr_tok_prod_m_ifd1;
    rand dv_base_reg_field m_odr_tok_prod_m_ifdw;
    rand dv_base_reg_field m_odr_tok_prod_d_ifd0;
    rand dv_base_reg_field m_odr_tok_prod_d_ifd1;
    rand dv_base_reg_field m_odr_tok_prod_d_odr;
    rand dv_base_reg_field d_ifd0_tok_prod_m_ifd0;
    rand dv_base_reg_field d_ifd0_tok_prod_m_ifd1;
    rand dv_base_reg_field d_ifd0_tok_prod_m_ifdw;
    rand dv_base_reg_field d_ifd0_tok_prod_m_odr;
    rand dv_base_reg_field d_ifd0_tok_prod_d_ifd1;
    rand dv_base_reg_field d_ifd0_tok_prod_d_odr;
    rand dv_base_reg_field d_ifd1_tok_prod_m_ifd0;
    rand dv_base_reg_field d_ifd1_tok_prod_m_ifd1;
    rand dv_base_reg_field d_ifd1_tok_prod_m_ifdw;
    rand dv_base_reg_field d_ifd1_tok_prod_m_odr;
    rand dv_base_reg_field d_ifd1_tok_prod_d_ifd0;
    rand dv_base_reg_field d_ifd1_tok_prod_d_odr;
    rand dv_base_reg_field d_odr_tok_prod_m_ifd0;
    rand dv_base_reg_field d_odr_tok_prod_m_ifd1;
    rand dv_base_reg_field d_odr_tok_prod_m_ifdw;
    rand dv_base_reg_field d_odr_tok_prod_m_odr;
    rand dv_base_reg_field d_odr_tok_prod_d_ifd0;
    rand dv_base_reg_field d_odr_tok_prod_d_ifd1;
    rand dv_base_reg_field mvm_exe_tok_prod_mvm_prg;
    rand dv_base_reg_field mvm_prg_tok_prod_mvm_exe;

    `uvm_object_utils(token_mgr_csr_reg_irq_gen_sat_prod_status)

    function new(string       name = "token_mgr_csr_reg_irq_gen_sat_prod_status",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      m_ifd0_tok_prod_m_ifd1 = (dv_base_reg_field::
                                type_id::create("m_ifd0_tok_prod_m_ifd1"));
      m_ifd0_tok_prod_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_m_ifd1.set_original_access("W1C");

      m_ifd0_tok_prod_m_ifdw = (dv_base_reg_field::
                                type_id::create("m_ifd0_tok_prod_m_ifdw"));
      m_ifd0_tok_prod_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(1),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_m_ifdw.set_original_access("W1C");

      m_ifd0_tok_prod_m_odr = (dv_base_reg_field::
                               type_id::create("m_ifd0_tok_prod_m_odr"));
      m_ifd0_tok_prod_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(2),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_m_odr.set_original_access("W1C");

      m_ifd0_tok_prod_d_ifd0 = (dv_base_reg_field::
                                type_id::create("m_ifd0_tok_prod_d_ifd0"));
      m_ifd0_tok_prod_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(3),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_d_ifd0.set_original_access("W1C");

      m_ifd0_tok_prod_d_ifd1 = (dv_base_reg_field::
                                type_id::create("m_ifd0_tok_prod_d_ifd1"));
      m_ifd0_tok_prod_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(4),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_d_ifd1.set_original_access("W1C");

      m_ifd0_tok_prod_d_odr = (dv_base_reg_field::
                               type_id::create("m_ifd0_tok_prod_d_odr"));
      m_ifd0_tok_prod_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(5),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_d_odr.set_original_access("W1C");

      m_ifd1_tok_prod_m_ifd0 = (dv_base_reg_field::
                                type_id::create("m_ifd1_tok_prod_m_ifd0"));
      m_ifd1_tok_prod_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(6),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_m_ifd0.set_original_access("W1C");

      m_ifd1_tok_prod_m_ifdw = (dv_base_reg_field::
                                type_id::create("m_ifd1_tok_prod_m_ifdw"));
      m_ifd1_tok_prod_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(7),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_m_ifdw.set_original_access("W1C");

      m_ifd1_tok_prod_m_odr = (dv_base_reg_field::
                               type_id::create("m_ifd1_tok_prod_m_odr"));
      m_ifd1_tok_prod_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(8),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_m_odr.set_original_access("W1C");

      m_ifd1_tok_prod_d_ifd0 = (dv_base_reg_field::
                                type_id::create("m_ifd1_tok_prod_d_ifd0"));
      m_ifd1_tok_prod_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(9),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_d_ifd0.set_original_access("W1C");

      m_ifd1_tok_prod_d_ifd1 = (dv_base_reg_field::
                                type_id::create("m_ifd1_tok_prod_d_ifd1"));
      m_ifd1_tok_prod_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(10),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_d_ifd1.set_original_access("W1C");

      m_ifd1_tok_prod_d_odr = (dv_base_reg_field::
                               type_id::create("m_ifd1_tok_prod_d_odr"));
      m_ifd1_tok_prod_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(11),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_d_odr.set_original_access("W1C");

      m_ifdw_tok_prod_m_ifd0 = (dv_base_reg_field::
                                type_id::create("m_ifdw_tok_prod_m_ifd0"));
      m_ifdw_tok_prod_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(12),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_m_ifd0.set_original_access("W1C");

      m_ifdw_tok_prod_m_ifd1 = (dv_base_reg_field::
                                type_id::create("m_ifdw_tok_prod_m_ifd1"));
      m_ifdw_tok_prod_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(13),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_m_ifd1.set_original_access("W1C");

      m_ifdw_tok_prod_m_odr = (dv_base_reg_field::
                               type_id::create("m_ifdw_tok_prod_m_odr"));
      m_ifdw_tok_prod_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(14),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_m_odr.set_original_access("W1C");

      m_ifdw_tok_prod_d_ifd0 = (dv_base_reg_field::
                                type_id::create("m_ifdw_tok_prod_d_ifd0"));
      m_ifdw_tok_prod_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(15),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_d_ifd0.set_original_access("W1C");

      m_ifdw_tok_prod_d_ifd1 = (dv_base_reg_field::
                                type_id::create("m_ifdw_tok_prod_d_ifd1"));
      m_ifdw_tok_prod_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(16),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_d_ifd1.set_original_access("W1C");

      m_ifdw_tok_prod_d_odr = (dv_base_reg_field::
                               type_id::create("m_ifdw_tok_prod_d_odr"));
      m_ifdw_tok_prod_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(17),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_d_odr.set_original_access("W1C");

      m_odr_tok_prod_m_ifd0 = (dv_base_reg_field::
                               type_id::create("m_odr_tok_prod_m_ifd0"));
      m_odr_tok_prod_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(18),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_m_ifd0.set_original_access("W1C");

      m_odr_tok_prod_m_ifd1 = (dv_base_reg_field::
                               type_id::create("m_odr_tok_prod_m_ifd1"));
      m_odr_tok_prod_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(19),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_m_ifd1.set_original_access("W1C");

      m_odr_tok_prod_m_ifdw = (dv_base_reg_field::
                               type_id::create("m_odr_tok_prod_m_ifdw"));
      m_odr_tok_prod_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(20),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_m_ifdw.set_original_access("W1C");

      m_odr_tok_prod_d_ifd0 = (dv_base_reg_field::
                               type_id::create("m_odr_tok_prod_d_ifd0"));
      m_odr_tok_prod_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(21),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_d_ifd0.set_original_access("W1C");

      m_odr_tok_prod_d_ifd1 = (dv_base_reg_field::
                               type_id::create("m_odr_tok_prod_d_ifd1"));
      m_odr_tok_prod_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(22),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_d_ifd1.set_original_access("W1C");

      m_odr_tok_prod_d_odr = (dv_base_reg_field::
                              type_id::create("m_odr_tok_prod_d_odr"));
      m_odr_tok_prod_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(23),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_d_odr.set_original_access("W1C");

      d_ifd0_tok_prod_m_ifd0 = (dv_base_reg_field::
                                type_id::create("d_ifd0_tok_prod_m_ifd0"));
      d_ifd0_tok_prod_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(24),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_m_ifd0.set_original_access("W1C");

      d_ifd0_tok_prod_m_ifd1 = (dv_base_reg_field::
                                type_id::create("d_ifd0_tok_prod_m_ifd1"));
      d_ifd0_tok_prod_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(25),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_m_ifd1.set_original_access("W1C");

      d_ifd0_tok_prod_m_ifdw = (dv_base_reg_field::
                                type_id::create("d_ifd0_tok_prod_m_ifdw"));
      d_ifd0_tok_prod_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(26),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_m_ifdw.set_original_access("W1C");

      d_ifd0_tok_prod_m_odr = (dv_base_reg_field::
                               type_id::create("d_ifd0_tok_prod_m_odr"));
      d_ifd0_tok_prod_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(27),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_m_odr.set_original_access("W1C");

      d_ifd0_tok_prod_d_ifd1 = (dv_base_reg_field::
                                type_id::create("d_ifd0_tok_prod_d_ifd1"));
      d_ifd0_tok_prod_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(28),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_d_ifd1.set_original_access("W1C");

      d_ifd0_tok_prod_d_odr = (dv_base_reg_field::
                               type_id::create("d_ifd0_tok_prod_d_odr"));
      d_ifd0_tok_prod_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(29),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_d_odr.set_original_access("W1C");

      d_ifd1_tok_prod_m_ifd0 = (dv_base_reg_field::
                                type_id::create("d_ifd1_tok_prod_m_ifd0"));
      d_ifd1_tok_prod_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(30),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_m_ifd0.set_original_access("W1C");

      d_ifd1_tok_prod_m_ifd1 = (dv_base_reg_field::
                                type_id::create("d_ifd1_tok_prod_m_ifd1"));
      d_ifd1_tok_prod_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(31),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_m_ifd1.set_original_access("W1C");

      d_ifd1_tok_prod_m_ifdw = (dv_base_reg_field::
                                type_id::create("d_ifd1_tok_prod_m_ifdw"));
      d_ifd1_tok_prod_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(32),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_m_ifdw.set_original_access("W1C");

      d_ifd1_tok_prod_m_odr = (dv_base_reg_field::
                               type_id::create("d_ifd1_tok_prod_m_odr"));
      d_ifd1_tok_prod_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(33),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_m_odr.set_original_access("W1C");

      d_ifd1_tok_prod_d_ifd0 = (dv_base_reg_field::
                                type_id::create("d_ifd1_tok_prod_d_ifd0"));
      d_ifd1_tok_prod_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(34),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_d_ifd0.set_original_access("W1C");

      d_ifd1_tok_prod_d_odr = (dv_base_reg_field::
                               type_id::create("d_ifd1_tok_prod_d_odr"));
      d_ifd1_tok_prod_d_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(35),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_d_odr.set_original_access("W1C");

      d_odr_tok_prod_m_ifd0 = (dv_base_reg_field::
                               type_id::create("d_odr_tok_prod_m_ifd0"));
      d_odr_tok_prod_m_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(36),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_m_ifd0.set_original_access("W1C");

      d_odr_tok_prod_m_ifd1 = (dv_base_reg_field::
                               type_id::create("d_odr_tok_prod_m_ifd1"));
      d_odr_tok_prod_m_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(37),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_m_ifd1.set_original_access("W1C");

      d_odr_tok_prod_m_ifdw = (dv_base_reg_field::
                               type_id::create("d_odr_tok_prod_m_ifdw"));
      d_odr_tok_prod_m_ifdw.configure(
        .parent(this),
        .size(1),
        .lsb_pos(38),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_m_ifdw.set_original_access("W1C");

      d_odr_tok_prod_m_odr = (dv_base_reg_field::
                              type_id::create("d_odr_tok_prod_m_odr"));
      d_odr_tok_prod_m_odr.configure(
        .parent(this),
        .size(1),
        .lsb_pos(39),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_m_odr.set_original_access("W1C");

      d_odr_tok_prod_d_ifd0 = (dv_base_reg_field::
                               type_id::create("d_odr_tok_prod_d_ifd0"));
      d_odr_tok_prod_d_ifd0.configure(
        .parent(this),
        .size(1),
        .lsb_pos(40),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_d_ifd0.set_original_access("W1C");

      d_odr_tok_prod_d_ifd1 = (dv_base_reg_field::
                               type_id::create("d_odr_tok_prod_d_ifd1"));
      d_odr_tok_prod_d_ifd1.configure(
        .parent(this),
        .size(1),
        .lsb_pos(41),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_d_ifd1.set_original_access("W1C");

      mvm_exe_tok_prod_mvm_prg = (dv_base_reg_field::
                                  type_id::create("mvm_exe_tok_prod_mvm_prg"));
      mvm_exe_tok_prod_mvm_prg.configure(
        .parent(this),
        .size(1),
        .lsb_pos(42),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      mvm_exe_tok_prod_mvm_prg.set_original_access("W1C");

      mvm_prg_tok_prod_mvm_exe = (dv_base_reg_field::
                                  type_id::create("mvm_prg_tok_prod_mvm_exe"));
      mvm_prg_tok_prod_mvm_exe.configure(
        .parent(this),
        .size(1),
        .lsb_pos(43),
        .access("W1C"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      mvm_prg_tok_prod_mvm_exe.set_original_access("W1C");

    endfunction : build
  endclass : token_mgr_csr_reg_irq_gen_sat_prod_status

  class token_mgr_csr_reg_irq_gen_sat_prod_en extends dv_base_reg;
    // fields
    rand dv_base_reg_field irq_m_ifd0_tok_prod_m_ifd1_en;
    rand dv_base_reg_field irq_m_ifd0_tok_prod_m_ifdw_en;
    rand dv_base_reg_field irq_m_ifd0_tok_prod_m_odr_en;
    rand dv_base_reg_field irq_m_ifd0_tok_prod_d_ifd0_en;
    rand dv_base_reg_field irq_m_ifd0_tok_prod_d_ifd1_en;
    rand dv_base_reg_field irq_m_ifd0_tok_prod_d_odr_en;
    rand dv_base_reg_field irq_m_ifd1_tok_prod_m_ifd0_en;
    rand dv_base_reg_field irq_m_ifd1_tok_prod_m_ifdw_en;
    rand dv_base_reg_field irq_m_ifd1_tok_prod_m_odr_en;
    rand dv_base_reg_field irq_m_ifd1_tok_prod_d_ifd0_en;
    rand dv_base_reg_field irq_m_ifd1_tok_prod_d_ifd1_en;
    rand dv_base_reg_field irq_m_ifd1_tok_prod_d_odr_en;
    rand dv_base_reg_field irq_m_ifdw_tok_prod_m_ifd0_en;
    rand dv_base_reg_field irq_m_ifdw_tok_prod_m_ifd1_en;
    rand dv_base_reg_field irq_m_ifdw_tok_prod_m_odr_en;
    rand dv_base_reg_field irq_m_ifdw_tok_prod_d_ifd0_en;
    rand dv_base_reg_field irq_m_ifdw_tok_prod_d_ifd1_en;
    rand dv_base_reg_field irq_m_ifdw_tok_prod_d_odr_en;
    rand dv_base_reg_field irq_m_odr_tok_prod_m_ifd0_en;
    rand dv_base_reg_field irq_m_odr_tok_prod_m_ifd1_en;
    rand dv_base_reg_field irq_m_odr_tok_prod_m_ifdw_en;
    rand dv_base_reg_field irq_m_odr_tok_prod_d_ifd0_en;
    rand dv_base_reg_field irq_m_odr_tok_prod_d_ifd1_en;
    rand dv_base_reg_field irq_m_odr_tok_prod_d_odr_en;
    rand dv_base_reg_field irq_d_ifd0_tok_prod_m_ifd0_en;
    rand dv_base_reg_field irq_d_ifd0_tok_prod_m_ifd1_en;
    rand dv_base_reg_field irq_d_ifd0_tok_prod_m_ifdw_en;
    rand dv_base_reg_field irq_d_ifd0_tok_prod_m_odr_en;
    rand dv_base_reg_field irq_d_ifd0_tok_prod_d_ifd1_en;
    rand dv_base_reg_field irq_d_ifd0_tok_prod_d_odr_en;
    rand dv_base_reg_field irq_d_ifd1_tok_prod_m_ifd0_en;
    rand dv_base_reg_field irq_d_ifd1_tok_prod_m_ifd1_en;
    rand dv_base_reg_field irq_d_ifd1_tok_prod_m_ifdw_en;
    rand dv_base_reg_field irq_d_ifd1_tok_prod_m_odr_en;
    rand dv_base_reg_field irq_d_ifd1_tok_prod_d_ifd0_en;
    rand dv_base_reg_field irq_d_ifd1_tok_prod_d_odr_en;
    rand dv_base_reg_field irq_d_odr_tok_prod_m_ifd0_en;
    rand dv_base_reg_field irq_d_odr_tok_prod_m_ifd1_en;
    rand dv_base_reg_field irq_d_odr_tok_prod_m_ifdw_en;
    rand dv_base_reg_field irq_d_odr_tok_prod_m_odr_en;
    rand dv_base_reg_field irq_d_odr_tok_prod_d_ifd0_en;
    rand dv_base_reg_field irq_d_odr_tok_prod_d_ifd1_en;
    rand dv_base_reg_field irq_mvm_exe_tok_prod_mvm_prg_en;
    rand dv_base_reg_field irq_mvm_prg_tok_prod_mvm_exe_en;

    `uvm_object_utils(token_mgr_csr_reg_irq_gen_sat_prod_en)

    function new(string       name = "token_mgr_csr_reg_irq_gen_sat_prod_en",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      irq_m_ifd0_tok_prod_m_ifd1_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifd0_tok_prod_m_ifd1_en"));
      irq_m_ifd0_tok_prod_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(0),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd0_tok_prod_m_ifd1_en.set_original_access("RW");

      irq_m_ifd0_tok_prod_m_ifdw_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifd0_tok_prod_m_ifdw_en"));
      irq_m_ifd0_tok_prod_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(1),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd0_tok_prod_m_ifdw_en.set_original_access("RW");

      irq_m_ifd0_tok_prod_m_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_m_ifd0_tok_prod_m_odr_en"));
      irq_m_ifd0_tok_prod_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(2),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd0_tok_prod_m_odr_en.set_original_access("RW");

      irq_m_ifd0_tok_prod_d_ifd0_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifd0_tok_prod_d_ifd0_en"));
      irq_m_ifd0_tok_prod_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(3),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd0_tok_prod_d_ifd0_en.set_original_access("RW");

      irq_m_ifd0_tok_prod_d_ifd1_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifd0_tok_prod_d_ifd1_en"));
      irq_m_ifd0_tok_prod_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(4),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd0_tok_prod_d_ifd1_en.set_original_access("RW");

      irq_m_ifd0_tok_prod_d_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_m_ifd0_tok_prod_d_odr_en"));
      irq_m_ifd0_tok_prod_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(5),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd0_tok_prod_d_odr_en.set_original_access("RW");

      irq_m_ifd1_tok_prod_m_ifd0_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifd1_tok_prod_m_ifd0_en"));
      irq_m_ifd1_tok_prod_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(6),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd1_tok_prod_m_ifd0_en.set_original_access("RW");

      irq_m_ifd1_tok_prod_m_ifdw_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifd1_tok_prod_m_ifdw_en"));
      irq_m_ifd1_tok_prod_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(7),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd1_tok_prod_m_ifdw_en.set_original_access("RW");

      irq_m_ifd1_tok_prod_m_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_m_ifd1_tok_prod_m_odr_en"));
      irq_m_ifd1_tok_prod_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(8),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd1_tok_prod_m_odr_en.set_original_access("RW");

      irq_m_ifd1_tok_prod_d_ifd0_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifd1_tok_prod_d_ifd0_en"));
      irq_m_ifd1_tok_prod_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(9),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd1_tok_prod_d_ifd0_en.set_original_access("RW");

      irq_m_ifd1_tok_prod_d_ifd1_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifd1_tok_prod_d_ifd1_en"));
      irq_m_ifd1_tok_prod_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(10),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd1_tok_prod_d_ifd1_en.set_original_access("RW");

      irq_m_ifd1_tok_prod_d_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_m_ifd1_tok_prod_d_odr_en"));
      irq_m_ifd1_tok_prod_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(11),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifd1_tok_prod_d_odr_en.set_original_access("RW");

      irq_m_ifdw_tok_prod_m_ifd0_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifdw_tok_prod_m_ifd0_en"));
      irq_m_ifdw_tok_prod_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(12),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifdw_tok_prod_m_ifd0_en.set_original_access("RW");

      irq_m_ifdw_tok_prod_m_ifd1_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifdw_tok_prod_m_ifd1_en"));
      irq_m_ifdw_tok_prod_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(13),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifdw_tok_prod_m_ifd1_en.set_original_access("RW");

      irq_m_ifdw_tok_prod_m_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_m_ifdw_tok_prod_m_odr_en"));
      irq_m_ifdw_tok_prod_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(14),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifdw_tok_prod_m_odr_en.set_original_access("RW");

      irq_m_ifdw_tok_prod_d_ifd0_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifdw_tok_prod_d_ifd0_en"));
      irq_m_ifdw_tok_prod_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(15),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifdw_tok_prod_d_ifd0_en.set_original_access("RW");

      irq_m_ifdw_tok_prod_d_ifd1_en = (dv_base_reg_field::
                                       type_id::create("irq_m_ifdw_tok_prod_d_ifd1_en"));
      irq_m_ifdw_tok_prod_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(16),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifdw_tok_prod_d_ifd1_en.set_original_access("RW");

      irq_m_ifdw_tok_prod_d_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_m_ifdw_tok_prod_d_odr_en"));
      irq_m_ifdw_tok_prod_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(17),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_ifdw_tok_prod_d_odr_en.set_original_access("RW");

      irq_m_odr_tok_prod_m_ifd0_en = (dv_base_reg_field::
                                      type_id::create("irq_m_odr_tok_prod_m_ifd0_en"));
      irq_m_odr_tok_prod_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(18),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_odr_tok_prod_m_ifd0_en.set_original_access("RW");

      irq_m_odr_tok_prod_m_ifd1_en = (dv_base_reg_field::
                                      type_id::create("irq_m_odr_tok_prod_m_ifd1_en"));
      irq_m_odr_tok_prod_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(19),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_odr_tok_prod_m_ifd1_en.set_original_access("RW");

      irq_m_odr_tok_prod_m_ifdw_en = (dv_base_reg_field::
                                      type_id::create("irq_m_odr_tok_prod_m_ifdw_en"));
      irq_m_odr_tok_prod_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(20),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_odr_tok_prod_m_ifdw_en.set_original_access("RW");

      irq_m_odr_tok_prod_d_ifd0_en = (dv_base_reg_field::
                                      type_id::create("irq_m_odr_tok_prod_d_ifd0_en"));
      irq_m_odr_tok_prod_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(21),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_odr_tok_prod_d_ifd0_en.set_original_access("RW");

      irq_m_odr_tok_prod_d_ifd1_en = (dv_base_reg_field::
                                      type_id::create("irq_m_odr_tok_prod_d_ifd1_en"));
      irq_m_odr_tok_prod_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(22),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_odr_tok_prod_d_ifd1_en.set_original_access("RW");

      irq_m_odr_tok_prod_d_odr_en = (dv_base_reg_field::
                                     type_id::create("irq_m_odr_tok_prod_d_odr_en"));
      irq_m_odr_tok_prod_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(23),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_m_odr_tok_prod_d_odr_en.set_original_access("RW");

      irq_d_ifd0_tok_prod_m_ifd0_en = (dv_base_reg_field::
                                       type_id::create("irq_d_ifd0_tok_prod_m_ifd0_en"));
      irq_d_ifd0_tok_prod_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(24),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd0_tok_prod_m_ifd0_en.set_original_access("RW");

      irq_d_ifd0_tok_prod_m_ifd1_en = (dv_base_reg_field::
                                       type_id::create("irq_d_ifd0_tok_prod_m_ifd1_en"));
      irq_d_ifd0_tok_prod_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(25),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd0_tok_prod_m_ifd1_en.set_original_access("RW");

      irq_d_ifd0_tok_prod_m_ifdw_en = (dv_base_reg_field::
                                       type_id::create("irq_d_ifd0_tok_prod_m_ifdw_en"));
      irq_d_ifd0_tok_prod_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(26),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd0_tok_prod_m_ifdw_en.set_original_access("RW");

      irq_d_ifd0_tok_prod_m_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_d_ifd0_tok_prod_m_odr_en"));
      irq_d_ifd0_tok_prod_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(27),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd0_tok_prod_m_odr_en.set_original_access("RW");

      irq_d_ifd0_tok_prod_d_ifd1_en = (dv_base_reg_field::
                                       type_id::create("irq_d_ifd0_tok_prod_d_ifd1_en"));
      irq_d_ifd0_tok_prod_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(28),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd0_tok_prod_d_ifd1_en.set_original_access("RW");

      irq_d_ifd0_tok_prod_d_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_d_ifd0_tok_prod_d_odr_en"));
      irq_d_ifd0_tok_prod_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(29),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd0_tok_prod_d_odr_en.set_original_access("RW");

      irq_d_ifd1_tok_prod_m_ifd0_en = (dv_base_reg_field::
                                       type_id::create("irq_d_ifd1_tok_prod_m_ifd0_en"));
      irq_d_ifd1_tok_prod_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(30),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd1_tok_prod_m_ifd0_en.set_original_access("RW");

      irq_d_ifd1_tok_prod_m_ifd1_en = (dv_base_reg_field::
                                       type_id::create("irq_d_ifd1_tok_prod_m_ifd1_en"));
      irq_d_ifd1_tok_prod_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(31),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd1_tok_prod_m_ifd1_en.set_original_access("RW");

      irq_d_ifd1_tok_prod_m_ifdw_en = (dv_base_reg_field::
                                       type_id::create("irq_d_ifd1_tok_prod_m_ifdw_en"));
      irq_d_ifd1_tok_prod_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(32),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd1_tok_prod_m_ifdw_en.set_original_access("RW");

      irq_d_ifd1_tok_prod_m_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_d_ifd1_tok_prod_m_odr_en"));
      irq_d_ifd1_tok_prod_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(33),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd1_tok_prod_m_odr_en.set_original_access("RW");

      irq_d_ifd1_tok_prod_d_ifd0_en = (dv_base_reg_field::
                                       type_id::create("irq_d_ifd1_tok_prod_d_ifd0_en"));
      irq_d_ifd1_tok_prod_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(34),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd1_tok_prod_d_ifd0_en.set_original_access("RW");

      irq_d_ifd1_tok_prod_d_odr_en = (dv_base_reg_field::
                                      type_id::create("irq_d_ifd1_tok_prod_d_odr_en"));
      irq_d_ifd1_tok_prod_d_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(35),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_ifd1_tok_prod_d_odr_en.set_original_access("RW");

      irq_d_odr_tok_prod_m_ifd0_en = (dv_base_reg_field::
                                      type_id::create("irq_d_odr_tok_prod_m_ifd0_en"));
      irq_d_odr_tok_prod_m_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(36),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_odr_tok_prod_m_ifd0_en.set_original_access("RW");

      irq_d_odr_tok_prod_m_ifd1_en = (dv_base_reg_field::
                                      type_id::create("irq_d_odr_tok_prod_m_ifd1_en"));
      irq_d_odr_tok_prod_m_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(37),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_odr_tok_prod_m_ifd1_en.set_original_access("RW");

      irq_d_odr_tok_prod_m_ifdw_en = (dv_base_reg_field::
                                      type_id::create("irq_d_odr_tok_prod_m_ifdw_en"));
      irq_d_odr_tok_prod_m_ifdw_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(38),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_odr_tok_prod_m_ifdw_en.set_original_access("RW");

      irq_d_odr_tok_prod_m_odr_en = (dv_base_reg_field::
                                     type_id::create("irq_d_odr_tok_prod_m_odr_en"));
      irq_d_odr_tok_prod_m_odr_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(39),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_odr_tok_prod_m_odr_en.set_original_access("RW");

      irq_d_odr_tok_prod_d_ifd0_en = (dv_base_reg_field::
                                      type_id::create("irq_d_odr_tok_prod_d_ifd0_en"));
      irq_d_odr_tok_prod_d_ifd0_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(40),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_odr_tok_prod_d_ifd0_en.set_original_access("RW");

      irq_d_odr_tok_prod_d_ifd1_en = (dv_base_reg_field::
                                      type_id::create("irq_d_odr_tok_prod_d_ifd1_en"));
      irq_d_odr_tok_prod_d_ifd1_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(41),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_d_odr_tok_prod_d_ifd1_en.set_original_access("RW");

      irq_mvm_exe_tok_prod_mvm_prg_en = (dv_base_reg_field::
                                         type_id::create("irq_mvm_exe_tok_prod_mvm_prg_en"));
      irq_mvm_exe_tok_prod_mvm_prg_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(42),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_mvm_exe_tok_prod_mvm_prg_en.set_original_access("RW");

      irq_mvm_prg_tok_prod_mvm_exe_en = (dv_base_reg_field::
                                         type_id::create("irq_mvm_prg_tok_prod_mvm_exe_en"));
      irq_mvm_prg_tok_prod_mvm_exe_en.configure(
        .parent(this),
        .size(1),
        .lsb_pos(43),
        .access("RW"),
        .volatile(0),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      irq_mvm_prg_tok_prod_mvm_exe_en.set_original_access("RW");

    endfunction : build
  endclass : token_mgr_csr_reg_irq_gen_sat_prod_en

  class token_mgr_csr_reg_prod_cnt_m_ifd0 extends dv_base_reg;
    // fields
    rand dv_base_reg_field m_ifd0_tok_prod_m_ifd1_cnt;
    rand dv_base_reg_field m_ifd0_tok_prod_m_ifdw_cnt;
    rand dv_base_reg_field m_ifd0_tok_prod_m_odr_cnt;
    rand dv_base_reg_field m_ifd0_tok_prod_d_ifd0_cnt;
    rand dv_base_reg_field m_ifd0_tok_prod_d_ifd1_cnt;
    rand dv_base_reg_field m_ifd0_tok_prod_d_odr_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_m_ifd0)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_m_ifd0",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      m_ifd0_tok_prod_m_ifd1_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifd0_tok_prod_m_ifd1_cnt"));
      m_ifd0_tok_prod_m_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_m_ifd1_cnt.set_original_access("RO");

      m_ifd0_tok_prod_m_ifdw_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifd0_tok_prod_m_ifdw_cnt"));
      m_ifd0_tok_prod_m_ifdw_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_m_ifdw_cnt.set_original_access("RO");

      m_ifd0_tok_prod_m_odr_cnt = (dv_base_reg_field::
                                   type_id::create("m_ifd0_tok_prod_m_odr_cnt"));
      m_ifd0_tok_prod_m_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_m_odr_cnt.set_original_access("RO");

      m_ifd0_tok_prod_d_ifd0_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifd0_tok_prod_d_ifd0_cnt"));
      m_ifd0_tok_prod_d_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_d_ifd0_cnt.set_original_access("RO");

      m_ifd0_tok_prod_d_ifd1_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifd0_tok_prod_d_ifd1_cnt"));
      m_ifd0_tok_prod_d_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_d_ifd1_cnt.set_original_access("RO");

      m_ifd0_tok_prod_d_odr_cnt = (dv_base_reg_field::
                                   type_id::create("m_ifd0_tok_prod_d_odr_cnt"));
      m_ifd0_tok_prod_d_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd0_tok_prod_d_odr_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_m_ifd0

  class token_mgr_csr_reg_prod_cnt_m_ifd1 extends dv_base_reg;
    // fields
    rand dv_base_reg_field m_ifd1_tok_prod_m_ifd0_cnt;
    rand dv_base_reg_field m_ifd1_tok_prod_m_ifdw_cnt;
    rand dv_base_reg_field m_ifd1_tok_prod_m_odr_cnt;
    rand dv_base_reg_field m_ifd1_tok_prod_d_ifd0_cnt;
    rand dv_base_reg_field m_ifd1_tok_prod_d_ifd1_cnt;
    rand dv_base_reg_field m_ifd1_tok_prod_d_odr_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_m_ifd1)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_m_ifd1",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      m_ifd1_tok_prod_m_ifd0_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifd1_tok_prod_m_ifd0_cnt"));
      m_ifd1_tok_prod_m_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_m_ifd0_cnt.set_original_access("RO");

      m_ifd1_tok_prod_m_ifdw_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifd1_tok_prod_m_ifdw_cnt"));
      m_ifd1_tok_prod_m_ifdw_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_m_ifdw_cnt.set_original_access("RO");

      m_ifd1_tok_prod_m_odr_cnt = (dv_base_reg_field::
                                   type_id::create("m_ifd1_tok_prod_m_odr_cnt"));
      m_ifd1_tok_prod_m_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_m_odr_cnt.set_original_access("RO");

      m_ifd1_tok_prod_d_ifd0_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifd1_tok_prod_d_ifd0_cnt"));
      m_ifd1_tok_prod_d_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_d_ifd0_cnt.set_original_access("RO");

      m_ifd1_tok_prod_d_ifd1_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifd1_tok_prod_d_ifd1_cnt"));
      m_ifd1_tok_prod_d_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_d_ifd1_cnt.set_original_access("RO");

      m_ifd1_tok_prod_d_odr_cnt = (dv_base_reg_field::
                                   type_id::create("m_ifd1_tok_prod_d_odr_cnt"));
      m_ifd1_tok_prod_d_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifd1_tok_prod_d_odr_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_m_ifd1

  class token_mgr_csr_reg_prod_cnt_m_ifdw extends dv_base_reg;
    // fields
    rand dv_base_reg_field m_ifdw_tok_prod_m_ifd0_cnt;
    rand dv_base_reg_field m_ifdw_tok_prod_m_ifd1_cnt;
    rand dv_base_reg_field m_ifdw_tok_prod_m_odr_cnt;
    rand dv_base_reg_field m_ifdw_tok_prod_d_ifd0_cnt;
    rand dv_base_reg_field m_ifdw_tok_prod_d_ifd1_cnt;
    rand dv_base_reg_field m_ifdw_tok_prod_d_odr_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_m_ifdw)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_m_ifdw",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      m_ifdw_tok_prod_m_ifd0_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifdw_tok_prod_m_ifd0_cnt"));
      m_ifdw_tok_prod_m_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_m_ifd0_cnt.set_original_access("RO");

      m_ifdw_tok_prod_m_ifd1_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifdw_tok_prod_m_ifd1_cnt"));
      m_ifdw_tok_prod_m_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_m_ifd1_cnt.set_original_access("RO");

      m_ifdw_tok_prod_m_odr_cnt = (dv_base_reg_field::
                                   type_id::create("m_ifdw_tok_prod_m_odr_cnt"));
      m_ifdw_tok_prod_m_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_m_odr_cnt.set_original_access("RO");

      m_ifdw_tok_prod_d_ifd0_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifdw_tok_prod_d_ifd0_cnt"));
      m_ifdw_tok_prod_d_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_d_ifd0_cnt.set_original_access("RO");

      m_ifdw_tok_prod_d_ifd1_cnt = (dv_base_reg_field::
                                    type_id::create("m_ifdw_tok_prod_d_ifd1_cnt"));
      m_ifdw_tok_prod_d_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_d_ifd1_cnt.set_original_access("RO");

      m_ifdw_tok_prod_d_odr_cnt = (dv_base_reg_field::
                                   type_id::create("m_ifdw_tok_prod_d_odr_cnt"));
      m_ifdw_tok_prod_d_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_ifdw_tok_prod_d_odr_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_m_ifdw

  class token_mgr_csr_reg_prod_cnt_m_odr extends dv_base_reg;
    // fields
    rand dv_base_reg_field m_odr_tok_prod_m_ifd0_cnt;
    rand dv_base_reg_field m_odr_tok_prod_m_ifd1_cnt;
    rand dv_base_reg_field m_odr_tok_prod_m_ifdw_cnt;
    rand dv_base_reg_field m_odr_tok_prod_d_ifd0_cnt;
    rand dv_base_reg_field m_odr_tok_prod_d_ifd1_cnt;
    rand dv_base_reg_field m_odr_tok_prod_d_odr_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_m_odr)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_m_odr",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      m_odr_tok_prod_m_ifd0_cnt = (dv_base_reg_field::
                                   type_id::create("m_odr_tok_prod_m_ifd0_cnt"));
      m_odr_tok_prod_m_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_m_ifd0_cnt.set_original_access("RO");

      m_odr_tok_prod_m_ifd1_cnt = (dv_base_reg_field::
                                   type_id::create("m_odr_tok_prod_m_ifd1_cnt"));
      m_odr_tok_prod_m_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_m_ifd1_cnt.set_original_access("RO");

      m_odr_tok_prod_m_ifdw_cnt = (dv_base_reg_field::
                                   type_id::create("m_odr_tok_prod_m_ifdw_cnt"));
      m_odr_tok_prod_m_ifdw_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_m_ifdw_cnt.set_original_access("RO");

      m_odr_tok_prod_d_ifd0_cnt = (dv_base_reg_field::
                                   type_id::create("m_odr_tok_prod_d_ifd0_cnt"));
      m_odr_tok_prod_d_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_d_ifd0_cnt.set_original_access("RO");

      m_odr_tok_prod_d_ifd1_cnt = (dv_base_reg_field::
                                   type_id::create("m_odr_tok_prod_d_ifd1_cnt"));
      m_odr_tok_prod_d_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_d_ifd1_cnt.set_original_access("RO");

      m_odr_tok_prod_d_odr_cnt = (dv_base_reg_field::
                                  type_id::create("m_odr_tok_prod_d_odr_cnt"));
      m_odr_tok_prod_d_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      m_odr_tok_prod_d_odr_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_m_odr

  class token_mgr_csr_reg_prod_cnt_d_ifd0 extends dv_base_reg;
    // fields
    rand dv_base_reg_field d_ifd0_tok_prod_m_ifd0_cnt;
    rand dv_base_reg_field d_ifd0_tok_prod_m_ifd1_cnt;
    rand dv_base_reg_field d_ifd0_tok_prod_m_ifdw_cnt;
    rand dv_base_reg_field d_ifd0_tok_prod_m_odr_cnt;
    rand dv_base_reg_field d_ifd0_tok_prod_d_ifd1_cnt;
    rand dv_base_reg_field d_ifd0_tok_prod_d_odr_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_d_ifd0)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_d_ifd0",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      d_ifd0_tok_prod_m_ifd0_cnt = (dv_base_reg_field::
                                    type_id::create("d_ifd0_tok_prod_m_ifd0_cnt"));
      d_ifd0_tok_prod_m_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_m_ifd0_cnt.set_original_access("RO");

      d_ifd0_tok_prod_m_ifd1_cnt = (dv_base_reg_field::
                                    type_id::create("d_ifd0_tok_prod_m_ifd1_cnt"));
      d_ifd0_tok_prod_m_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_m_ifd1_cnt.set_original_access("RO");

      d_ifd0_tok_prod_m_ifdw_cnt = (dv_base_reg_field::
                                    type_id::create("d_ifd0_tok_prod_m_ifdw_cnt"));
      d_ifd0_tok_prod_m_ifdw_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_m_ifdw_cnt.set_original_access("RO");

      d_ifd0_tok_prod_m_odr_cnt = (dv_base_reg_field::
                                   type_id::create("d_ifd0_tok_prod_m_odr_cnt"));
      d_ifd0_tok_prod_m_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_m_odr_cnt.set_original_access("RO");

      d_ifd0_tok_prod_d_ifd1_cnt = (dv_base_reg_field::
                                    type_id::create("d_ifd0_tok_prod_d_ifd1_cnt"));
      d_ifd0_tok_prod_d_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_d_ifd1_cnt.set_original_access("RO");

      d_ifd0_tok_prod_d_odr_cnt = (dv_base_reg_field::
                                   type_id::create("d_ifd0_tok_prod_d_odr_cnt"));
      d_ifd0_tok_prod_d_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd0_tok_prod_d_odr_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_d_ifd0

  class token_mgr_csr_reg_prod_cnt_d_ifd1 extends dv_base_reg;
    // fields
    rand dv_base_reg_field d_ifd1_tok_prod_m_ifd0_cnt;
    rand dv_base_reg_field d_ifd1_tok_prod_m_ifd1_cnt;
    rand dv_base_reg_field d_ifd1_tok_prod_m_ifdw_cnt;
    rand dv_base_reg_field d_ifd1_tok_prod_m_odr_cnt;
    rand dv_base_reg_field d_ifd1_tok_prod_d_ifd0_cnt;
    rand dv_base_reg_field d_ifd1_tok_prod_d_odr_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_d_ifd1)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_d_ifd1",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      d_ifd1_tok_prod_m_ifd0_cnt = (dv_base_reg_field::
                                    type_id::create("d_ifd1_tok_prod_m_ifd0_cnt"));
      d_ifd1_tok_prod_m_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_m_ifd0_cnt.set_original_access("RO");

      d_ifd1_tok_prod_m_ifd1_cnt = (dv_base_reg_field::
                                    type_id::create("d_ifd1_tok_prod_m_ifd1_cnt"));
      d_ifd1_tok_prod_m_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_m_ifd1_cnt.set_original_access("RO");

      d_ifd1_tok_prod_m_ifdw_cnt = (dv_base_reg_field::
                                    type_id::create("d_ifd1_tok_prod_m_ifdw_cnt"));
      d_ifd1_tok_prod_m_ifdw_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_m_ifdw_cnt.set_original_access("RO");

      d_ifd1_tok_prod_m_odr_cnt = (dv_base_reg_field::
                                   type_id::create("d_ifd1_tok_prod_m_odr_cnt"));
      d_ifd1_tok_prod_m_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_m_odr_cnt.set_original_access("RO");

      d_ifd1_tok_prod_d_ifd0_cnt = (dv_base_reg_field::
                                    type_id::create("d_ifd1_tok_prod_d_ifd0_cnt"));
      d_ifd1_tok_prod_d_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_d_ifd0_cnt.set_original_access("RO");

      d_ifd1_tok_prod_d_odr_cnt = (dv_base_reg_field::
                                   type_id::create("d_ifd1_tok_prod_d_odr_cnt"));
      d_ifd1_tok_prod_d_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_ifd1_tok_prod_d_odr_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_d_ifd1

  class token_mgr_csr_reg_prod_cnt_d_odr extends dv_base_reg;
    // fields
    rand dv_base_reg_field d_odr_tok_prod_m_ifd0_cnt;
    rand dv_base_reg_field d_odr_tok_prod_m_ifd1_cnt;
    rand dv_base_reg_field d_odr_tok_prod_m_ifdw_cnt;
    rand dv_base_reg_field d_odr_tok_prod_m_odr_cnt;
    rand dv_base_reg_field d_odr_tok_prod_d_ifd0_cnt;
    rand dv_base_reg_field d_odr_tok_prod_d_ifd1_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_d_odr)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_d_odr",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      d_odr_tok_prod_m_ifd0_cnt = (dv_base_reg_field::
                                   type_id::create("d_odr_tok_prod_m_ifd0_cnt"));
      d_odr_tok_prod_m_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_m_ifd0_cnt.set_original_access("RO");

      d_odr_tok_prod_m_ifd1_cnt = (dv_base_reg_field::
                                   type_id::create("d_odr_tok_prod_m_ifd1_cnt"));
      d_odr_tok_prod_m_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(8),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_m_ifd1_cnt.set_original_access("RO");

      d_odr_tok_prod_m_ifdw_cnt = (dv_base_reg_field::
                                   type_id::create("d_odr_tok_prod_m_ifdw_cnt"));
      d_odr_tok_prod_m_ifdw_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(16),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_m_ifdw_cnt.set_original_access("RO");

      d_odr_tok_prod_m_odr_cnt = (dv_base_reg_field::
                                  type_id::create("d_odr_tok_prod_m_odr_cnt"));
      d_odr_tok_prod_m_odr_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(24),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_m_odr_cnt.set_original_access("RO");

      d_odr_tok_prod_d_ifd0_cnt = (dv_base_reg_field::
                                   type_id::create("d_odr_tok_prod_d_ifd0_cnt"));
      d_odr_tok_prod_d_ifd0_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(32),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_d_ifd0_cnt.set_original_access("RO");

      d_odr_tok_prod_d_ifd1_cnt = (dv_base_reg_field::
                                   type_id::create("d_odr_tok_prod_d_ifd1_cnt"));
      d_odr_tok_prod_d_ifd1_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(40),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      d_odr_tok_prod_d_ifd1_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_d_odr

  class token_mgr_csr_reg_prod_cnt_mvm_exe extends dv_base_reg;
    // fields
    rand dv_base_reg_field mvm_exe_tok_prod_mvm_prg_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_mvm_exe)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_mvm_exe",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      mvm_exe_tok_prod_mvm_prg_cnt = (dv_base_reg_field::
                                      type_id::create("mvm_exe_tok_prod_mvm_prg_cnt"));
      mvm_exe_tok_prod_mvm_prg_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      mvm_exe_tok_prod_mvm_prg_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_mvm_exe

  class token_mgr_csr_reg_prod_cnt_mvm_prg extends dv_base_reg;
    // fields
    rand dv_base_reg_field mvm_prg_tok_prod_mvm_exe_cnt;

    `uvm_object_utils(token_mgr_csr_reg_prod_cnt_mvm_prg)

    function new(string       name = "token_mgr_csr_reg_prod_cnt_mvm_prg",
                 int unsigned n_bits = 64,
                 int          has_coverage = UVM_NO_COVERAGE);
      super.new(name, n_bits, has_coverage);
    endfunction : new

    virtual function void build(csr_excl_item csr_excl = null);
      // create fields
      mvm_prg_tok_prod_mvm_exe_cnt = (dv_base_reg_field::
                                      type_id::create("mvm_prg_tok_prod_mvm_exe_cnt"));
      mvm_prg_tok_prod_mvm_exe_cnt.configure(
        .parent(this),
        .size(8),
        .lsb_pos(0),
        .access("RO"),
        .volatile(1),
        .reset(64'h0),
        .has_reset(1),
        .is_rand(1),
        .individually_accessible(1));

      mvm_prg_tok_prod_mvm_exe_cnt.set_original_access("RO");

      set_is_ext_reg(1);
    endfunction : build
  endclass : token_mgr_csr_reg_prod_cnt_mvm_prg

  class token_mgr_csr_reg_block extends dv_base_reg_block;
    // registers
    rand token_mgr_csr_reg_swep_prod_0 swep_prod_0;
    rand token_mgr_csr_reg_swep_prod_1 swep_prod_1;
    rand token_mgr_csr_reg_swep_cons_0 swep_cons_0;
    rand token_mgr_csr_reg_swep_cons_1 swep_cons_1;
    rand token_mgr_csr_reg_irq_swep_sat_status irq_swep_sat_status;
    rand token_mgr_csr_reg_irq_swep_sat_en irq_swep_sat_en;
    rand token_mgr_csr_reg_irq_swep_non_zero_status irq_swep_non_zero_status;
    rand token_mgr_csr_reg_irq_swep_non_zero_en irq_swep_non_zero_en;
    rand token_mgr_csr_reg_irq_gen_sat_prod_status irq_gen_sat_prod_status;
    rand token_mgr_csr_reg_irq_gen_sat_prod_en irq_gen_sat_prod_en;
    rand token_mgr_csr_reg_prod_cnt_m_ifd0 prod_cnt_m_ifd0;
    rand token_mgr_csr_reg_prod_cnt_m_ifd1 prod_cnt_m_ifd1;
    rand token_mgr_csr_reg_prod_cnt_m_ifdw prod_cnt_m_ifdw;
    rand token_mgr_csr_reg_prod_cnt_m_odr prod_cnt_m_odr;
    rand token_mgr_csr_reg_prod_cnt_d_ifd0 prod_cnt_d_ifd0;
    rand token_mgr_csr_reg_prod_cnt_d_ifd1 prod_cnt_d_ifd1;
    rand token_mgr_csr_reg_prod_cnt_d_odr prod_cnt_d_odr;
    rand token_mgr_csr_reg_prod_cnt_mvm_exe prod_cnt_mvm_exe;
    rand token_mgr_csr_reg_prod_cnt_mvm_prg prod_cnt_mvm_prg;

    `uvm_object_utils(token_mgr_csr_reg_block)

    function new(string name = "token_mgr_csr_reg_block",
                 int    has_coverage = UVM_NO_COVERAGE);
      super.new(name, has_coverage);
    endfunction : new

    virtual function void build(uvm_reg_addr_t base_addr,
                                csr_excl_item csr_excl = null);
      // create default map
      this.default_map = create_map(.name("default_map"),
                                    .base_addr(base_addr),
                                    .n_bytes(8),
                                    .endian(UVM_LITTLE_ENDIAN));
      if (csr_excl == null) begin
        csr_excl = csr_excl_item::type_id::create("csr_excl");
        this.csr_excl = csr_excl;
      end
      set_hdl_path_root("tb.dut", "BkdrRegPathRtl");
      set_hdl_path_root("tb.dut", "BkdrRegPathRtlShadow");
      // create registers
      swep_prod_0 = (token_mgr_csr_reg_swep_prod_0::
                     type_id::create("swep_prod_0"));
      swep_prod_0.configure(.blk_parent(this));
      swep_prod_0.build(csr_excl);
      default_map.add_reg(.rg(swep_prod_0),
                          .offset(64'h0),
                          .rights("RW"));
      swep_prod_0.add_hdl_path_slice("u_swep_prod_0_m_ifd0.qs", 0, 8, 0);
      swep_prod_0.add_hdl_path_slice("u_swep_prod_0_m_ifd1.qs", 8, 8, 0);
      swep_prod_0.add_hdl_path_slice("u_swep_prod_0_m_ifdw.qs", 16, 8, 0);
      swep_prod_0.add_hdl_path_slice("u_swep_prod_0_m_odr.qs", 24, 8, 0);
      swep_prod_0.add_hdl_path_slice("u_swep_prod_0_d_ifd0.qs", 32, 8, 0);
      swep_prod_0.add_hdl_path_slice("u_swep_prod_0_d_ifd1.qs", 40, 8, 0);
      swep_prod_0.add_hdl_path_slice("u_swep_prod_0_d_odr.qs", 48, 8, 0);

      swep_prod_1 = (token_mgr_csr_reg_swep_prod_1::
                     type_id::create("swep_prod_1"));
      swep_prod_1.configure(.blk_parent(this));
      swep_prod_1.build(csr_excl);
      default_map.add_reg(.rg(swep_prod_1),
                          .offset(64'h8),
                          .rights("RW"));
      swep_prod_1.add_hdl_path_slice("u_swep_prod_1_mvm_exe.qs", 0, 8, 0);
      swep_prod_1.add_hdl_path_slice("u_swep_prod_1_mvm_prg.qs", 8, 8, 0);
      swep_prod_1.add_hdl_path_slice("u_swep_prod_1_dwpu.qs", 16, 8, 0);
      swep_prod_1.add_hdl_path_slice("u_swep_prod_1_d_dpu.qs", 24, 8, 0);
      swep_prod_1.add_hdl_path_slice("u_swep_prod_1_d_iau.qs", 32, 8, 0);
      swep_prod_1.add_hdl_path_slice("u_swep_prod_1_m_dpu.qs", 40, 8, 0);
      swep_prod_1.add_hdl_path_slice("u_swep_prod_1_m_iau.qs", 48, 8, 0);

      swep_cons_0 = (token_mgr_csr_reg_swep_cons_0::
                     type_id::create("swep_cons_0"));
      swep_cons_0.configure(.blk_parent(this));
      swep_cons_0.build(csr_excl);
      default_map.add_reg(.rg(swep_cons_0),
                          .offset(64'h10),
                          .rights("RO"));
      swep_cons_0.add_hdl_path_slice("u_swep_cons_0_m_ifd0.qs", 0, 8, 0);
      swep_cons_0.add_hdl_path_slice("u_swep_cons_0_m_ifd1.qs", 8, 8, 0);
      swep_cons_0.add_hdl_path_slice("u_swep_cons_0_m_ifdw.qs", 16, 8, 0);
      swep_cons_0.add_hdl_path_slice("u_swep_cons_0_m_odr.qs", 24, 8, 0);
      swep_cons_0.add_hdl_path_slice("u_swep_cons_0_d_ifd0.qs", 32, 8, 0);
      swep_cons_0.add_hdl_path_slice("u_swep_cons_0_d_ifd1.qs", 40, 8, 0);
      swep_cons_0.add_hdl_path_slice("u_swep_cons_0_d_odr.qs", 48, 8, 0);

      swep_cons_1 = (token_mgr_csr_reg_swep_cons_1::
                     type_id::create("swep_cons_1"));
      swep_cons_1.configure(.blk_parent(this));
      swep_cons_1.build(csr_excl);
      default_map.add_reg(.rg(swep_cons_1),
                          .offset(64'h18),
                          .rights("RO"));
      swep_cons_1.add_hdl_path_slice("u_swep_cons_1_mvm_exe.qs", 0, 8, 0);
      swep_cons_1.add_hdl_path_slice("u_swep_cons_1_mvm_prg.qs", 8, 8, 0);
      swep_cons_1.add_hdl_path_slice("u_swep_cons_1_dwpu.qs", 16, 8, 0);
      swep_cons_1.add_hdl_path_slice("u_swep_cons_1_d_dpu.qs", 24, 8, 0);
      swep_cons_1.add_hdl_path_slice("u_swep_cons_1_d_iau.qs", 32, 8, 0);
      swep_cons_1.add_hdl_path_slice("u_swep_cons_1_m_dpu.qs", 40, 8, 0);
      swep_cons_1.add_hdl_path_slice("u_swep_cons_1_m_iau.qs", 48, 8, 0);

      irq_swep_sat_status = (token_mgr_csr_reg_irq_swep_sat_status::
                             type_id::create("irq_swep_sat_status"));
      irq_swep_sat_status.configure(.blk_parent(this));
      irq_swep_sat_status.build(csr_excl);
      default_map.add_reg(.rg(irq_swep_sat_status),
                          .offset(64'h20),
                          .rights("RW"));
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_m_ifd0.q", 0, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_m_ifd1.q", 1, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_m_ifdw.q", 2, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_m_odr.q", 3, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_d_ifd0.q", 4, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_d_ifd1.q", 5, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_d_odr.q", 6, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_mvm_exe.q", 7, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_mvm_prg.q", 8, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_dwpu.q", 9, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_d_dpu.q", 10, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_d_iau.q", 11, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_m_dpu.q", 12, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_cons_m_iau.q", 13, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_m_ifd0.q", 16, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_m_ifd1.q", 17, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_m_ifdw.q", 18, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_m_odr.q", 19, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_d_ifd0.q", 20, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_d_ifd1.q", 21, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_d_odr.q", 22, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_mvm_exe.q", 23, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_mvm_prg.q", 24, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_dwpu.q", 25, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_d_dpu.q", 26, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_d_iau.q", 27, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_m_dpu.q", 28, 1, 0);
      irq_swep_sat_status.add_hdl_path_slice("u_irq_swep_sat_status_swep_prod_m_iau.q", 29, 1, 0);

      irq_swep_sat_en = (token_mgr_csr_reg_irq_swep_sat_en::
                         type_id::create("irq_swep_sat_en"));
      irq_swep_sat_en.configure(.blk_parent(this));
      irq_swep_sat_en.build(csr_excl);
      default_map.add_reg(.rg(irq_swep_sat_en),
                          .offset(64'h28),
                          .rights("RW"));
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_m_ifd0_en.q", 0, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_m_ifd1_en.q", 1, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_m_ifdw_en.q", 2, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_m_odr_en.q", 3, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_d_ifd0_en.q", 4, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_d_ifd1_en.q", 5, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_d_odr_en.q", 6, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_mvm_exe_en.q", 7, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_mvm_prg_en.q", 8, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_dwpu_en.q", 9, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_d_dpu_en.q", 10, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_d_iau_en.q", 11, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_m_dpu_en.q", 12, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_cons_m_iau_en.q", 13, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_m_ifd0_en.q", 16, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_m_ifd1_en.q", 17, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_m_ifdw_en.q", 18, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_m_odr_en.q", 19, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_d_ifd0_en.q", 20, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_d_ifd1_en.q", 21, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_d_odr_en.q", 22, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_mvm_exe_en.q", 23, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_mvm_prg_en.q", 24, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_dwpu_en.q", 25, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_d_dpu_en.q", 26, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_d_iau_en.q", 27, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_m_dpu_en.q", 28, 1, 0);
      irq_swep_sat_en.add_hdl_path_slice("u_irq_swep_sat_en_irq_swep_prod_m_iau_en.q", 29, 1, 0);

      irq_swep_non_zero_status = (token_mgr_csr_reg_irq_swep_non_zero_status::
                                  type_id::create("irq_swep_non_zero_status"));
      irq_swep_non_zero_status.configure(.blk_parent(this));
      irq_swep_non_zero_status.build(csr_excl);
      default_map.add_reg(.rg(irq_swep_non_zero_status),
                          .offset(64'h30),
                          .rights("RW"));
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_m_ifd0.q", 0, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_m_ifd1.q", 1, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_m_ifdw.q", 2, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_m_odr.q", 3, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_d_ifd0.q", 4, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_d_ifd1.q", 5, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_d_odr.q", 6, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_mvm_exe.q", 7, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_mvm_prg.q", 8, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_dwpu.q", 9, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_d_dpu.q", 10, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_d_iau.q", 11, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_m_dpu.q", 12, 1, 0);
      irq_swep_non_zero_status.add_hdl_path_slice("u_irq_swep_non_zero_status_swep_cons_m_iau.q", 13, 1, 0);

      irq_swep_non_zero_en = (token_mgr_csr_reg_irq_swep_non_zero_en::
                              type_id::create("irq_swep_non_zero_en"));
      irq_swep_non_zero_en.configure(.blk_parent(this));
      irq_swep_non_zero_en.build(csr_excl);
      default_map.add_reg(.rg(irq_swep_non_zero_en),
                          .offset(64'h38),
                          .rights("RW"));
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_m_ifd0_en.q", 0, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_m_ifd1_en.q", 1, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_m_ifdw_en.q", 2, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_m_odr_en.q", 3, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_d_ifd0_en.q", 4, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_d_ifd1_en.q", 5, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_d_odr_en.q", 6, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_mvm_exe_en.q", 7, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_mvm_prg_en.q", 8, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_dwpu_en.q", 9, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_d_dpu_en.q", 10, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_d_iau_en.q", 11, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_m_dpu_en.q", 12, 1, 0);
      irq_swep_non_zero_en.add_hdl_path_slice("u_irq_swep_non_zero_en_irq_swep_cons_m_iau_en.q", 13, 1, 0);

      irq_gen_sat_prod_status = (token_mgr_csr_reg_irq_gen_sat_prod_status::
                                 type_id::create("irq_gen_sat_prod_status"));
      irq_gen_sat_prod_status.configure(.blk_parent(this));
      irq_gen_sat_prod_status.build(csr_excl);
      default_map.add_reg(.rg(irq_gen_sat_prod_status),
                          .offset(64'h40),
                          .rights("RW"));
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd0_tok_prod_m_ifd1.q", 0, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd0_tok_prod_m_ifdw.q", 1, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd0_tok_prod_m_odr.q", 2, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd0_tok_prod_d_ifd0.q", 3, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd0_tok_prod_d_ifd1.q", 4, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd0_tok_prod_d_odr.q", 5, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd1_tok_prod_m_ifd0.q", 6, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd1_tok_prod_m_ifdw.q", 7, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd1_tok_prod_m_odr.q", 8, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd1_tok_prod_d_ifd0.q", 9, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd1_tok_prod_d_ifd1.q", 10, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifd1_tok_prod_d_odr.q", 11, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifdw_tok_prod_m_ifd0.q", 12, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifdw_tok_prod_m_ifd1.q", 13, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifdw_tok_prod_m_odr.q", 14, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifdw_tok_prod_d_ifd0.q", 15, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifdw_tok_prod_d_ifd1.q", 16, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_ifdw_tok_prod_d_odr.q", 17, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_odr_tok_prod_m_ifd0.q", 18, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_odr_tok_prod_m_ifd1.q", 19, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_odr_tok_prod_m_ifdw.q", 20, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_odr_tok_prod_d_ifd0.q", 21, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_odr_tok_prod_d_ifd1.q", 22, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_m_odr_tok_prod_d_odr.q", 23, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd0_tok_prod_m_ifd0.q", 24, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd0_tok_prod_m_ifd1.q", 25, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd0_tok_prod_m_ifdw.q", 26, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd0_tok_prod_m_odr.q", 27, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd0_tok_prod_d_ifd1.q", 28, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd0_tok_prod_d_odr.q", 29, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd1_tok_prod_m_ifd0.q", 30, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd1_tok_prod_m_ifd1.q", 31, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd1_tok_prod_m_ifdw.q", 32, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd1_tok_prod_m_odr.q", 33, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd1_tok_prod_d_ifd0.q", 34, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_ifd1_tok_prod_d_odr.q", 35, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_odr_tok_prod_m_ifd0.q", 36, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_odr_tok_prod_m_ifd1.q", 37, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_odr_tok_prod_m_ifdw.q", 38, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_odr_tok_prod_m_odr.q", 39, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_odr_tok_prod_d_ifd0.q", 40, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_d_odr_tok_prod_d_ifd1.q", 41, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_mvm_exe_tok_prod_mvm_prg.q", 42, 1, 0);
      irq_gen_sat_prod_status.add_hdl_path_slice("u_irq_gen_sat_prod_status_mvm_prg_tok_prod_mvm_exe.q", 43, 1, 0);

      irq_gen_sat_prod_en = (token_mgr_csr_reg_irq_gen_sat_prod_en::
                             type_id::create("irq_gen_sat_prod_en"));
      irq_gen_sat_prod_en.configure(.blk_parent(this));
      irq_gen_sat_prod_en.build(csr_excl);
      default_map.add_reg(.rg(irq_gen_sat_prod_en),
                          .offset(64'h48),
                          .rights("RW"));
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd0_tok_prod_m_ifd1_en.q", 0, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd0_tok_prod_m_ifdw_en.q", 1, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd0_tok_prod_m_odr_en.q", 2, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd0_tok_prod_d_ifd0_en.q", 3, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd0_tok_prod_d_ifd1_en.q", 4, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd0_tok_prod_d_odr_en.q", 5, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd1_tok_prod_m_ifd0_en.q", 6, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd1_tok_prod_m_ifdw_en.q", 7, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd1_tok_prod_m_odr_en.q", 8, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd1_tok_prod_d_ifd0_en.q", 9, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd1_tok_prod_d_ifd1_en.q", 10, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifd1_tok_prod_d_odr_en.q", 11, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifdw_tok_prod_m_ifd0_en.q", 12, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifdw_tok_prod_m_ifd1_en.q", 13, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifdw_tok_prod_m_odr_en.q", 14, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifdw_tok_prod_d_ifd0_en.q", 15, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifdw_tok_prod_d_ifd1_en.q", 16, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_ifdw_tok_prod_d_odr_en.q", 17, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_odr_tok_prod_m_ifd0_en.q", 18, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_odr_tok_prod_m_ifd1_en.q", 19, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_odr_tok_prod_m_ifdw_en.q", 20, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_odr_tok_prod_d_ifd0_en.q", 21, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_odr_tok_prod_d_ifd1_en.q", 22, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_m_odr_tok_prod_d_odr_en.q", 23, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd0_tok_prod_m_ifd0_en.q", 24, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd0_tok_prod_m_ifd1_en.q", 25, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd0_tok_prod_m_ifdw_en.q", 26, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd0_tok_prod_m_odr_en.q", 27, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd0_tok_prod_d_ifd1_en.q", 28, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd0_tok_prod_d_odr_en.q", 29, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd1_tok_prod_m_ifd0_en.q", 30, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd1_tok_prod_m_ifd1_en.q", 31, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd1_tok_prod_m_ifdw_en.q", 32, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd1_tok_prod_m_odr_en.q", 33, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd1_tok_prod_d_ifd0_en.q", 34, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_ifd1_tok_prod_d_odr_en.q", 35, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_odr_tok_prod_m_ifd0_en.q", 36, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_odr_tok_prod_m_ifd1_en.q", 37, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_odr_tok_prod_m_ifdw_en.q", 38, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_odr_tok_prod_m_odr_en.q", 39, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_odr_tok_prod_d_ifd0_en.q", 40, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_d_odr_tok_prod_d_ifd1_en.q", 41, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_mvm_exe_tok_prod_mvm_prg_en.q", 42, 1, 0);
      irq_gen_sat_prod_en.add_hdl_path_slice("u_irq_gen_sat_prod_en_irq_mvm_prg_tok_prod_mvm_exe_en.q", 43, 1, 0);

      prod_cnt_m_ifd0 = (token_mgr_csr_reg_prod_cnt_m_ifd0::
                         type_id::create("prod_cnt_m_ifd0"));
      prod_cnt_m_ifd0.configure(.blk_parent(this));
      prod_cnt_m_ifd0.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_m_ifd0),
                          .offset(64'h50),
                          .rights("RO"));
      prod_cnt_m_ifd0.add_hdl_path_slice("u_prod_cnt_m_ifd0_m_ifd0_tok_prod_m_ifd1_cnt.qs", 0, 8, 0);
      prod_cnt_m_ifd0.add_hdl_path_slice("u_prod_cnt_m_ifd0_m_ifd0_tok_prod_m_ifdw_cnt.qs", 8, 8, 0);
      prod_cnt_m_ifd0.add_hdl_path_slice("u_prod_cnt_m_ifd0_m_ifd0_tok_prod_m_odr_cnt.qs", 16, 8, 0);
      prod_cnt_m_ifd0.add_hdl_path_slice("u_prod_cnt_m_ifd0_m_ifd0_tok_prod_d_ifd0_cnt.qs", 24, 8, 0);
      prod_cnt_m_ifd0.add_hdl_path_slice("u_prod_cnt_m_ifd0_m_ifd0_tok_prod_d_ifd1_cnt.qs", 32, 8, 0);
      prod_cnt_m_ifd0.add_hdl_path_slice("u_prod_cnt_m_ifd0_m_ifd0_tok_prod_d_odr_cnt.qs", 40, 8, 0);

      prod_cnt_m_ifd1 = (token_mgr_csr_reg_prod_cnt_m_ifd1::
                         type_id::create("prod_cnt_m_ifd1"));
      prod_cnt_m_ifd1.configure(.blk_parent(this));
      prod_cnt_m_ifd1.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_m_ifd1),
                          .offset(64'h58),
                          .rights("RO"));
      prod_cnt_m_ifd1.add_hdl_path_slice("u_prod_cnt_m_ifd1_m_ifd1_tok_prod_m_ifd0_cnt.qs", 0, 8, 0);
      prod_cnt_m_ifd1.add_hdl_path_slice("u_prod_cnt_m_ifd1_m_ifd1_tok_prod_m_ifdw_cnt.qs", 8, 8, 0);
      prod_cnt_m_ifd1.add_hdl_path_slice("u_prod_cnt_m_ifd1_m_ifd1_tok_prod_m_odr_cnt.qs", 16, 8, 0);
      prod_cnt_m_ifd1.add_hdl_path_slice("u_prod_cnt_m_ifd1_m_ifd1_tok_prod_d_ifd0_cnt.qs", 24, 8, 0);
      prod_cnt_m_ifd1.add_hdl_path_slice("u_prod_cnt_m_ifd1_m_ifd1_tok_prod_d_ifd1_cnt.qs", 32, 8, 0);
      prod_cnt_m_ifd1.add_hdl_path_slice("u_prod_cnt_m_ifd1_m_ifd1_tok_prod_d_odr_cnt.qs", 40, 8, 0);

      prod_cnt_m_ifdw = (token_mgr_csr_reg_prod_cnt_m_ifdw::
                         type_id::create("prod_cnt_m_ifdw"));
      prod_cnt_m_ifdw.configure(.blk_parent(this));
      prod_cnt_m_ifdw.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_m_ifdw),
                          .offset(64'h60),
                          .rights("RO"));
      prod_cnt_m_ifdw.add_hdl_path_slice("u_prod_cnt_m_ifdw_m_ifdw_tok_prod_m_ifd0_cnt.qs", 0, 8, 0);
      prod_cnt_m_ifdw.add_hdl_path_slice("u_prod_cnt_m_ifdw_m_ifdw_tok_prod_m_ifd1_cnt.qs", 8, 8, 0);
      prod_cnt_m_ifdw.add_hdl_path_slice("u_prod_cnt_m_ifdw_m_ifdw_tok_prod_m_odr_cnt.qs", 16, 8, 0);
      prod_cnt_m_ifdw.add_hdl_path_slice("u_prod_cnt_m_ifdw_m_ifdw_tok_prod_d_ifd0_cnt.qs", 24, 8, 0);
      prod_cnt_m_ifdw.add_hdl_path_slice("u_prod_cnt_m_ifdw_m_ifdw_tok_prod_d_ifd1_cnt.qs", 32, 8, 0);
      prod_cnt_m_ifdw.add_hdl_path_slice("u_prod_cnt_m_ifdw_m_ifdw_tok_prod_d_odr_cnt.qs", 40, 8, 0);

      prod_cnt_m_odr = (token_mgr_csr_reg_prod_cnt_m_odr::
                        type_id::create("prod_cnt_m_odr"));
      prod_cnt_m_odr.configure(.blk_parent(this));
      prod_cnt_m_odr.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_m_odr),
                          .offset(64'h68),
                          .rights("RO"));
      prod_cnt_m_odr.add_hdl_path_slice("u_prod_cnt_m_odr_m_odr_tok_prod_m_ifd0_cnt.qs", 0, 8, 0);
      prod_cnt_m_odr.add_hdl_path_slice("u_prod_cnt_m_odr_m_odr_tok_prod_m_ifd1_cnt.qs", 8, 8, 0);
      prod_cnt_m_odr.add_hdl_path_slice("u_prod_cnt_m_odr_m_odr_tok_prod_m_ifdw_cnt.qs", 16, 8, 0);
      prod_cnt_m_odr.add_hdl_path_slice("u_prod_cnt_m_odr_m_odr_tok_prod_d_ifd0_cnt.qs", 24, 8, 0);
      prod_cnt_m_odr.add_hdl_path_slice("u_prod_cnt_m_odr_m_odr_tok_prod_d_ifd1_cnt.qs", 32, 8, 0);
      prod_cnt_m_odr.add_hdl_path_slice("u_prod_cnt_m_odr_m_odr_tok_prod_d_odr_cnt.qs", 40, 8, 0);

      prod_cnt_d_ifd0 = (token_mgr_csr_reg_prod_cnt_d_ifd0::
                         type_id::create("prod_cnt_d_ifd0"));
      prod_cnt_d_ifd0.configure(.blk_parent(this));
      prod_cnt_d_ifd0.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_d_ifd0),
                          .offset(64'h70),
                          .rights("RO"));
      prod_cnt_d_ifd0.add_hdl_path_slice("u_prod_cnt_d_ifd0_d_ifd0_tok_prod_m_ifd0_cnt.qs", 0, 8, 0);
      prod_cnt_d_ifd0.add_hdl_path_slice("u_prod_cnt_d_ifd0_d_ifd0_tok_prod_m_ifd1_cnt.qs", 8, 8, 0);
      prod_cnt_d_ifd0.add_hdl_path_slice("u_prod_cnt_d_ifd0_d_ifd0_tok_prod_m_ifdw_cnt.qs", 16, 8, 0);
      prod_cnt_d_ifd0.add_hdl_path_slice("u_prod_cnt_d_ifd0_d_ifd0_tok_prod_m_odr_cnt.qs", 24, 8, 0);
      prod_cnt_d_ifd0.add_hdl_path_slice("u_prod_cnt_d_ifd0_d_ifd0_tok_prod_d_ifd1_cnt.qs", 32, 8, 0);
      prod_cnt_d_ifd0.add_hdl_path_slice("u_prod_cnt_d_ifd0_d_ifd0_tok_prod_d_odr_cnt.qs", 40, 8, 0);

      prod_cnt_d_ifd1 = (token_mgr_csr_reg_prod_cnt_d_ifd1::
                         type_id::create("prod_cnt_d_ifd1"));
      prod_cnt_d_ifd1.configure(.blk_parent(this));
      prod_cnt_d_ifd1.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_d_ifd1),
                          .offset(64'h78),
                          .rights("RO"));
      prod_cnt_d_ifd1.add_hdl_path_slice("u_prod_cnt_d_ifd1_d_ifd1_tok_prod_m_ifd0_cnt.qs", 0, 8, 0);
      prod_cnt_d_ifd1.add_hdl_path_slice("u_prod_cnt_d_ifd1_d_ifd1_tok_prod_m_ifd1_cnt.qs", 8, 8, 0);
      prod_cnt_d_ifd1.add_hdl_path_slice("u_prod_cnt_d_ifd1_d_ifd1_tok_prod_m_ifdw_cnt.qs", 16, 8, 0);
      prod_cnt_d_ifd1.add_hdl_path_slice("u_prod_cnt_d_ifd1_d_ifd1_tok_prod_m_odr_cnt.qs", 24, 8, 0);
      prod_cnt_d_ifd1.add_hdl_path_slice("u_prod_cnt_d_ifd1_d_ifd1_tok_prod_d_ifd0_cnt.qs", 32, 8, 0);
      prod_cnt_d_ifd1.add_hdl_path_slice("u_prod_cnt_d_ifd1_d_ifd1_tok_prod_d_odr_cnt.qs", 40, 8, 0);

      prod_cnt_d_odr = (token_mgr_csr_reg_prod_cnt_d_odr::
                        type_id::create("prod_cnt_d_odr"));
      prod_cnt_d_odr.configure(.blk_parent(this));
      prod_cnt_d_odr.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_d_odr),
                          .offset(64'h80),
                          .rights("RO"));
      prod_cnt_d_odr.add_hdl_path_slice("u_prod_cnt_d_odr_d_odr_tok_prod_m_ifd0_cnt.qs", 0, 8, 0);
      prod_cnt_d_odr.add_hdl_path_slice("u_prod_cnt_d_odr_d_odr_tok_prod_m_ifd1_cnt.qs", 8, 8, 0);
      prod_cnt_d_odr.add_hdl_path_slice("u_prod_cnt_d_odr_d_odr_tok_prod_m_ifdw_cnt.qs", 16, 8, 0);
      prod_cnt_d_odr.add_hdl_path_slice("u_prod_cnt_d_odr_d_odr_tok_prod_m_odr_cnt.qs", 24, 8, 0);
      prod_cnt_d_odr.add_hdl_path_slice("u_prod_cnt_d_odr_d_odr_tok_prod_d_ifd0_cnt.qs", 32, 8, 0);
      prod_cnt_d_odr.add_hdl_path_slice("u_prod_cnt_d_odr_d_odr_tok_prod_d_ifd1_cnt.qs", 40, 8, 0);

      prod_cnt_mvm_exe = (token_mgr_csr_reg_prod_cnt_mvm_exe::
                          type_id::create("prod_cnt_mvm_exe"));
      prod_cnt_mvm_exe.configure(.blk_parent(this));
      prod_cnt_mvm_exe.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_mvm_exe),
                          .offset(64'h88),
                          .rights("RO"));
      prod_cnt_mvm_exe.add_hdl_path_slice("u_prod_cnt_mvm_exe.qs", 0, 8, 0);

      prod_cnt_mvm_prg = (token_mgr_csr_reg_prod_cnt_mvm_prg::
                          type_id::create("prod_cnt_mvm_prg"));
      prod_cnt_mvm_prg.configure(.blk_parent(this));
      prod_cnt_mvm_prg.build(csr_excl);
      default_map.add_reg(.rg(prod_cnt_mvm_prg),
                          .offset(64'h90),
                          .rights("RO"));
      prod_cnt_mvm_prg.add_hdl_path_slice("u_prod_cnt_mvm_prg.qs", 0, 8, 0);


    endfunction : build
  endclass : token_mgr_csr_reg_block

endpackage

