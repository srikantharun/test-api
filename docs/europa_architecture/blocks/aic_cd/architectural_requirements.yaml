requirements:
- block: ACD
  category: CONN
  optional_description: ''
  index: 0
  description: The ACD should have a command FIFO of depth 16 accessible via the 64-bit AXI subordinate port
  criticality: bronze
  owner: Gua Hao Khov
- block: ACD
  category: CONN
  optional_description: ''
  index: 1
  description: The ACD should have a CSR accessible via the 64-bit AXI subordinate port
  criticality: bronze
  owner: Gua Hao Khov
- block: ACD
  category: CONN
  optional_description: ''
  index: 2
  description: The ACD should have a 64-bit AXI manager port which can access both the SPM and the AIC datapath blocks
  criticality: bronze
  owner: Gua Hao Khov
- block: ACD
  category: CONN
  optional_description: ''
  index: 3
  description: The ACD should have an IRQ signal connected to the PLIC
  criticality: bronze
  owner: Gua Hao Khov
- block: ACD
  category: CONN
  optional_description: ''
  index: 4
  description: The ACD should be part of the intra-core and top-level token network
  criticality: bronze
  owner: Gua Hao Khov
- block: ACD
  category: CONN
  optional_description: ''
  index: 5
  description: The ACD should be connected to the timestamp unit with a 2-bit trigger signal
  criticality: bronze
  owner: Gua Hao Khov
- block: ACD
  category: CONN
  optional_description: ''
  index: 6
  description: The ACD should be able to receive a command execution done signal from each datapath block
  criticality: bronze
  owner: Gua Hao Khov
- block: ACD
  category: CONN
  optional_description: ''
  index: 7
  description: The ACD should have an address vector input port to indicate the `aic_base_addr` to be applied to all addresses found in its commands and instructions
  criticality: bronze
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 0
  description: The ACD should be able to execute a sequential list of tasks/instructions provided by a command with a pointer and length
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 1
  description: The ACD should be able to decode instructions based on the major and minor opcode and execute them accordingly
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 2
  description: The ACD should offset any control data pointers in its commands and instructions by the `ctrl_data_base_addr` provided in the CSR
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 3
  description: The ACD should be able to provide an IRQ upon completion of the task list including any outstanding transactions
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 4
  description: The ACD should provide its status continuously via CSR, e.g. idle or busy state
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 5
  description: The ACD should have a configurable address map of the AIC datapath blocks' command FIFO and program memory stored in CSR
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 6
  description: The ACD should be able to reference the configurable address map via the destination ID in its `send_cmd` and `send_prg` instructions
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 7
  description: The ACD should be able to execute the 'send_cmd' instruction which sends a datapath command stored at the provided pointer to the targeted destination's command FIFO
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 8
  description: The ACD should pessimistically estimate the command FIFO fill statuses of each AIC datapath block based on the ACD sideband sync signals
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 9
  description: The ACD should stall the datapath command transfer if the corresponding command FIFO is estimated to not have enough slots
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 10
  description: The ACD should be able to patch/offset addresses in the datapath commands based on patch modes configured in CSR and referenced by ID
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 11
  description: The ACD should patch datapath command addresses by applying the offset address stored in CSR and referenced by ID
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 12
  description: The ACD should only support patching of addresses which are word aligned, starting at byte 0, and have a width in bytes
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 13
  description: The ACD should be able to patch up to two addresses per command with the restriction that word_index_0 is strictly smaller than word_index_1
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 14
  description: The ACD should be able to disable the patching by setting the patch_mode to zero
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 15
  description: The ACD should be able to store up to 8 patch modes starting with ID of 1 since 0 disables the feature
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 16
  description: The ACD should be able to store up to 16 patch addresses in CSR
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 17
  description: The ACD should be able to execute the 'send_prg' instruction which sends a datapath program stored at the provided pointer to the targeted destination's program memory
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 18
  description: The ACD should be able to store datapath programs at an unaligned offset in the targeted destinations's program memory
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 19
  description: The ACD should only support datapath programs which are stored in an aligned fashion with padding if required
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 20
  description: The ACD should be able to execute the 'cons_local' instruction which consumes the indicated intra-core tokens and stalls until all required tokens have arrived
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 21
  description: The ACD should be able to execute the 'cons_global' instruction which consumes the indicated top-level tokens and stalls until all required tokens have arrived
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 22
  description: The ACD should be able to execute the 'prod_local' instruction which produces the indicated intra-core tokens and stalls until all required tokens have been sent
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 23
  description: The ACD should be able to execute the 'prod_global' instruction which produces the indicated top-level tokens and stalls until all required tokens have been sent
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 24
  description: The ACD should be able to execute the 'timestamp' instruction which produces a timestamp with the provided ID using the timestamp sideband signals
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 25
  description: The ACD should be able to offset all datapath command and program pointers in its instructions by the `control_offset` provided in its command
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 26
  description: The ACD should only sent out legal AXI transactions whether bursted or not
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 27
  description: The ACD should have a 32 word deep copy buffer macro to copy control data from SPM to the AIC datapath blocks
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 28
  description: The ACD should calculate the final task list pointer based on the following formula `aic_base_addr + ctrl_data_base_addr + task_list_ptr`
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 29
  description: The ACD should calculate the final command source pointer based on the following formula `aic_base_addr + ctrl_data_base_addr + control_offset + command_ptr`
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 30
  description: The ACD should calculate the final program source pointer based on the following formula `aic_base_addr + ctrl_data_base_addr + control_offset + program_ptr`
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 31
  description: The ACD should calculate the final command destination address based on the following formula `aic_base_addr + local_memory_map[cmd.dst_id]`
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 32
  description: The ACD should calculate the final program destination address based on the following formula `aic_base_addr + local_memory_map[prg.dst_id] + dst_address`
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 33
  description: The ACD should only support pointers in commands and instructions which are word-aligned including any potential offsets applied
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: FEAT
  optional_description: ''
  index: 34
  description: The ACD should be able to provide the control for the entire Drv-FIAT regression without the need of the CVA6V
  criticality: silver
  owner: Gua Hao Khov
- block: ACD
  category: DBG
  optional_description: ''
  index: 0
  description: The ACD should stop executing any further instructions upon encountering an instruction decode error and report the current failing instruction
  criticality: gold
  owner: Gua Hao Khov
- block: ACD
  category: DBG
  optional_description: ''
  index: 1
  description: The ACD should upon an AXI error finish any outstanding AXI transactions and then halt its operation and report the error
  criticality: gold
  owner: Gua Hao Khov
- block: ACD
  category: DBG
  optional_description: ''
  index: 2
  description: The ACD should halt its operation if it encounters an unsupported copy operation, e.g. due to address misalignment, and report the operation
  criticality: gold
  owner: Gua Hao Khov
- block: ACD
  category: PERF
  optional_description: ''
  index: 0
  description: The ACD should be able to provide a control throughput which exceeds the CVA6V disregarding initial setup overhead
  criticality: gold
  owner: Gua Hao Khov
