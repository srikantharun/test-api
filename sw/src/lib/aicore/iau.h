// (C) Copyright Axelera AI 2024
// All Rights Reserved
// *** Axelera AI Confidential ***

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY.
// Use the "blueprint-engine" to regenerate this file.

/* clang-format off */

#ifndef __IAU_H__
#define __IAU_H__

//==================================================
// INCLUDES
//==================================================

#include <stdbool.h>
#include <stdint.h>

#include "module.h"

//==================================================
// MACROS
//==================================================

//==================================================
// DEFINITIONS
//==================================================

// Module IDs
#define IAU_ID_D_IAU                                (MODULE_ID_D_IAU)
#define IAU_ID_M_IAU                                (MODULE_ID_M_IAU)

// Command Formats
#define IAU_COMMAND_FORMAT_ID_LOOP_M1_N0                          (0)
#define IAU_COMMAND_FORMAT_ID_LOOP_M1_N1                          (1)
#define IAU_COMMAND_FORMAT_ID_LOOP_M1_N2                          (2)
#define IAU_COMMAND_FORMAT_ID_LOOP_M2_N0                          (3)
#define IAU_COMMAND_FORMAT_ID_LOOP_M2_N1                          (4)
#define IAU_COMMAND_FORMAT_ID_LOOP_M2_N2                          (5)
#define IAU_COMMAND_FORMAT_ID_LOOP_M3_N0                          (6)
#define IAU_COMMAND_FORMAT_ID_LOOP_M3_N1                          (7)
#define IAU_COMMAND_FORMAT_ID_LOOP_M3_N2                          (8)
#define IAU_COMMAND_FORMAT_ID_BYPASS                              (9)

//==================================================
// TYPES
//==================================================

//--------------------------------------------------
// Commands
//--------------------------------------------------

// TODO(schmuck): this should be overwritten with the actual token endpoints
typedef module_command_header_t iau_command_header_t;

// Formats
//--------------------------------------------------

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
  } payload;
} iau_command_format_loop_m1_n0_t;

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
    uint64_t nested_0_start : 16;
    uint64_t nested_0_length : 16;
    uint64_t nested_0_iter : 24;
    uint64_t nested_0_map_main : 8;
  } payload;
} iau_command_format_loop_m1_n1_t;

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
    uint64_t nested_0_start : 16;
    uint64_t nested_0_length : 16;
    uint64_t nested_0_iter : 24;
    uint64_t nested_0_map_main : 8;
    uint64_t nested_1_start : 16;
    uint64_t nested_1_length : 16;
    uint64_t nested_1_iter : 24;
    uint64_t nested_1_map_main : 8;
  } payload;
} iau_command_format_loop_m1_n2_t;

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
    uint64_t main_1_start : 16;
    uint64_t main_1_length : 16;
    uint64_t main_1_iter : 24;
    uint64_t __reserved_7__ : 8;
  } payload;
} iau_command_format_loop_m2_n0_t;

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
    uint64_t main_1_start : 16;
    uint64_t main_1_length : 16;
    uint64_t main_1_iter : 24;
    uint64_t __reserved_7__ : 8;
    uint64_t nested_0_start : 16;
    uint64_t nested_0_length : 16;
    uint64_t nested_0_iter : 24;
    uint64_t nested_0_map_main : 8;
  } payload;
} iau_command_format_loop_m2_n1_t;

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
    uint64_t main_1_start : 16;
    uint64_t main_1_length : 16;
    uint64_t main_1_iter : 24;
    uint64_t __reserved_7__ : 8;
    uint64_t nested_0_start : 16;
    uint64_t nested_0_length : 16;
    uint64_t nested_0_iter : 24;
    uint64_t nested_0_map_main : 8;
    uint64_t nested_1_start : 16;
    uint64_t nested_1_length : 16;
    uint64_t nested_1_iter : 24;
    uint64_t nested_1_map_main : 8;
  } payload;
} iau_command_format_loop_m2_n2_t;

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
    uint64_t main_1_start : 16;
    uint64_t main_1_length : 16;
    uint64_t main_1_iter : 24;
    uint64_t __reserved_7__ : 8;
    uint64_t main_2_start : 16;
    uint64_t main_2_length : 16;
    uint64_t main_2_iter : 24;
    uint64_t __reserved_11__ : 8;
  } payload;
} iau_command_format_loop_m3_n0_t;

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
    uint64_t main_1_start : 16;
    uint64_t main_1_length : 16;
    uint64_t main_1_iter : 24;
    uint64_t __reserved_7__ : 8;
    uint64_t main_2_start : 16;
    uint64_t main_2_length : 16;
    uint64_t main_2_iter : 24;
    uint64_t __reserved_11__ : 8;
    uint64_t nested_0_start : 16;
    uint64_t nested_0_length : 16;
    uint64_t nested_0_iter : 24;
    uint64_t nested_0_map_main : 8;
  } payload;
} iau_command_format_loop_m3_n1_t;

typedef struct {
  iau_command_header_t header;
  struct {
    uint64_t main_0_start : 16;
    uint64_t main_0_length : 16;
    uint64_t main_0_iter : 24;
    uint64_t __reserved_3__ : 8;
    uint64_t main_1_start : 16;
    uint64_t main_1_length : 16;
    uint64_t main_1_iter : 24;
    uint64_t __reserved_7__ : 8;
    uint64_t main_2_start : 16;
    uint64_t main_2_length : 16;
    uint64_t main_2_iter : 24;
    uint64_t __reserved_11__ : 8;
    uint64_t nested_0_start : 16;
    uint64_t nested_0_length : 16;
    uint64_t nested_0_iter : 24;
    uint64_t nested_0_map_main : 8;
    uint64_t nested_1_start : 16;
    uint64_t nested_1_length : 16;
    uint64_t nested_1_iter : 24;
    uint64_t nested_1_map_main : 8;
  } payload;
} iau_command_format_loop_m3_n2_t;

typedef struct {
  iau_command_header_t header;
  struct {
    // No fields
  } payload;
} iau_command_format_bypass_t;

// Command Union
//--------------------------------------------------

typedef union {
  module_command_t _command;
  iau_command_format_loop_m1_n0_t loop_m1_n0;
  iau_command_format_loop_m1_n1_t loop_m1_n1;
  iau_command_format_loop_m1_n2_t loop_m1_n2;
  iau_command_format_loop_m2_n0_t loop_m2_n0;
  iau_command_format_loop_m2_n1_t loop_m2_n1;
  iau_command_format_loop_m2_n2_t loop_m2_n2;
  iau_command_format_loop_m3_n0_t loop_m3_n0;
  iau_command_format_loop_m3_n1_t loop_m3_n1;
  iau_command_format_loop_m3_n2_t loop_m3_n2;
  iau_command_format_bypass_t bypass;
} iau_command_t;

//--------------------------------------------------
// Instructions
//--------------------------------------------------

// Instructions
//--------------------------------------------------

typedef struct {
  uint16_t opcode : 3;
  uint16_t rfs : 1;
  uint16_t dst : 4;
  uint16_t src0 : 4;
  uint16_t src1 : 4;
} iau_instruction_t;

//--------------------------------------------------
// Interface
//--------------------------------------------------

typedef module_id_t iau_id_t;

typedef enum {
  IAU_STATUS_OK = 0,
  IAU_STATUS_ERROR,
} iau_status_t;

//==================================================
// GLOBAL FUNCTION PROTOTYPES
//==================================================

iau_status_t iau_init(void);

iau_status_t iau_enable_execution(iau_id_t iau_id);
iau_status_t iau_disable_execution(iau_id_t iau_id);
iau_status_t iau_poll_idle(iau_id_t iau_id);

iau_status_t iau_load_command(iau_id_t iau_id, iau_command_t* command);
iau_status_t iau_load_instructions(iau_id_t iau_id, iau_instruction_t instructions[], uint16_t count, uint16_t offset);

#endif  // __IAU_H__
