// (C) Copyright Axelera AI 2024
// All Rights Reserved
// *** Axelera AI Confidential ***

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY.
// Use the "blueprint-engine" to regenerate this file.

/* clang-format off */

#ifndef __MVMPRG_H__
#define __MVMPRG_H__

//==================================================
// INCLUDES
//==================================================

#include <stdbool.h>
#include <stdint.h>

#include "module.h"

//==================================================
// MACROS
//==================================================

//==================================================
// DEFINITIONS
//==================================================

// Module IDs
#define MVMPRG_ID_M_MVMPRG                       (MODULE_ID_M_MVMPRG)

// Command Formats
#define MVMPRG_COMMAND_FORMAT_ID_STANDARD                         (0)

//==================================================
// TYPES
//==================================================

//--------------------------------------------------
// Commands
//--------------------------------------------------

// TODO(schmuck): this should be overwritten with the actual token endpoints
typedef module_command_header_t mvmprg_command_header_t;

// Formats
//--------------------------------------------------

typedef struct {
  mvmprg_command_header_t header;
  struct {
    uint64_t __reserved_0__ : 8;
    uint64_t a_s : 8;
    uint64_t a_u_pw : 8;
    uint64_t a_t_pw : 8;
    uint64_t wb_u_pw : 8;
    uint64_t wb_t_pw : 8;
    uint64_t prg_mode : 2;
    uint64_t __reserved_7__ : 14;
  } payload;
} mvmprg_command_format_standard_t;

// Command Union
//--------------------------------------------------

typedef union {
  module_command_t _command;
  mvmprg_command_format_standard_t standard;
} mvmprg_command_t;

//--------------------------------------------------
// Interface
//--------------------------------------------------

typedef module_id_t mvmprg_id_t;

typedef enum {
  MVMPRG_STATUS_OK = 0,
  MVMPRG_STATUS_ERROR,
} mvmprg_status_t;

//==================================================
// GLOBAL FUNCTION PROTOTYPES
//==================================================

mvmprg_status_t mvmprg_init(void);

mvmprg_status_t mvmprg_enable_execution(mvmprg_id_t mvmprg_id);
mvmprg_status_t mvmprg_disable_execution(mvmprg_id_t mvmprg_id);
mvmprg_status_t mvmprg_poll_idle(mvmprg_id_t mvmprg_id);

mvmprg_status_t mvmprg_load_command(mvmprg_id_t mvmprg_id, mvmprg_command_t* command);

#endif  // __MVMPRG_H__
