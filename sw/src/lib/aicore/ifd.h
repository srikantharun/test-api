// (C) Copyright Axelera AI 2024
// All Rights Reserved
// *** Axelera AI Confidential ***

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY.
// Use the "blueprint-engine" to regenerate this file.

/* clang-format off */

#ifndef __IFD_H__
#define __IFD_H__

//==================================================
// INCLUDES
//==================================================

#include <stdbool.h>
#include <stdint.h>

#include "module.h"

//==================================================
// MACROS
//==================================================

//==================================================
// DEFINITIONS
//==================================================

// Module IDs
#define IFD_ID_D_IFD_0                            (MODULE_ID_D_IFD_0)
#define IFD_ID_D_IFD_1                            (MODULE_ID_D_IFD_1)
#define IFD_ID_M_IFD_0                            (MODULE_ID_M_IFD_0)
#define IFD_ID_M_IFD_1                            (MODULE_ID_M_IFD_1)
#define IFD_ID_M_IFD_2                            (MODULE_ID_M_IFD_2)
#define IFD_ID_M_IFD_W                            (MODULE_ID_M_IFD_W)

// Command Formats
#define IFD_COMMAND_FORMAT_ID_DEF_BASED                           (0)
#define IFD_COMMAND_FORMAT_ID_LINEAR                              (1)
#define IFD_COMMAND_FORMAT_ID_THREE_DIM_FALLBACK                  (2)
#define IFD_COMMAND_FORMAT_ID_OFFSET_DEF_BASED                    (3)
#define IFD_COMMAND_FORMAT_ID_FOUR_DIM_FALLBACK                   (4)

//==================================================
// TYPES
//==================================================

//--------------------------------------------------
// Commands
//--------------------------------------------------

// TODO(schmuck): this should be overwritten with the actual token endpoints
typedef module_command_header_t ifd_command_header_t;

// Formats
//--------------------------------------------------

typedef struct {
  ifd_command_header_t header;
  struct {
    uint64_t mem_baseaddr : 32;
    int64_t pad_val : 16;
    int64_t intra_pad_val : 16;
    uint64_t mem_offset : 32;
    uint64_t ring_buf_size : 24;
    uint64_t num_dim : 2;
    uint64_t vect_dim : 2;
    uint64_t vtrsp_mode : 2;
    uint64_t pad_mode : 1;
    uint64_t precision : 1;
    uint64_t dim_def_ptr : 8;
    uint64_t loop_def_ptr : 8;
    uint64_t mask_start : 8;
    uint64_t mask_end : 8;
    uint64_t mem_bsize : 32;
  } payload;
} ifd_command_format_def_based_t;

typedef struct {
  ifd_command_header_t header;
  struct {
    uint64_t mem_baseaddr : 32;
    uint64_t __reserved_1__ : 8;
    uint64_t compression : 1;
    uint64_t __reserved_3__ : 7;
    uint64_t length : 16;
  } payload;
} ifd_command_format_linear_t;

typedef struct {
  ifd_command_header_t header;
  struct {
    uint64_t mem_baseaddr : 32;
    int64_t pad_val : 16;
    int64_t intra_pad_val : 16;
    uint64_t mem_offset : 32;
    uint64_t ring_buf_size : 24;
    uint64_t __reserved_5__ : 2;
    uint64_t vect_dim : 2;
    uint64_t vtrsp_mode : 2;
    uint64_t pad_mode : 1;
    uint64_t precision : 1;
    uint64_t inner_length_c : 16;
    uint64_t mask_start : 8;
    uint64_t mask_end : 8;
    uint64_t mem_bsize : 32;
    int64_t dim_offset_a : 16;
    uint64_t dim_width_a : 16;
    uint64_t mem_stride_a : 32;
    int64_t dim_offset_b : 16;
    uint64_t dim_width_b : 16;
    uint64_t mem_stride_b : 32;
    int64_t dim_offset_c : 16;
    uint64_t dim_width_c : 16;
    uint64_t mem_stride_c : 32;
    uint64_t inner_length_a : 16;
    uint64_t outer_length_a : 16;
    int64_t inner_stride_a : 8;
    int64_t outer_stride_a : 8;
    uint64_t outer_length_c : 16;
    uint64_t inner_length_b : 16;
    uint64_t outer_length_b : 16;
    int64_t inner_stride_b : 8;
    int64_t outer_stride_b : 8;
    int64_t inner_stride_c : 8;
    int64_t outer_stride_c : 8;
  } payload;
} ifd_command_format_three_dim_fallback_t;

typedef struct {
  ifd_command_header_t header;
  struct {
    uint64_t mem_baseaddr : 32;
    int64_t pad_val : 16;
    int64_t intra_pad_val : 16;
    uint64_t mem_offset : 32;
    uint64_t ring_buf_size : 24;
    uint64_t num_dim : 2;
    uint64_t vect_dim : 2;
    uint64_t vtrsp_mode : 2;
    uint64_t pad_mode : 1;
    uint64_t precision : 1;
    uint64_t dim_def_ptr : 8;
    uint64_t loop_def_ptr : 8;
    uint64_t mask_start : 8;
    uint64_t mask_end : 8;
    uint64_t mem_bsize : 32;
    int64_t dim_offset_a : 16;
    int64_t dim_offset_b : 16;
    int64_t dim_offset_c : 16;
    int64_t dim_offset_d : 16;
  } payload;
} ifd_command_format_offset_def_based_t;

typedef struct {
  ifd_command_header_t header;
  struct {
    uint64_t mem_baseaddr : 32;
    int64_t pad_val : 16;
    int64_t intra_pad_val : 16;
    uint64_t mem_offset : 32;
    uint64_t ring_buf_size : 24;
    uint64_t __reserved_5__ : 2;
    uint64_t vect_dim : 2;
    uint64_t vtrsp_mode : 2;
    uint64_t pad_mode : 1;
    uint64_t precision : 1;
    uint64_t __reserved_10__ : 16;
    uint64_t mask_start : 8;
    uint64_t mask_end : 8;
    uint64_t mem_bsize : 32;
    int64_t dim_offset_a : 16;
    uint64_t dim_width_a : 16;
    uint64_t mem_stride_a : 32;
    int64_t dim_offset_b : 16;
    uint64_t dim_width_b : 16;
    uint64_t mem_stride_b : 32;
    int64_t dim_offset_c : 16;
    uint64_t dim_width_c : 16;
    uint64_t mem_stride_c : 32;
    int64_t dim_offset_d : 16;
    uint64_t dim_width_d : 16;
    uint64_t mem_stride_d : 32;
    uint64_t inner_length_a : 16;
    uint64_t inner_length_b : 16;
    uint64_t inner_length_c : 16;
    uint64_t inner_length_d : 16;
    uint64_t outer_length_a : 16;
    uint64_t outer_length_b : 16;
    uint64_t outer_length_c : 16;
    uint64_t outer_length_d : 16;
    int64_t inner_stride_a : 8;
    int64_t inner_stride_b : 8;
    int64_t inner_stride_c : 8;
    int64_t inner_stride_d : 8;
    int64_t outer_stride_a : 8;
    int64_t outer_stride_b : 8;
    int64_t outer_stride_c : 8;
    int64_t outer_stride_d : 8;
  } payload;
} ifd_command_format_four_dim_fallback_t;

// Command Union
//--------------------------------------------------

typedef union {
  module_command_t _command;
  ifd_command_format_def_based_t def_based;
  ifd_command_format_linear_t linear;
  ifd_command_format_three_dim_fallback_t three_dim_fallback;
  ifd_command_format_offset_def_based_t offset_def_based;
  ifd_command_format_four_dim_fallback_t four_dim_fallback;
} ifd_command_t;

//--------------------------------------------------
// Instructions
//--------------------------------------------------

// Formats
//--------------------------------------------------

typedef struct {
  int64_t dim_offset : 16;
  uint64_t dim_width : 16;
  uint64_t mem_stride : 32;
} ifd_instruction_format_dim_def_t;

typedef struct {
  uint64_t inner_length : 16;
  int64_t inner_stride : 8;
  uint64_t __reserved_2__ : 8;
  uint64_t outer_length : 16;
  int64_t outer_stride : 8;
  uint64_t __reserved_5__ : 8;
} ifd_instruction_format_loop_def_t;

// Instructions
//--------------------------------------------------

typedef union {
  ifd_instruction_format_dim_def_t dim_def;
  ifd_instruction_format_loop_def_t loop_def;
} ifd_instruction_t;

//--------------------------------------------------
// Interface
//--------------------------------------------------

typedef module_id_t ifd_id_t;

typedef enum {
  IFD_STATUS_OK = 0,
  IFD_STATUS_ERROR,
} ifd_status_t;

//==================================================
// GLOBAL FUNCTION PROTOTYPES
//==================================================

ifd_status_t ifd_init(void);

ifd_status_t ifd_enable_execution(ifd_id_t ifd_id);
ifd_status_t ifd_disable_execution(ifd_id_t ifd_id);
ifd_status_t ifd_poll_idle(ifd_id_t ifd_id);

ifd_status_t ifd_load_command(ifd_id_t ifd_id, ifd_command_t* command);
ifd_status_t ifd_load_instructions(ifd_id_t ifd_id, ifd_instruction_t instructions[], uint16_t count, uint16_t offset);

#endif  // __IFD_H__
