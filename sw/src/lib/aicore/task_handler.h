// (C) Copyright Axelera AI 2024
// All Rights Reserved
// *** Axelera AI Confidential ***

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY.
// Use the "blueprint-engine" to regenerate this file.

/* clang-format off */

#ifndef __TASK_HANDLER_H__
#define __TASK_HANDLER_H__

//==================================================
// INCLUDES
//==================================================

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#include "mempool.h"

//==================================================
// MACROS
//==================================================

//==================================================
// DEFINITIONS
//==================================================

// task_type
#define TASK_HANDLER_TASK_TYPE_COMMAND                                           (0)
#define TASK_HANDLER_TASK_TYPE_INSTRUCTION                                       (1)
#define TASK_HANDLER_TASK_TYPE_TOKEN                                             (2)
#define TASK_HANDLER_TASK_TYPE_POLLING                                           (3)
#define TASK_HANDLER_TASK_TYPE_START_DMA                                         (4)
#define TASK_HANDLER_TASK_TYPE_POLL_DMA                                          (5)
#define TASK_HANDLER_TASK_TYPE_C2C_SYNC                                          (6)

//==================================================
// TYPES
//==================================================

//--------------------------------------------------
// Base
//--------------------------------------------------

typedef enum {
  TASK_HANDLER_STATUS_OK = 0,
  TASK_HANDLER_STATUS_ERROR,
} task_handler_status_t;


//--------------------------------------------------
// Other
//--------------------------------------------------

typedef struct {
  mempool_address_t src;
  mempool_address_t dst;
  uint64_t size : 64;
} task_handler_memory_transfer_t;

//--------------------------------------------------
// Task Structs
//--------------------------------------------------

typedef uint64_t task_handler_header_type_encoding_t;

typedef __attribute__((aligned(sizeof(uint64_t)))) struct {
  uint16_t type;
  uint8_t __reserved_1__[2];
  uint32_t size;
} task_handler_task_header_t;

typedef __attribute__((aligned(sizeof(uint64_t)))) struct {
  task_handler_task_header_t header;
  union {
    struct __attribute__((aligned(sizeof(uint64_t)))) {
      uint8_t target;
      uint8_t __reserved_1__[7];
      uint64_t payload[];
    } packed;
    struct __attribute__((aligned(sizeof(uint64_t)))) {
      uint8_t target;
      uint8_t __reserved_1__[7];
      const uint64_t* payload;
    } indirect;
  } payload;
} task_handler_command_task_t;

typedef __attribute__((aligned(sizeof(uint64_t)))) struct {
  task_handler_task_header_t header;
  union {
    struct __attribute__((aligned(sizeof(uint64_t)))) {
      uint8_t target;
      uint8_t __reserved_1__[1];
      uint16_t offset;
      uint32_t count;
      uint8_t payload[];
    } packed;
    struct __attribute__((aligned(sizeof(uint64_t)))) {
      uint8_t target;
      uint8_t __reserved_1__[1];
      uint16_t offset;
      uint32_t count;
      const uint8_t* payload;
    } indirect;
  } payload;
} task_handler_instruction_task_t;

typedef __attribute__((aligned(sizeof(uint64_t)))) struct {
  task_handler_task_header_t header;
  struct __attribute__((aligned(sizeof(uint64_t)))) {
    uint8_t mode;
    uint8_t __reserved_1__[6];
    uint8_t targets[17];
  } payload;
} task_handler_token_task_t;

typedef __attribute__((aligned(sizeof(uint64_t)))) struct {
  task_handler_task_header_t header;
  struct __attribute__((aligned(sizeof(uint64_t)))) {
    uint8_t __reserved_0__[7];
    uint8_t targets[17];
  } payload;
} task_handler_polling_task_t;

typedef __attribute__((aligned(sizeof(uint64_t)))) struct {
  task_handler_task_header_t header;
  union {
    struct __attribute__((aligned(sizeof(uint64_t)))) {
      uint8_t ch_idx;
      uint8_t __reserved_1__[3];
      uint32_t count;
      uint64_t transfers[];
    } packed;
    struct __attribute__((aligned(sizeof(uint64_t)))) {
      uint8_t ch_idx;
      uint8_t __reserved_1__[3];
      uint32_t count;
      const uint64_t* transfers;
    } indirect;
  } payload;
} task_handler_start_dma_task_t;

typedef __attribute__((aligned(sizeof(uint64_t)))) struct {
  task_handler_task_header_t header;
  struct __attribute__((aligned(sizeof(uint64_t)))) {
    uint8_t ch_idx;
    uint8_t __reserved_1__[7];
  } payload;
} task_handler_poll_dma_task_t;

typedef __attribute__((aligned(sizeof(uint64_t)))) struct {
  task_handler_task_header_t header;
  struct __attribute__((aligned(sizeof(uint64_t)))) {
    uint8_t mode;
    uint8_t __reserved_1__[6];
    uint8_t targets[9];
  } payload;
} task_handler_c2c_sync_task_t;


//--------------------------------------------------
// Task Union
//--------------------------------------------------

typedef union {
  // Common header is always present
  task_handler_task_header_t header;

  // Different tasks
  task_handler_command_task_t command;
  task_handler_instruction_task_t instruction;
  task_handler_token_task_t token;
  task_handler_polling_task_t polling;
  task_handler_start_dma_task_t start_dma;
  task_handler_poll_dma_task_t poll_dma;
  task_handler_c2c_sync_task_t c2c_sync;
} task_handler_task_t;

//--------------------------------------------------
// Task Streaming
//--------------------------------------------------

typedef struct {
  uintptr_t packed_tasks_ptr;
  int packed_tasks_size;
  uint32_t* chunk_sizes;
  int chunk_count;
  size_t chunk_size_limit;
} task_handler_packed_tasks_stream_t;

//==================================================
// GLOBAL FUNCTION PROTOTYPES
//==================================================

task_handler_status_t task_handler_init(void);

task_handler_status_t task_handler_run_tasks(const task_handler_task_t* const tasks[], const uint32_t count);
task_handler_status_t task_handler_run_packed_tasks(uintptr_t packed_tasks_ptr, size_t packed_tasks_size);
task_handler_status_t task_handler_stream_packed_tasks(const task_handler_packed_tasks_stream_t* stream, uintptr_t buffer, size_t buffer_size);

#endif  // __TASK_HANDLER_H__
