#!/usr/bin/env bash

# Documentation coupled with this script
# https://axeleraai.atlassian.net/wiki/spaces/SOFTWARE/pages/677937391/Europa+LPDDR

set -e

#--------------------------------------------------------------
# Explain usage of the script
#--------------------------------------------------------------
usage() {
    cat << EOF
usage: $(basename $0) [ARGS]

Produces sequence txt file that will be used to update the LPDDR driver.

Intermediate files will be created on the place of script call, unless explicitly
declared differently with -i and -o, they can be lowered by using --delete_intermediate_results.


where ARGS are:
    -h, --help                    : Display this help
    -i, --input-sequence-file     : Specify input sequence file (default: sw/scripts/lpddr/synopsys/dwc_ddrctl_cinit.seq)"
    -o, --output-sequence-file    : Specify output c sequence file (default: sw/scripts/lpddr/synopsys/sequence_modified.txt)"
    --debug                       : Print internal variables
    --clean-all                   : Run only clean-all make target within cinit directory
    --skip-build                  : Skip build step of the standalone app, if the app is already build.
    --delete_intermediate_results : This option can be used durring sequence generation to delete intermediate files.
EOF
}

#--------------------------------------------------------------
# Helping functions
#--------------------------------------------------------------
error() {
    >&2 echo "ERROR: $@"
    exit 1
}

#--------------------------------------------------------------
# Environment setup
#--------------------------------------------------------------
# Bare minimum from the environment
if [[ -z "$REPO_ROOT" ]]; then
    echo "Error: REPO_ROOT is not set. Please load the environment." >&2
    exit 1
fi

#--------------------------------------------------------------
# Default values
#--------------------------------------------------------------
# Get the absolute paths to the dirs
SCRIPT_DIR="$(realpath "$REPO_ROOT/sw/scripts/lpddr")"
LPDDR_DIR="$(realpath "$SCRIPT_DIR/synopsys")"
SIM_DIR="$(realpath "$LPDDR_DIR/sim")"
CINIT_DIR="$(realpath "$SIM_DIR/sw_utilities/cinit")"
TESTBENCH_DIR="$(realpath "$SIM_DIR/testbench")"
APP_DIR="$(realpath "$CINIT_DIR/apps/standalone")"

# Get the absolute paths to the files
PHY_VDEFINES_FILE="${TESTBENCH_DIR}/macros/dwc_ddrphy_VDEFINES.v"
CONVERSION_SCRIPT="${SCRIPT_DIR}/convert_cinit_sequence.py"
APP_BIN="${APP_DIR}/bin/cinit"

#--------------------------------------------------------------
# Parse arguments and change default variable values
#--------------------------------------------------------------
SEQUENCE_FILE="${SCRIPT_DIR}/dwc_ddrctl_cinit.seq"
OUTPUT_FILE="${SCRIPT_DIR}/sequence_modified.txt"
OPTION_DEBUG=0
MAKE_CLEAN_ALL=0
OPTION_SKIP_BUILD=0
OPTION_DELETE_INTERMEDIATE=0

while [ "$#" -gt 0 ]
do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -i|--input-sequence-file)
            SEQUENCE_FILE="$2"
            shift 2
            ;;
        -o|--output-sequence-file)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --debug)
            OPTION_DEBUG=1
            shift 1
            ;;
        --clean-all)
            MAKE_CLEAN_ALL=1
            shift 1
            ;;
        --skip-build)
            OPTION_SKIP_BUILD=1
            shift 1
            ;;
        --delete-intermediate)
            OPTION_DELETE_INTERMEDIATE=1
            shift 1
            ;;
        *)
            error "$1 is not a valid argument"
            usage
            ;;
    esac
done

#--------------------------------------------------------------
# Script starts
#--------------------------------------------------------------
if [[ $OPTION_SKIP_BUILD -eq 0 ]]; then
    make -C $APP_DIR   clean-all               CINIT_PLATFORM=local_x86 PROTOCOL=lpddr5
fi
if [[ $MAKE_CLEAN_ALL -eq 1 ]]; then
    exit $?
fi

if [[ $OPTION_DEBUG -eq 1 ]]; then
    echo "============ DEBUG of ${APP_DIR} ============"
    make -C $APP_DIR   debug               CINIT_PLATFORM=local_x86 PROTOCOL=lpddr5

    echo "============ DEBUG of ${CINIT_DIR} ============"
    make -C $CINIT_DIR debug               CINIT_PLATFORM=local_x86 PROTOCOL=lpddr5 PHY_VDEFINES_FILE=$PHY_VDEFINES_FILE
    exit $?
fi

# Build CInit if needed
if [[ $OPTION_SKIP_BUILD -eq 0 ]]; then
    make -C $CINIT_DIR load-hw-config      CINIT_PLATFORM=local_x86 PROTOCOL=lpddr5 PHY_VDEFINES_FILE=$PHY_VDEFINES_FILE
    make -C $CINIT_DIR load-defconfig      CINIT_PLATFORM=local_x86 PROTOCOL=lpddr5
    make -C $CINIT_DIR gen-verilog-headers CINIT_PLATFORM=local_x86 PROTOCOL=lpddr5

    if [[ $? -eq 0 ]]; then
        echo "CINIT compiled ok"
    else
        exit 1
    fi

    # Build the Standalone App
    make -C $APP_DIR                       CINIT_PLATFORM=local_x86 PROTOCOL=lpddr5

    if [[ $? -eq 0 ]]; then
        echo "Standalone app compiled ok"
    else
        exit 1
    fi
else
    if [[ ! -f "$APP_BIN" ]]; then
        echo "Error: Standalone app does not exist."
        exit 1
    else
        echo "Info: Skipping build successfully."
    fi
fi


# Generate sequence file and process it
cd $SCRIPT_DIR
$APP_BIN
if [[ ! -f "$SEQUENCE_FILE" ]]; then
    echo "Error: Intermediate sequence file does not exist."
    exit 1
fi
$CONVERSION_SCRIPT --input-file=${SEQUENCE_FILE} --output-file=${OUTPUT_FILE}
if [[ "$OPTION_DELETE_INTERMEDIATE" -eq 1 ]]; then
    rm ${SEQUENCE_FILE}
    echo "Intermediate results are deleted."
else
    echo "Intermediate results are retained."
fi
cd -
